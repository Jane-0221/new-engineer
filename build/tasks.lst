ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"tasks.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	1120
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 2


  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  69              		.align	2
  72              	uxDeletedTasksWaitingCleanUp:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  81              		.align	2
  84              	uxCurrentNumberOfTasks:
  85 0000 00000000 		.space	4
  86              		.section	.bss.xTickCount,"aw",%nobits
  87              		.align	2
  90              	xTickCount:
  91 0000 00000000 		.space	4
  92              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  93              		.align	2
  96              	uxTopReadyPriority:
  97 0000 00000000 		.space	4
  98              		.section	.bss.xSchedulerRunning,"aw",%nobits
  99              		.align	2
 102              	xSchedulerRunning:
 103 0000 00000000 		.space	4
 104              		.section	.bss.xPendedTicks,"aw",%nobits
 105              		.align	2
 108              	xPendedTicks:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xYieldPending,"aw",%nobits
 111              		.align	2
 114              	xYieldPending:
 115 0000 00000000 		.space	4
 116              		.section	.bss.xNumOfOverflows,"aw",%nobits
 117              		.align	2
 120              	xNumOfOverflows:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxTaskNumber,"aw",%nobits
 123              		.align	2
 126              	uxTaskNumber:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 3


 127 0000 00000000 		.space	4
 128              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 129              		.align	2
 132              	xNextTaskUnblockTime:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 135              		.align	2
 138              	xIdleTaskHandle:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 141              		.align	2
 144              	uxSchedulerSuspended:
 145 0000 00000000 		.space	4
 146              		.section	.text.xTaskCreateStatic,"ax",%progbits
 147              		.align	1
 148              		.global	xTaskCreateStatic
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	xTaskCreateStatic:
 154              	.LFB4:
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 4


  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 5


  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 6


 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 7


 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 8


 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 9


 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 10


 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 11


 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 12


 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 13


 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 155              		.loc 1 588 2
 156              		.cfi_startproc
 157              		@ args = 12, pretend = 0, frame = 40
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI0:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8EB0     		sub	sp, sp, #56
 165              	.LCFI1:
 166              		.cfi_def_cfa_offset 64
 167 0004 04AF     		add	r7, sp, #16
 168              	.LCFI2:
 169              		.cfi_def_cfa 7, 48
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 14


 173 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 174              		.loc 1 592 3
 175 000e 7B6B     		ldr	r3, [r7, #52]
 176 0010 002B     		cmp	r3, #0
 177 0012 0BD1     		bne	.L2
 178              	.LBB119:
 179              	.LBB120:
 180              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 15


  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 16


 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 17


 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 181              		.loc 2 195 2
 182              		.syntax unified
 183              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 184 0014 4FF05003 			mov r3, #80												
 185 0018 83F31188 		msr basepri, r3											
 186 001c BFF36F8F 		isb														
 187 0020 BFF34F8F 		dsb														
 188              	
 189              	@ 0 "" 2
 190              		.thumb
 191              		.syntax unified
 192 0024 3B62     		str	r3, [r7, #32]
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 193              		.loc 2 203 1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 18


 194 0026 00BF     		nop
 195              	.L3:
 196              	.LBE120:
 197              	.LBE119:
 198              		.loc 1 592 3
 199 0028 00BF     		nop
 200 002a FDE7     		b	.L3
 201              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 202              		.loc 1 593 3
 203 002c BB6B     		ldr	r3, [r7, #56]
 204 002e 002B     		cmp	r3, #0
 205 0030 0BD1     		bne	.L4
 206              	.LBB121:
 207              	.LBB122:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 208              		.loc 2 195 2
 209              		.syntax unified
 210              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 211 0032 4FF05003 			mov r3, #80												
 212 0036 83F31188 		msr basepri, r3											
 213 003a BFF36F8F 		isb														
 214 003e BFF34F8F 		dsb														
 215              	
 216              	@ 0 "" 2
 217              		.thumb
 218              		.syntax unified
 219 0042 FB61     		str	r3, [r7, #28]
 220              		.loc 2 203 1
 221 0044 00BF     		nop
 222              	.L5:
 223              	.LBE122:
 224              	.LBE121:
 225              		.loc 1 593 3
 226 0046 00BF     		nop
 227 0048 FDE7     		b	.L5
 228              	.L4:
 229              	.LBB123:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 230              		.loc 1 600 20
 231 004a 5C23     		movs	r3, #92
 232 004c 3B61     		str	r3, [r7, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 233              		.loc 1 601 4
 234 004e 3B69     		ldr	r3, [r7, #16]
 235 0050 5C2B     		cmp	r3, #92
 236 0052 0BD0     		beq	.L6
 237              	.LBB124:
 238              	.LBB125:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239              		.loc 2 195 2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 19


 240              		.syntax unified
 241              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 242 0054 4FF05003 			mov r3, #80												
 243 0058 83F31188 		msr basepri, r3											
 244 005c BFF36F8F 		isb														
 245 0060 BFF34F8F 		dsb														
 246              	
 247              	@ 0 "" 2
 248              		.thumb
 249              		.syntax unified
 250 0064 BB61     		str	r3, [r7, #24]
 251              		.loc 2 203 1
 252 0066 00BF     		nop
 253              	.L7:
 254              	.LBE125:
 255              	.LBE124:
 256              		.loc 1 601 4
 257 0068 00BF     		nop
 258 006a FDE7     		b	.L7
 259              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 260              		.loc 1 602 4
 261 006c 3B69     		ldr	r3, [r7, #16]
 262              	.LBE123:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 263              		.loc 1 607 5
 264 006e BB6B     		ldr	r3, [r7, #56]
 265 0070 002B     		cmp	r3, #0
 266 0072 1ED0     		beq	.L8
 267              		.loc 1 607 32 discriminator 1
 268 0074 7B6B     		ldr	r3, [r7, #52]
 269 0076 002B     		cmp	r3, #0
 270 0078 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 271              		.loc 1 611 13
 272 007a BB6B     		ldr	r3, [r7, #56]
 273 007c 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 274              		.loc 1 612 22
 275 007e 7B6A     		ldr	r3, [r7, #36]
 276 0080 7A6B     		ldr	r2, [r7, #52]
 277 0082 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 278              		.loc 1 618 37
 279 0084 7B6A     		ldr	r3, [r7, #36]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 20


 280 0086 0222     		movs	r2, #2
 281 0088 83F85920 		strb	r2, [r3, #89]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 282              		.loc 1 622 4
 283 008c 0023     		movs	r3, #0
 284 008e 0393     		str	r3, [sp, #12]
 285 0090 7B6A     		ldr	r3, [r7, #36]
 286 0092 0293     		str	r3, [sp, #8]
 287 0094 07F11403 		add	r3, r7, #20
 288 0098 0193     		str	r3, [sp, #4]
 289 009a 3B6B     		ldr	r3, [r7, #48]
 290 009c 0093     		str	r3, [sp]
 291 009e 3B68     		ldr	r3, [r7]
 292 00a0 7A68     		ldr	r2, [r7, #4]
 293 00a2 B968     		ldr	r1, [r7, #8]
 294 00a4 F868     		ldr	r0, [r7, #12]
 295 00a6 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 296              		.loc 1 623 4
 297 00aa 786A     		ldr	r0, [r7, #36]
 298 00ac FFF7FEFF 		bl	prvAddNewTaskToReadyList
 299 00b0 01E0     		b	.L9
 300              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 301              		.loc 1 627 12
 302 00b2 0023     		movs	r3, #0
 303 00b4 7B61     		str	r3, [r7, #20]
 304              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 305              		.loc 1 630 10
 306 00b6 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 307              		.loc 1 631 2
 308 00b8 1846     		mov	r0, r3
 309 00ba 2837     		adds	r7, r7, #40
 310              	.LCFI3:
 311              		.cfi_def_cfa_offset 8
 312 00bc BD46     		mov	sp, r7
 313              	.LCFI4:
 314              		.cfi_def_cfa_register 13
 315              		@ sp needed
 316 00be 80BD     		pop	{r7, pc}
 317              		.cfi_endproc
 318              	.LFE4:
 320              		.section	.text.xTaskCreate,"ax",%progbits
 321              		.align	1
 322              		.global	xTaskCreate
 323              		.syntax unified
 324              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 21


 325              		.thumb_func
 327              	xTaskCreate:
 328              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 22


 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 329              		.loc 1 739 2
 330              		.cfi_startproc
 331              		@ args = 8, pretend = 0, frame = 32
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 23


 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 80B5     		push	{r7, lr}
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 8CB0     		sub	sp, sp, #48
 339              	.LCFI6:
 340              		.cfi_def_cfa_offset 56
 341 0004 04AF     		add	r7, sp, #16
 342              	.LCFI7:
 343              		.cfi_def_cfa 7, 40
 344 0006 F860     		str	r0, [r7, #12]
 345 0008 B960     		str	r1, [r7, #8]
 346 000a 3B60     		str	r3, [r7]
 347 000c 1346     		mov	r3, r2	@ movhi
 348 000e FB80     		strh	r3, [r7, #6]	@ movhi
 349              	.LBB126:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 350              		.loc 1 773 32
 351 0010 FB88     		ldrh	r3, [r7, #6]
 352              		.loc 1 773 14
 353 0012 9B00     		lsls	r3, r3, #2
 354 0014 1846     		mov	r0, r3
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 24


 355 0016 FFF7FEFF 		bl	pvPortMalloc
 356 001a 7861     		str	r0, [r7, #20]
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 357              		.loc 1 775 6
 358 001c 7B69     		ldr	r3, [r7, #20]
 359 001e 002B     		cmp	r3, #0
 360 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 361              		.loc 1 778 28
 362 0022 5C20     		movs	r0, #92
 363 0024 FFF7FEFF 		bl	pvPortMalloc
 364 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 365              		.loc 1 780 7
 366 002a FB69     		ldr	r3, [r7, #28]
 367 002c 002B     		cmp	r3, #0
 368 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 369              		.loc 1 783 24
 370 0030 FB69     		ldr	r3, [r7, #28]
 371 0032 7A69     		ldr	r2, [r7, #20]
 372 0034 1A63     		str	r2, [r3, #48]
 373 0036 05E0     		b	.L14
 374              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 375              		.loc 1 789 6
 376 0038 7869     		ldr	r0, [r7, #20]
 377 003a FFF7FEFF 		bl	vPortFree
 378 003e 01E0     		b	.L14
 379              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 380              		.loc 1 794 14
 381 0040 0023     		movs	r3, #0
 382 0042 FB61     		str	r3, [r7, #28]
 383              	.L14:
 384              	.LBE126:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 385              		.loc 1 799 5
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 25


 386 0044 FB69     		ldr	r3, [r7, #28]
 387 0046 002B     		cmp	r3, #0
 388 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 389              		.loc 1 805 37
 390 004a FB69     		ldr	r3, [r7, #28]
 391 004c 0022     		movs	r2, #0
 392 004e 83F85920 		strb	r2, [r3, #89]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 393              		.loc 1 809 4
 394 0052 FA88     		ldrh	r2, [r7, #6]
 395 0054 0023     		movs	r3, #0
 396 0056 0393     		str	r3, [sp, #12]
 397 0058 FB69     		ldr	r3, [r7, #28]
 398 005a 0293     		str	r3, [sp, #8]
 399 005c FB6A     		ldr	r3, [r7, #44]
 400 005e 0193     		str	r3, [sp, #4]
 401 0060 BB6A     		ldr	r3, [r7, #40]
 402 0062 0093     		str	r3, [sp]
 403 0064 3B68     		ldr	r3, [r7]
 404 0066 B968     		ldr	r1, [r7, #8]
 405 0068 F868     		ldr	r0, [r7, #12]
 406 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 407              		.loc 1 810 4
 408 006e F869     		ldr	r0, [r7, #28]
 409 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 410              		.loc 1 811 12
 411 0074 0123     		movs	r3, #1
 412 0076 BB61     		str	r3, [r7, #24]
 413 0078 02E0     		b	.L16
 414              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 415              		.loc 1 815 12
 416 007a 4FF0FF33 		mov	r3, #-1
 417 007e BB61     		str	r3, [r7, #24]
 418              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 419              		.loc 1 818 10
 420 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 421              		.loc 1 819 2
 422 0082 1846     		mov	r0, r3
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 26


 423 0084 2037     		adds	r7, r7, #32
 424              	.LCFI8:
 425              		.cfi_def_cfa_offset 8
 426 0086 BD46     		mov	sp, r7
 427              	.LCFI9:
 428              		.cfi_def_cfa_register 13
 429              		@ sp needed
 430 0088 80BD     		pop	{r7, pc}
 431              		.cfi_endproc
 432              	.LFE5:
 434              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 440              	prvInitialiseNewTask:
 441              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 442              		.loc 1 832 1
 443              		.cfi_startproc
 444              		@ args = 16, pretend = 0, frame = 32
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 80B5     		push	{r7, lr}
 447              	.LCFI10:
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 88B0     		sub	sp, sp, #32
 452              	.LCFI11:
 453              		.cfi_def_cfa_offset 40
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI12:
 456              		.cfi_def_cfa_register 7
 457 0006 F860     		str	r0, [r7, #12]
 458 0008 B960     		str	r1, [r7, #8]
 459 000a 7A60     		str	r2, [r7, #4]
 460 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 27


 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 461              		.loc 1 854 28
 462 000e 3B6B     		ldr	r3, [r7, #48]
 463 0010 186B     		ldr	r0, [r3, #48]
 464              		.loc 1 854 12
 465 0012 7B68     		ldr	r3, [r7, #4]
 466 0014 9B00     		lsls	r3, r3, #2
 467 0016 1A46     		mov	r2, r3
 468 0018 A521     		movs	r1, #165
 469 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 470              		.loc 1 864 29
 471 001e 3B6B     		ldr	r3, [r7, #48]
 472 0020 1A6B     		ldr	r2, [r3, #48]
 473              		.loc 1 864 38
 474 0022 7968     		ldr	r1, [r7, #4]
 475 0024 6FF04043 		mvn	r3, #-1073741824
 476 0028 0B44     		add	r3, r3, r1
 477 002a 9B00     		lsls	r3, r3, #2
 478              		.loc 1 864 16
 479 002c 1344     		add	r3, r3, r2
 480 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 481              		.loc 1 865 40
 482 0030 BB69     		ldr	r3, [r7, #24]
 483              		.loc 1 865 81
 484 0032 23F00703 		bic	r3, r3, #7
 485              		.loc 1 865 16
 486 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 487              		.loc 1 868 3
 488 0038 BB69     		ldr	r3, [r7, #24]
 489 003a 03F00703 		and	r3, r3, #7
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 28


 490 003e 002B     		cmp	r3, #0
 491 0040 0BD0     		beq	.L19
 492              	.LBB127:
 493              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 494              		.loc 2 195 2
 495              		.syntax unified
 496              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 497 0042 4FF05003 			mov r3, #80												
 498 0046 83F31188 		msr basepri, r3											
 499 004a BFF36F8F 		isb														
 500 004e BFF34F8F 		dsb														
 501              	
 502              	@ 0 "" 2
 503              		.thumb
 504              		.syntax unified
 505 0052 7B61     		str	r3, [r7, #20]
 506              		.loc 2 203 1
 507 0054 00BF     		nop
 508              	.L20:
 509              	.LBE128:
 510              	.LBE127:
 511              		.loc 1 868 3
 512 0056 00BF     		nop
 513 0058 FDE7     		b	.L20
 514              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 515              		.loc 1 892 4
 516 005a BB68     		ldr	r3, [r7, #8]
 517 005c 002B     		cmp	r3, #0
 518 005e 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 519              		.loc 1 894 10
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 29


 520 0060 0023     		movs	r3, #0
 521 0062 FB61     		str	r3, [r7, #28]
 522              		.loc 1 894 3
 523 0064 12E0     		b	.L22
 524              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 525              		.loc 1 896 38
 526 0066 BA68     		ldr	r2, [r7, #8]
 527 0068 FB69     		ldr	r3, [r7, #28]
 528 006a 1344     		add	r3, r3, r2
 529 006c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 530              		.loc 1 896 30
 531 006e 3A6B     		ldr	r2, [r7, #48]
 532 0070 FB69     		ldr	r3, [r7, #28]
 533 0072 1344     		add	r3, r3, r2
 534 0074 3433     		adds	r3, r3, #52
 535 0076 0A46     		mov	r2, r1
 536 0078 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 537              		.loc 1 901 14
 538 007a BA68     		ldr	r2, [r7, #8]
 539 007c FB69     		ldr	r3, [r7, #28]
 540 007e 1344     		add	r3, r3, r2
 541 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 542              		.loc 1 901 6
 543 0082 002B     		cmp	r3, #0
 544 0084 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 545              		.loc 1 894 77 discriminator 2
 546 0086 FB69     		ldr	r3, [r7, #28]
 547 0088 0133     		adds	r3, r3, #1
 548 008a FB61     		str	r3, [r7, #28]
 549              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 550              		.loc 1 894 33 discriminator 1
 551 008c FB69     		ldr	r3, [r7, #28]
 552 008e 0F2B     		cmp	r3, #15
 553 0090 E9D9     		bls	.L25
 554 0092 00E0     		b	.L24
 555              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 556              		.loc 1 903 5
 557 0094 00BF     		nop
 558              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 30


 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 559              		.loc 1 913 55
 560 0096 3B6B     		ldr	r3, [r7, #48]
 561 0098 0022     		movs	r2, #0
 562 009a 83F84320 		strb	r2, [r3, #67]
 563 009e 03E0     		b	.L26
 564              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 565              		.loc 1 919 29
 566 00a0 3B6B     		ldr	r3, [r7, #48]
 567 00a2 0022     		movs	r2, #0
 568 00a4 83F83420 		strb	r2, [r3, #52]
 569              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 570              		.loc 1 924 4
 571 00a8 BB6A     		ldr	r3, [r7, #40]
 572 00aa 372B     		cmp	r3, #55
 573 00ac 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 574              		.loc 1 926 14
 575 00ae 3723     		movs	r3, #55
 576 00b0 BB62     		str	r3, [r7, #40]
 577              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 578              		.loc 1 933 23
 579 00b2 3B6B     		ldr	r3, [r7, #48]
 580 00b4 BA6A     		ldr	r2, [r7, #40]
 581 00b6 DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 582              		.loc 1 936 28
 583 00b8 3B6B     		ldr	r3, [r7, #48]
 584 00ba BA6A     		ldr	r2, [r7, #40]
 585 00bc DA64     		str	r2, [r3, #76]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 586              		.loc 1 937 27
 587 00be 3B6B     		ldr	r3, [r7, #48]
 588 00c0 0022     		movs	r2, #0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 31


 589 00c2 1A65     		str	r2, [r3, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 590              		.loc 1 941 2
 591 00c4 3B6B     		ldr	r3, [r7, #48]
 592 00c6 0433     		adds	r3, r3, #4
 593 00c8 1846     		mov	r0, r3
 594 00ca FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 595              		.loc 1 942 2
 596 00ce 3B6B     		ldr	r3, [r7, #48]
 597 00d0 1833     		adds	r3, r3, #24
 598 00d2 1846     		mov	r0, r3
 599 00d4 FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 600              		.loc 1 946 2
 601 00d8 3B6B     		ldr	r3, [r7, #48]
 602 00da 3A6B     		ldr	r2, [r7, #48]
 603 00dc 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 604              		.loc 1 949 2
 605 00de BB6A     		ldr	r3, [r7, #40]
 606 00e0 C3F13802 		rsb	r2, r3, #56
 607 00e4 3B6B     		ldr	r3, [r7, #48]
 608 00e6 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 609              		.loc 1 950 2
 610 00e8 3B6B     		ldr	r3, [r7, #48]
 611 00ea 3A6B     		ldr	r2, [r7, #48]
 612 00ec 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 32


 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 613              		.loc 1 992 29
 614 00ee 3B6B     		ldr	r3, [r7, #48]
 615 00f0 0022     		movs	r2, #0
 616 00f2 5A65     		str	r2, [r3, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 617              		.loc 1 993 27
 618 00f4 3B6B     		ldr	r3, [r7, #48]
 619 00f6 0022     		movs	r2, #0
 620 00f8 83F85820 		strb	r2, [r3, #88]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 33


1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 621              		.loc 1 1058 29
 622 00fc 3A68     		ldr	r2, [r7]
 623 00fe F968     		ldr	r1, [r7, #12]
 624 0100 B869     		ldr	r0, [r7, #24]
 625 0102 FFF7FEFF 		bl	pxPortInitialiseStack
 626 0106 0246     		mov	r2, r0
 627              		.loc 1 1058 27 discriminator 1
 628 0108 3B6B     		ldr	r3, [r7, #48]
 629 010a 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 630              		.loc 1 1064 4
 631 010c FB6A     		ldr	r3, [r7, #44]
 632 010e 002B     		cmp	r3, #0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 34


 633 0110 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 634              		.loc 1 1068 18
 635 0112 FB6A     		ldr	r3, [r7, #44]
 636 0114 3A6B     		ldr	r2, [r7, #48]
 637 0116 1A60     		str	r2, [r3]
 638              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 639              		.loc 1 1074 1
 640 0118 00BF     		nop
 641 011a 2037     		adds	r7, r7, #32
 642              	.LCFI13:
 643              		.cfi_def_cfa_offset 8
 644 011c BD46     		mov	sp, r7
 645              	.LCFI14:
 646              		.cfi_def_cfa_register 13
 647              		@ sp needed
 648 011e 80BD     		pop	{r7, pc}
 649              		.cfi_endproc
 650              	.LFE6:
 652              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 653              		.align	1
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 658              	prvAddNewTaskToReadyList:
 659              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 660              		.loc 1 1078 1
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 8
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 0000 80B5     		push	{r7, lr}
 665              	.LCFI15:
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 82B0     		sub	sp, sp, #8
 670              	.LCFI16:
 671              		.cfi_def_cfa_offset 16
 672 0004 00AF     		add	r7, sp, #0
 673              	.LCFI17:
 674              		.cfi_def_cfa_register 7
 675 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 35


1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 676              		.loc 1 1081 2
 677 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 678              		.loc 1 1083 25
 679 000c 2D4B     		ldr	r3, .L37
 680 000e 1B68     		ldr	r3, [r3]
 681 0010 0133     		adds	r3, r3, #1
 682 0012 2C4A     		ldr	r2, .L37
 683 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 684              		.loc 1 1084 20
 685 0016 2C4B     		ldr	r3, .L37+4
 686 0018 1B68     		ldr	r3, [r3]
 687              		.loc 1 1084 5
 688 001a 002B     		cmp	r3, #0
 689 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 690              		.loc 1 1088 17
 691 001e 2A4A     		ldr	r2, .L37+4
 692 0020 7B68     		ldr	r3, [r7, #4]
 693 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 694              		.loc 1 1090 31
 695 0024 274B     		ldr	r3, .L37
 696 0026 1B68     		ldr	r3, [r3]
 697              		.loc 1 1090 6
 698 0028 012B     		cmp	r3, #1
 699 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 700              		.loc 1 1095 5
 701 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 702 0030 0DE0     		b	.L33
 703              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 704              		.loc 1 1107 26
 705 0032 264B     		ldr	r3, .L37+8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 36


 706 0034 1B68     		ldr	r3, [r3]
 707              		.loc 1 1107 6
 708 0036 002B     		cmp	r3, #0
 709 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 710              		.loc 1 1109 21
 711 003a 234B     		ldr	r3, .L37+4
 712 003c 1B68     		ldr	r3, [r3]
 713 003e DA6A     		ldr	r2, [r3, #44]
 714              		.loc 1 1109 45
 715 0040 7B68     		ldr	r3, [r7, #4]
 716 0042 DB6A     		ldr	r3, [r3, #44]
 717              		.loc 1 1109 7
 718 0044 9A42     		cmp	r2, r3
 719 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 720              		.loc 1 1111 19
 721 0048 1F4A     		ldr	r2, .L37+4
 722 004a 7B68     		ldr	r3, [r7, #4]
 723 004c 1360     		str	r3, [r2]
 724              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 725              		.loc 1 1124 15
 726 004e 204B     		ldr	r3, .L37+12
 727 0050 1B68     		ldr	r3, [r3]
 728 0052 0133     		adds	r3, r3, #1
 729 0054 1E4A     		ldr	r2, .L37+12
 730 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 731              		.loc 1 1129 26
 732 0058 1D4B     		ldr	r3, .L37+12
 733 005a 1A68     		ldr	r2, [r3]
 734 005c 7B68     		ldr	r3, [r7, #4]
 735 005e 5A64     		str	r2, [r3, #68]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 37


 736              		.loc 1 1134 3
 737 0060 7B68     		ldr	r3, [r7, #4]
 738 0062 DA6A     		ldr	r2, [r3, #44]
 739 0064 1B4B     		ldr	r3, .L37+16
 740 0066 1B68     		ldr	r3, [r3]
 741 0068 9A42     		cmp	r2, r3
 742 006a 03D9     		bls	.L34
 743              		.loc 1 1134 3 is_stmt 0 discriminator 1
 744 006c 7B68     		ldr	r3, [r7, #4]
 745 006e DB6A     		ldr	r3, [r3, #44]
 746 0070 184A     		ldr	r2, .L37+16
 747 0072 1360     		str	r3, [r2]
 748              	.L34:
 749              		.loc 1 1134 3 discriminator 3
 750 0074 7B68     		ldr	r3, [r7, #4]
 751 0076 DA6A     		ldr	r2, [r3, #44]
 752 0078 1346     		mov	r3, r2
 753 007a 9B00     		lsls	r3, r3, #2
 754 007c 1344     		add	r3, r3, r2
 755 007e 9B00     		lsls	r3, r3, #2
 756 0080 154A     		ldr	r2, .L37+20
 757 0082 1A44     		add	r2, r2, r3
 758 0084 7B68     		ldr	r3, [r7, #4]
 759 0086 0433     		adds	r3, r3, #4
 760 0088 1946     		mov	r1, r3
 761 008a 1046     		mov	r0, r2
 762 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 763              		.loc 1 1138 2 is_stmt 1
 764 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 765              		.loc 1 1140 24
 766 0094 0D4B     		ldr	r3, .L37+8
 767 0096 1B68     		ldr	r3, [r3]
 768              		.loc 1 1140 4
 769 0098 002B     		cmp	r3, #0
 770 009a 0ED0     		beq	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 771              		.loc 1 1144 19
 772 009c 0A4B     		ldr	r3, .L37+4
 773 009e 1B68     		ldr	r3, [r3]
 774 00a0 DA6A     		ldr	r2, [r3, #44]
 775              		.loc 1 1144 42
 776 00a2 7B68     		ldr	r3, [r7, #4]
 777 00a4 DB6A     		ldr	r3, [r3, #44]
 778              		.loc 1 1144 5
 779 00a6 9A42     		cmp	r2, r3
 780 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 38


 781              		.loc 1 1146 4
 782 00aa 0C4B     		ldr	r3, .L37+24
 783 00ac 4FF08052 		mov	r2, #268435456
 784 00b0 1A60     		str	r2, [r3]
 785              		.syntax unified
 786              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 787 00b2 BFF34F8F 		dsb
 788              	@ 0 "" 2
 789              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 790 00b6 BFF36F8F 		isb
 791              	@ 0 "" 2
 792              		.thumb
 793              		.syntax unified
 794              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 795              		.loc 1 1157 1
 796 00ba 00BF     		nop
 797 00bc 0837     		adds	r7, r7, #8
 798              	.LCFI18:
 799              		.cfi_def_cfa_offset 8
 800 00be BD46     		mov	sp, r7
 801              	.LCFI19:
 802              		.cfi_def_cfa_register 13
 803              		@ sp needed
 804 00c0 80BD     		pop	{r7, pc}
 805              	.L38:
 806 00c2 00BF     		.align	2
 807              	.L37:
 808 00c4 00000000 		.word	uxCurrentNumberOfTasks
 809 00c8 00000000 		.word	pxCurrentTCB
 810 00cc 00000000 		.word	xSchedulerRunning
 811 00d0 00000000 		.word	uxTaskNumber
 812 00d4 00000000 		.word	uxTopReadyPriority
 813 00d8 00000000 		.word	pxReadyTasksLists
 814 00dc 04ED00E0 		.word	-536810236
 815              		.cfi_endproc
 816              	.LFE7:
 818              		.section	.text.vTaskDelete,"ax",%progbits
 819              		.align	1
 820              		.global	vTaskDelete
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 825              	vTaskDelete:
 826              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 39


1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 827              		.loc 1 1163 2
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 16
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831 0000 80B5     		push	{r7, lr}
 832              	.LCFI20:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 7, -8
 835              		.cfi_offset 14, -4
 836 0002 84B0     		sub	sp, sp, #16
 837              	.LCFI21:
 838              		.cfi_def_cfa_offset 24
 839 0004 00AF     		add	r7, sp, #0
 840              	.LCFI22:
 841              		.cfi_def_cfa_register 7
 842 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 843              		.loc 1 1166 3
 844 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 845              		.loc 1 1170 12
 846 000c 7B68     		ldr	r3, [r7, #4]
 847 000e 002B     		cmp	r3, #0
 848 0010 02D1     		bne	.L40
 849              		.loc 1 1170 12 is_stmt 0 discriminator 1
 850 0012 2D4B     		ldr	r3, .L49
 851 0014 1B68     		ldr	r3, [r3]
 852 0016 00E0     		b	.L41
 853              	.L40:
 854              		.loc 1 1170 12 discriminator 2
 855 0018 7B68     		ldr	r3, [r7, #4]
 856              	.L41:
 857              		.loc 1 1170 10 is_stmt 1 discriminator 4
 858 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 859              		.loc 1 1173 8
 860 001c FB68     		ldr	r3, [r7, #12]
 861 001e 0433     		adds	r3, r3, #4
 862 0020 1846     		mov	r0, r3
 863 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 40


1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 864              		.loc 1 1183 8
 865 0026 FB68     		ldr	r3, [r7, #12]
 866 0028 9B6A     		ldr	r3, [r3, #40]
 867              		.loc 1 1183 6
 868 002a 002B     		cmp	r3, #0
 869 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 870              		.loc 1 1185 14
 871 002e FB68     		ldr	r3, [r7, #12]
 872 0030 1833     		adds	r3, r3, #24
 873 0032 1846     		mov	r0, r3
 874 0034 FFF7FEFF 		bl	uxListRemove
 875              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 876              		.loc 1 1196 16
 877 0038 244B     		ldr	r3, .L49+4
 878 003a 1B68     		ldr	r3, [r3]
 879 003c 0133     		adds	r3, r3, #1
 880 003e 234A     		ldr	r2, .L49+4
 881 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 882              		.loc 1 1198 14
 883 0042 214B     		ldr	r3, .L49
 884 0044 1B68     		ldr	r3, [r3]
 885              		.loc 1 1198 6
 886 0046 FA68     		ldr	r2, [r7, #12]
 887 0048 9A42     		cmp	r2, r3
 888 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 889              		.loc 1 1205 5
 890 004c FB68     		ldr	r3, [r7, #12]
 891 004e 0433     		adds	r3, r3, #4
 892 0050 1946     		mov	r1, r3
 893 0052 1F48     		ldr	r0, .L49+8
 894 0054 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 41


1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 895              		.loc 1 1210 5
 896 0058 1E4B     		ldr	r3, .L49+12
 897 005a 1B68     		ldr	r3, [r3]
 898 005c 0133     		adds	r3, r3, #1
 899 005e 1D4A     		ldr	r2, .L49+12
 900 0060 1360     		str	r3, [r2]
 901 0062 09E0     		b	.L44
 902              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 903              		.loc 1 1225 5
 904 0064 1C4B     		ldr	r3, .L49+16
 905 0066 1B68     		ldr	r3, [r3]
 906 0068 013B     		subs	r3, r3, #1
 907 006a 1B4A     		ldr	r2, .L49+16
 908 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 909              		.loc 1 1227 5
 910 006e F868     		ldr	r0, [r7, #12]
 911 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 912              		.loc 1 1231 5
 913 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 914              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 915              		.loc 1 1234 3
 916 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 917              		.loc 1 1238 25
 918 007c 174B     		ldr	r3, .L49+20
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 42


 919 007e 1B68     		ldr	r3, [r3]
 920              		.loc 1 1238 5
 921 0080 002B     		cmp	r3, #0
 922 0082 1CD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 923              		.loc 1 1240 14
 924 0084 104B     		ldr	r3, .L49
 925 0086 1B68     		ldr	r3, [r3]
 926              		.loc 1 1240 6
 927 0088 FA68     		ldr	r2, [r7, #12]
 928 008a 9A42     		cmp	r2, r3
 929 008c 17D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 930              		.loc 1 1242 5
 931 008e 144B     		ldr	r3, .L49+24
 932 0090 1B68     		ldr	r3, [r3]
 933 0092 002B     		cmp	r3, #0
 934 0094 0BD0     		beq	.L46
 935              	.LBB129:
 936              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 937              		.loc 2 195 2
 938              		.syntax unified
 939              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 940 0096 4FF05003 			mov r3, #80												
 941 009a 83F31188 		msr basepri, r3											
 942 009e BFF36F8F 		isb														
 943 00a2 BFF34F8F 		dsb														
 944              	
 945              	@ 0 "" 2
 946              		.thumb
 947              		.syntax unified
 948 00a6 BB60     		str	r3, [r7, #8]
 949              		.loc 2 203 1
 950 00a8 00BF     		nop
 951              	.L47:
 952              	.LBE130:
 953              	.LBE129:
 954              		.loc 1 1242 5
 955 00aa 00BF     		nop
 956 00ac FDE7     		b	.L47
 957              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 958              		.loc 1 1243 5
 959 00ae 0D4B     		ldr	r3, .L49+28
 960 00b0 4FF08052 		mov	r2, #268435456
 961 00b4 1A60     		str	r2, [r3]
 962              		.syntax unified
 963              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 964 00b6 BFF34F8F 		dsb
 965              	@ 0 "" 2
 966              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 967 00ba BFF36F8F 		isb
 968              	@ 0 "" 2
 969              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 43


 970              		.syntax unified
 971              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972              		.loc 1 1250 2
 973 00be 00BF     		nop
 974 00c0 1037     		adds	r7, r7, #16
 975              	.LCFI23:
 976              		.cfi_def_cfa_offset 8
 977 00c2 BD46     		mov	sp, r7
 978              	.LCFI24:
 979              		.cfi_def_cfa_register 13
 980              		@ sp needed
 981 00c4 80BD     		pop	{r7, pc}
 982              	.L50:
 983 00c6 00BF     		.align	2
 984              	.L49:
 985 00c8 00000000 		.word	pxCurrentTCB
 986 00cc 00000000 		.word	uxTaskNumber
 987 00d0 00000000 		.word	xTasksWaitingTermination
 988 00d4 00000000 		.word	uxDeletedTasksWaitingCleanUp
 989 00d8 00000000 		.word	uxCurrentNumberOfTasks
 990 00dc 00000000 		.word	xSchedulerRunning
 991 00e0 00000000 		.word	uxSchedulerSuspended
 992 00e4 04ED00E0 		.word	-536810236
 993              		.cfi_endproc
 994              	.LFE8:
 996              		.section	.text.vTaskDelayUntil,"ax",%progbits
 997              		.align	1
 998              		.global	vTaskDelayUntil
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1003              	vTaskDelayUntil:
 1004              	.LFB9:
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1005              		.loc 1 1258 2
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 40
 1008              		@ frame_needed = 1, uses_anonymous_args = 0
 1009 0000 80B5     		push	{r7, lr}
 1010              	.LCFI25:
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 44


 1014 0002 8AB0     		sub	sp, sp, #40
 1015              	.LCFI26:
 1016              		.cfi_def_cfa_offset 48
 1017 0004 00AF     		add	r7, sp, #0
 1018              	.LCFI27:
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
 1021 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1022              		.loc 1 1260 30
 1023 000a 0023     		movs	r3, #0
 1024 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1025              		.loc 1 1262 3
 1026 000e 7B68     		ldr	r3, [r7, #4]
 1027 0010 002B     		cmp	r3, #0
 1028 0012 0BD1     		bne	.L52
 1029              	.LBB131:
 1030              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1031              		.loc 2 195 2
 1032              		.syntax unified
 1033              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1034 0014 4FF05003 			mov r3, #80												
 1035 0018 83F31188 		msr basepri, r3											
 1036 001c BFF36F8F 		isb														
 1037 0020 BFF34F8F 		dsb														
 1038              	
 1039              	@ 0 "" 2
 1040              		.thumb
 1041              		.syntax unified
 1042 0024 7B61     		str	r3, [r7, #20]
 1043              		.loc 2 203 1
 1044 0026 00BF     		nop
 1045              	.L53:
 1046              	.LBE132:
 1047              	.LBE131:
 1048              		.loc 1 1262 3
 1049 0028 00BF     		nop
 1050 002a FDE7     		b	.L53
 1051              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1052              		.loc 1 1263 3
 1053 002c 3B68     		ldr	r3, [r7]
 1054 002e 002B     		cmp	r3, #0
 1055 0030 0BD1     		bne	.L54
 1056              	.LBB133:
 1057              	.LBB134:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1058              		.loc 2 195 2
 1059              		.syntax unified
 1060              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1061 0032 4FF05003 			mov r3, #80												
 1062 0036 83F31188 		msr basepri, r3											
 1063 003a BFF36F8F 		isb														
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 45


 1064 003e BFF34F8F 		dsb														
 1065              	
 1066              	@ 0 "" 2
 1067              		.thumb
 1068              		.syntax unified
 1069 0042 3B61     		str	r3, [r7, #16]
 1070              		.loc 2 203 1
 1071 0044 00BF     		nop
 1072              	.L55:
 1073              	.LBE134:
 1074              	.LBE133:
 1075              		.loc 1 1263 3
 1076 0046 00BF     		nop
 1077 0048 FDE7     		b	.L55
 1078              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1079              		.loc 1 1264 3
 1080 004a 2A4B     		ldr	r3, .L64
 1081 004c 1B68     		ldr	r3, [r3]
 1082 004e 002B     		cmp	r3, #0
 1083 0050 0BD0     		beq	.L56
 1084              	.LBB135:
 1085              	.LBB136:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1086              		.loc 2 195 2
 1087              		.syntax unified
 1088              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1089 0052 4FF05003 			mov r3, #80												
 1090 0056 83F31188 		msr basepri, r3											
 1091 005a BFF36F8F 		isb														
 1092 005e BFF34F8F 		dsb														
 1093              	
 1094              	@ 0 "" 2
 1095              		.thumb
 1096              		.syntax unified
 1097 0062 FB60     		str	r3, [r7, #12]
 1098              		.loc 2 203 1
 1099 0064 00BF     		nop
 1100              	.L57:
 1101              	.LBE136:
 1102              	.LBE135:
 1103              		.loc 1 1264 3
 1104 0066 00BF     		nop
 1105 0068 FDE7     		b	.L57
 1106              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1107              		.loc 1 1266 3
 1108 006a FFF7FEFF 		bl	vTaskSuspendAll
 1109              	.LBB137:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1110              		.loc 1 1270 21
 1111 006e 224B     		ldr	r3, .L64+4
 1112 0070 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 46


 1113 0072 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1114              		.loc 1 1273 18
 1115 0074 7B68     		ldr	r3, [r7, #4]
 1116 0076 1B68     		ldr	r3, [r3]
 1117              		.loc 1 1273 16
 1118 0078 3A68     		ldr	r2, [r7]
 1119 007a 1344     		add	r3, r3, r2
 1120 007c FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1121              		.loc 1 1275 26
 1122 007e 7B68     		ldr	r3, [r7, #4]
 1123 0080 1B68     		ldr	r3, [r3]
 1124              		.loc 1 1275 6
 1125 0082 3A6A     		ldr	r2, [r7, #32]
 1126 0084 9A42     		cmp	r2, r3
 1127 0086 0BD2     		bcs	.L58
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1128              		.loc 1 1282 25
 1129 0088 7B68     		ldr	r3, [r7, #4]
 1130 008a 1B68     		ldr	r3, [r3]
 1131              		.loc 1 1282 7
 1132 008c FA69     		ldr	r2, [r7, #28]
 1133 008e 9A42     		cmp	r2, r3
 1134 0090 11D2     		bcs	.L59
 1135              		.loc 1 1282 47 discriminator 1
 1136 0092 FA69     		ldr	r2, [r7, #28]
 1137 0094 3B6A     		ldr	r3, [r7, #32]
 1138 0096 9A42     		cmp	r2, r3
 1139 0098 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1140              		.loc 1 1284 19
 1141 009a 0123     		movs	r3, #1
 1142 009c 7B62     		str	r3, [r7, #36]
 1143 009e 0AE0     		b	.L59
 1144              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 47


1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1145              		.loc 1 1296 25
 1146 00a0 7B68     		ldr	r3, [r7, #4]
 1147 00a2 1B68     		ldr	r3, [r3]
 1148              		.loc 1 1296 7
 1149 00a4 FA69     		ldr	r2, [r7, #28]
 1150 00a6 9A42     		cmp	r2, r3
 1151 00a8 03D3     		bcc	.L60
 1152              		.loc 1 1296 47 discriminator 1
 1153 00aa FA69     		ldr	r2, [r7, #28]
 1154 00ac 3B6A     		ldr	r3, [r7, #32]
 1155 00ae 9A42     		cmp	r2, r3
 1156 00b0 01D9     		bls	.L59
 1157              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1158              		.loc 1 1298 19
 1159 00b2 0123     		movs	r3, #1
 1160 00b4 7B62     		str	r3, [r7, #36]
 1161              	.L59:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1162              		.loc 1 1307 24
 1163 00b6 7B68     		ldr	r3, [r7, #4]
 1164 00b8 FA69     		ldr	r2, [r7, #28]
 1165 00ba 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1166              		.loc 1 1309 6
 1167 00bc 7B6A     		ldr	r3, [r7, #36]
 1168 00be 002B     		cmp	r3, #0
 1169 00c0 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1170              		.loc 1 1315 5
 1171 00c2 FA69     		ldr	r2, [r7, #28]
 1172 00c4 3B6A     		ldr	r3, [r7, #32]
 1173 00c6 D31A     		subs	r3, r2, r3
 1174 00c8 0021     		movs	r1, #0
 1175 00ca 1846     		mov	r0, r3
 1176 00cc FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1177              	.L61:
 1178              	.LBE137:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 48


1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1179              		.loc 1 1322 21
 1180 00d0 FFF7FEFF 		bl	xTaskResumeAll
 1181 00d4 B861     		str	r0, [r7, #24]
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1182              		.loc 1 1326 5
 1183 00d6 BB69     		ldr	r3, [r7, #24]
 1184 00d8 002B     		cmp	r3, #0
 1185 00da 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1186              		.loc 1 1328 4
 1187 00dc 074B     		ldr	r3, .L64+8
 1188 00de 4FF08052 		mov	r2, #268435456
 1189 00e2 1A60     		str	r2, [r3]
 1190              		.syntax unified
 1191              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1192 00e4 BFF34F8F 		dsb
 1193              	@ 0 "" 2
 1194              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1195 00e8 BFF36F8F 		isb
 1196              	@ 0 "" 2
 1197              		.thumb
 1198              		.syntax unified
 1199              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1200              		.loc 1 1334 2
 1201 00ec 00BF     		nop
 1202 00ee 2837     		adds	r7, r7, #40
 1203              	.LCFI28:
 1204              		.cfi_def_cfa_offset 8
 1205 00f0 BD46     		mov	sp, r7
 1206              	.LCFI29:
 1207              		.cfi_def_cfa_register 13
 1208              		@ sp needed
 1209 00f2 80BD     		pop	{r7, pc}
 1210              	.L65:
 1211              		.align	2
 1212              	.L64:
 1213 00f4 00000000 		.word	uxSchedulerSuspended
 1214 00f8 00000000 		.word	xTickCount
 1215 00fc 04ED00E0 		.word	-536810236
 1216              		.cfi_endproc
 1217              	.LFE9:
 1219              		.section	.text.vTaskDelay,"ax",%progbits
 1220              		.align	1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 49


 1221              		.global	vTaskDelay
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1226              	vTaskDelay:
 1227              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1228              		.loc 1 1342 2
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 16
 1231              		@ frame_needed = 1, uses_anonymous_args = 0
 1232 0000 80B5     		push	{r7, lr}
 1233              	.LCFI30:
 1234              		.cfi_def_cfa_offset 8
 1235              		.cfi_offset 7, -8
 1236              		.cfi_offset 14, -4
 1237 0002 84B0     		sub	sp, sp, #16
 1238              	.LCFI31:
 1239              		.cfi_def_cfa_offset 24
 1240 0004 00AF     		add	r7, sp, #0
 1241              	.LCFI32:
 1242              		.cfi_def_cfa_register 7
 1243 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1244              		.loc 1 1343 13
 1245 0008 0023     		movs	r3, #0
 1246 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1247              		.loc 1 1346 5
 1248 000c 7B68     		ldr	r3, [r7, #4]
 1249 000e 002B     		cmp	r3, #0
 1250 0010 18D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1251              		.loc 1 1348 4
 1252 0012 144B     		ldr	r3, .L72
 1253 0014 1B68     		ldr	r3, [r3]
 1254 0016 002B     		cmp	r3, #0
 1255 0018 0BD0     		beq	.L68
 1256              	.LBB138:
 1257              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1258              		.loc 2 195 2
 1259              		.syntax unified
 1260              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1261 001a 4FF05003 			mov r3, #80												
 1262 001e 83F31188 		msr basepri, r3											
 1263 0022 BFF36F8F 		isb														
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 50


 1264 0026 BFF34F8F 		dsb														
 1265              	
 1266              	@ 0 "" 2
 1267              		.thumb
 1268              		.syntax unified
 1269 002a BB60     		str	r3, [r7, #8]
 1270              		.loc 2 203 1
 1271 002c 00BF     		nop
 1272              	.L69:
 1273              	.LBE139:
 1274              	.LBE138:
 1275              		.loc 1 1348 4
 1276 002e 00BF     		nop
 1277 0030 FDE7     		b	.L69
 1278              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1279              		.loc 1 1349 4
 1280 0032 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1281              		.loc 1 1360 5
 1282 0036 0021     		movs	r1, #0
 1283 0038 7868     		ldr	r0, [r7, #4]
 1284 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1285              		.loc 1 1362 22
 1286 003e FFF7FEFF 		bl	xTaskResumeAll
 1287 0042 F860     		str	r0, [r7, #12]
 1288              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1289              		.loc 1 1371 5
 1290 0044 FB68     		ldr	r3, [r7, #12]
 1291 0046 002B     		cmp	r3, #0
 1292 0048 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1293              		.loc 1 1373 4
 1294 004a 074B     		ldr	r3, .L72+4
 1295 004c 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 51


 1296 0050 1A60     		str	r2, [r3]
 1297              		.syntax unified
 1298              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1299 0052 BFF34F8F 		dsb
 1300              	@ 0 "" 2
 1301              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1302 0056 BFF36F8F 		isb
 1303              	@ 0 "" 2
 1304              		.thumb
 1305              		.syntax unified
 1306              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1307              		.loc 1 1379 2
 1308 005a 00BF     		nop
 1309 005c 1037     		adds	r7, r7, #16
 1310              	.LCFI33:
 1311              		.cfi_def_cfa_offset 8
 1312 005e BD46     		mov	sp, r7
 1313              	.LCFI34:
 1314              		.cfi_def_cfa_register 13
 1315              		@ sp needed
 1316 0060 80BD     		pop	{r7, pc}
 1317              	.L73:
 1318 0062 00BF     		.align	2
 1319              	.L72:
 1320 0064 00000000 		.word	uxSchedulerSuspended
 1321 0068 04ED00E0 		.word	-536810236
 1322              		.cfi_endproc
 1323              	.LFE10:
 1325              		.section	.text.eTaskGetState,"ax",%progbits
 1326              		.align	1
 1327              		.global	eTaskGetState
 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1332              	eTaskGetState:
 1333              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1334              		.loc 1 1387 2
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 32
 1337              		@ frame_needed = 1, uses_anonymous_args = 0
 1338 0000 80B5     		push	{r7, lr}
 1339              	.LCFI35:
 1340              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 52


 1341              		.cfi_offset 7, -8
 1342              		.cfi_offset 14, -4
 1343 0002 88B0     		sub	sp, sp, #32
 1344              	.LCFI36:
 1345              		.cfi_def_cfa_offset 40
 1346 0004 00AF     		add	r7, sp, #0
 1347              	.LCFI37:
 1348              		.cfi_def_cfa_register 7
 1349 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1350              		.loc 1 1390 22
 1351 0008 7B68     		ldr	r3, [r7, #4]
 1352 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1353              		.loc 1 1392 3
 1354 000c BB69     		ldr	r3, [r7, #24]
 1355 000e 002B     		cmp	r3, #0
 1356 0010 0BD1     		bne	.L75
 1357              	.LBB140:
 1358              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1359              		.loc 2 195 2
 1360              		.syntax unified
 1361              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1362 0012 4FF05003 			mov r3, #80												
 1363 0016 83F31188 		msr basepri, r3											
 1364 001a BFF36F8F 		isb														
 1365 001e BFF34F8F 		dsb														
 1366              	
 1367              	@ 0 "" 2
 1368              		.thumb
 1369              		.syntax unified
 1370 0022 BB60     		str	r3, [r7, #8]
 1371              		.loc 2 203 1
 1372 0024 00BF     		nop
 1373              	.L76:
 1374              	.LBE141:
 1375              	.LBE140:
 1376              		.loc 1 1392 3
 1377 0026 00BF     		nop
 1378 0028 FDE7     		b	.L76
 1379              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1380              		.loc 1 1394 13
 1381 002a 244B     		ldr	r3, .L87
 1382 002c 1B68     		ldr	r3, [r3]
 1383              		.loc 1 1394 5
 1384 002e BA69     		ldr	r2, [r7, #24]
 1385 0030 9A42     		cmp	r2, r3
 1386 0032 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 53


 1387              		.loc 1 1397 12
 1388 0034 0023     		movs	r3, #0
 1389 0036 FB77     		strb	r3, [r7, #31]
 1390 0038 3AE0     		b	.L78
 1391              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1392              		.loc 1 1401 4
 1393 003a FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1394              		.loc 1 1403 17
 1395 003e BB69     		ldr	r3, [r7, #24]
 1396 0040 5B69     		ldr	r3, [r3, #20]
 1397 0042 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1398              		.loc 1 1404 19
 1399 0044 1E4B     		ldr	r3, .L87+4
 1400 0046 1B68     		ldr	r3, [r3]
 1401 0048 3B61     		str	r3, [r7, #16]
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1402              		.loc 1 1405 29
 1403 004a 1E4B     		ldr	r3, .L87+8
 1404 004c 1B68     		ldr	r3, [r3]
 1405 004e FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1406              		.loc 1 1407 4
 1407 0050 FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1408              		.loc 1 1409 6
 1409 0054 7A69     		ldr	r2, [r7, #20]
 1410 0056 3B69     		ldr	r3, [r7, #16]
 1411 0058 9A42     		cmp	r2, r3
 1412 005a 03D0     		beq	.L79
 1413              		.loc 1 1409 41 discriminator 1
 1414 005c 7A69     		ldr	r2, [r7, #20]
 1415 005e FB68     		ldr	r3, [r7, #12]
 1416 0060 9A42     		cmp	r2, r3
 1417 0062 02D1     		bne	.L80
 1418              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1419              		.loc 1 1413 13
 1420 0064 0223     		movs	r3, #2
 1421 0066 FB77     		strb	r3, [r7, #31]
 1422 0068 22E0     		b	.L78
 1423              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 54


 1424              		.loc 1 1417 12
 1425 006a 7B69     		ldr	r3, [r7, #20]
 1426 006c 164A     		ldr	r2, .L87+12
 1427 006e 9342     		cmp	r3, r2
 1428 0070 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1429              		.loc 1 1422 10
 1430 0072 BB69     		ldr	r3, [r7, #24]
 1431 0074 9B6A     		ldr	r3, [r3, #40]
 1432              		.loc 1 1422 8
 1433 0076 002B     		cmp	r3, #0
 1434 0078 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1435              		.loc 1 1430 17
 1436 007a BB69     		ldr	r3, [r7, #24]
 1437 007c 93F85830 		ldrb	r3, [r3, #88]
 1438 0080 DBB2     		uxtb	r3, r3
 1439              		.loc 1 1430 10
 1440 0082 012B     		cmp	r3, #1
 1441 0084 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1442              		.loc 1 1432 17
 1443 0086 0223     		movs	r3, #2
 1444 0088 FB77     		strb	r3, [r7, #31]
 1445 008a 11E0     		b	.L78
 1446              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1447              		.loc 1 1436 17
 1448 008c 0323     		movs	r3, #3
 1449 008e FB77     		strb	r3, [r7, #31]
 1450 0090 0EE0     		b	.L78
 1451              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 55


1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1452              		.loc 1 1447 15
 1453 0092 0223     		movs	r3, #2
 1454 0094 FB77     		strb	r3, [r7, #31]
 1455 0096 0BE0     		b	.L78
 1456              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1457              		.loc 1 1453 12
 1458 0098 7B69     		ldr	r3, [r7, #20]
 1459 009a 0C4A     		ldr	r2, .L87+16
 1460 009c 9342     		cmp	r3, r2
 1461 009e 02D0     		beq	.L84
 1462              		.loc 1 1453 59 discriminator 1
 1463 00a0 7B69     		ldr	r3, [r7, #20]
 1464 00a2 002B     		cmp	r3, #0
 1465 00a4 02D1     		bne	.L85
 1466              	.L84:
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1467              		.loc 1 1458 14
 1468 00a6 0423     		movs	r3, #4
 1469 00a8 FB77     		strb	r3, [r7, #31]
 1470 00aa 01E0     		b	.L78
 1471              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1472              		.loc 1 1466 13
 1473 00ac 0123     		movs	r3, #1
 1474 00ae FB77     		strb	r3, [r7, #31]
 1475              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1476              		.loc 1 1470 10
 1477 00b0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1478              		.loc 1 1471 2
 1479 00b2 1846     		mov	r0, r3
 1480 00b4 2037     		adds	r7, r7, #32
 1481              	.LCFI38:
 1482              		.cfi_def_cfa_offset 8
 1483 00b6 BD46     		mov	sp, r7
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 56


 1484              	.LCFI39:
 1485              		.cfi_def_cfa_register 13
 1486              		@ sp needed
 1487 00b8 80BD     		pop	{r7, pc}
 1488              	.L88:
 1489 00ba 00BF     		.align	2
 1490              	.L87:
 1491 00bc 00000000 		.word	pxCurrentTCB
 1492 00c0 00000000 		.word	pxDelayedTaskList
 1493 00c4 00000000 		.word	pxOverflowDelayedTaskList
 1494 00c8 00000000 		.word	xSuspendedTaskList
 1495 00cc 00000000 		.word	xTasksWaitingTermination
 1496              		.cfi_endproc
 1497              	.LFE11:
 1499              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1500              		.align	1
 1501              		.global	uxTaskPriorityGet
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1506              	uxTaskPriorityGet:
 1507              	.LFB12:
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1508              		.loc 1 1479 2
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 16
 1511              		@ frame_needed = 1, uses_anonymous_args = 0
 1512 0000 80B5     		push	{r7, lr}
 1513              	.LCFI40:
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 84B0     		sub	sp, sp, #16
 1518              	.LCFI41:
 1519              		.cfi_def_cfa_offset 24
 1520 0004 00AF     		add	r7, sp, #0
 1521              	.LCFI42:
 1522              		.cfi_def_cfa_register 7
 1523 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1524              		.loc 1 1483 3
 1525 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1526              		.loc 1 1487 12
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 57


 1527 000c 7B68     		ldr	r3, [r7, #4]
 1528 000e 002B     		cmp	r3, #0
 1529 0010 02D1     		bne	.L90
 1530              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1531 0012 074B     		ldr	r3, .L93
 1532 0014 1B68     		ldr	r3, [r3]
 1533 0016 00E0     		b	.L91
 1534              	.L90:
 1535              		.loc 1 1487 12 discriminator 2
 1536 0018 7B68     		ldr	r3, [r7, #4]
 1537              	.L91:
 1538              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1539 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1540              		.loc 1 1488 13
 1541 001c FB68     		ldr	r3, [r7, #12]
 1542 001e DB6A     		ldr	r3, [r3, #44]
 1543 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1544              		.loc 1 1490 3
 1545 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1546              		.loc 1 1492 10
 1547 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1548              		.loc 1 1493 2
 1549 0028 1846     		mov	r0, r3
 1550 002a 1037     		adds	r7, r7, #16
 1551              	.LCFI43:
 1552              		.cfi_def_cfa_offset 8
 1553 002c BD46     		mov	sp, r7
 1554              	.LCFI44:
 1555              		.cfi_def_cfa_register 13
 1556              		@ sp needed
 1557 002e 80BD     		pop	{r7, pc}
 1558              	.L94:
 1559              		.align	2
 1560              	.L93:
 1561 0030 00000000 		.word	pxCurrentTCB
 1562              		.cfi_endproc
 1563              	.LFE12:
 1565              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1566              		.align	1
 1567              		.global	uxTaskPriorityGetFromISR
 1568              		.syntax unified
 1569              		.thumb
 1570              		.thumb_func
 1572              	uxTaskPriorityGetFromISR:
 1573              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 58


1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1574              		.loc 1 1501 2
 1575              		.cfi_startproc
 1576              		@ args = 0, pretend = 0, frame = 32
 1577              		@ frame_needed = 1, uses_anonymous_args = 0
 1578 0000 80B5     		push	{r7, lr}
 1579              	.LCFI45:
 1580              		.cfi_def_cfa_offset 8
 1581              		.cfi_offset 7, -8
 1582              		.cfi_offset 14, -4
 1583 0002 88B0     		sub	sp, sp, #32
 1584              	.LCFI46:
 1585              		.cfi_def_cfa_offset 40
 1586 0004 00AF     		add	r7, sp, #0
 1587              	.LCFI47:
 1588              		.cfi_def_cfa_register 7
 1589 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1590              		.loc 1 1521 3
 1591 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1592              	.LBB142:
 1593              	.LBB143:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1594              		.loc 2 211 2
 1595              		.syntax unified
 1596              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1597 000c EFF31182 			mrs r2, basepri											
 1598 0010 4FF05003 		mov r3, #80												
 1599 0014 83F31188 		msr basepri, r3											
 1600 0018 BFF36F8F 		isb														
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 59


 1601 001c BFF34F8F 		dsb														
 1602              	
 1603              	@ 0 "" 2
 1604              		.thumb
 1605              		.syntax unified
 1606 0020 3A61     		str	r2, [r7, #16]
 1607 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1608              		.loc 2 223 9
 1609 0024 3B69     		ldr	r3, [r7, #16]
 1610              	.LBE143:
 1611              	.LBE142:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1612              		.loc 1 1523 27
 1613 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1614              		.loc 1 1527 12
 1615 0028 7B68     		ldr	r3, [r7, #4]
 1616 002a 002B     		cmp	r3, #0
 1617 002c 02D1     		bne	.L97
 1618              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1619 002e 094B     		ldr	r3, .L100
 1620 0030 1B68     		ldr	r3, [r3]
 1621 0032 00E0     		b	.L98
 1622              	.L97:
 1623              		.loc 1 1527 12 discriminator 2
 1624 0034 7B68     		ldr	r3, [r7, #4]
 1625              	.L98:
 1626              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1627 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1628              		.loc 1 1528 13
 1629 0038 BB69     		ldr	r3, [r7, #24]
 1630 003a DB6A     		ldr	r3, [r3, #44]
 1631 003c 7B61     		str	r3, [r7, #20]
 1632 003e FB69     		ldr	r3, [r7, #28]
 1633 0040 BB60     		str	r3, [r7, #8]
 1634              	.LBB144:
 1635              	.LBB145:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 60


 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1636              		.loc 2 229 2
 1637 0042 BB68     		ldr	r3, [r7, #8]
 1638              		.syntax unified
 1639              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1640 0044 83F31188 			msr basepri, r3	
 1641              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1642              		.loc 2 233 1
 1643              		.thumb
 1644              		.syntax unified
 1645 0048 00BF     		nop
 1646              	.LBE145:
 1647              	.LBE144:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1648              		.loc 1 1532 10
 1649 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1650              		.loc 1 1533 2
 1651 004c 1846     		mov	r0, r3
 1652 004e 2037     		adds	r7, r7, #32
 1653              	.LCFI48:
 1654              		.cfi_def_cfa_offset 8
 1655 0050 BD46     		mov	sp, r7
 1656              	.LCFI49:
 1657              		.cfi_def_cfa_register 13
 1658              		@ sp needed
 1659 0052 80BD     		pop	{r7, pc}
 1660              	.L101:
 1661              		.align	2
 1662              	.L100:
 1663 0054 00000000 		.word	pxCurrentTCB
 1664              		.cfi_endproc
 1665              	.LFE13:
 1667              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1668              		.align	1
 1669              		.global	vTaskPrioritySet
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1674              	vTaskPrioritySet:
 1675              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 61


1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1676              		.loc 1 1541 2
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 32
 1679              		@ frame_needed = 1, uses_anonymous_args = 0
 1680 0000 80B5     		push	{r7, lr}
 1681              	.LCFI50:
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0002 88B0     		sub	sp, sp, #32
 1686              	.LCFI51:
 1687              		.cfi_def_cfa_offset 40
 1688 0004 00AF     		add	r7, sp, #0
 1689              	.LCFI52:
 1690              		.cfi_def_cfa_register 7
 1691 0006 7860     		str	r0, [r7, #4]
 1692 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1693              		.loc 1 1544 13
 1694 000a 0023     		movs	r3, #0
 1695 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1696              		.loc 1 1546 3
 1697 000e 3B68     		ldr	r3, [r7]
 1698 0010 372B     		cmp	r3, #55
 1699 0012 0BD9     		bls	.L103
 1700              	.LBB146:
 1701              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1702              		.loc 2 195 2
 1703              		.syntax unified
 1704              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1705 0014 4FF05003 			mov r3, #80												
 1706 0018 83F31188 		msr basepri, r3											
 1707 001c BFF36F8F 		isb														
 1708 0020 BFF34F8F 		dsb														
 1709              	
 1710              	@ 0 "" 2
 1711              		.thumb
 1712              		.syntax unified
 1713 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1714              		.loc 2 203 1
 1715 0026 00BF     		nop
 1716              	.L104:
 1717              	.LBE147:
 1718              	.LBE146:
 1719              		.loc 1 1546 3
 1720 0028 00BF     		nop
 1721 002a FDE7     		b	.L104
 1722              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 62


1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1723              		.loc 1 1549 5
 1724 002c 3B68     		ldr	r3, [r7]
 1725 002e 372B     		cmp	r3, #55
 1726 0030 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1727              		.loc 1 1551 18
 1728 0032 3723     		movs	r3, #55
 1729 0034 3B60     		str	r3, [r7]
 1730              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1731              		.loc 1 1558 3
 1732 0036 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1733              		.loc 1 1562 12
 1734 003a 7B68     		ldr	r3, [r7, #4]
 1735 003c 002B     		cmp	r3, #0
 1736 003e 02D1     		bne	.L106
 1737              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1738 0040 3A4B     		ldr	r3, .L115
 1739 0042 1B68     		ldr	r3, [r3]
 1740 0044 00E0     		b	.L107
 1741              	.L106:
 1742              		.loc 1 1562 12 discriminator 2
 1743 0046 7B68     		ldr	r3, [r7, #4]
 1744              	.L107:
 1745              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1746 0048 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1747              		.loc 1 1568 27
 1748 004a BB69     		ldr	r3, [r7, #24]
 1749 004c DB6C     		ldr	r3, [r3, #76]
 1750 004e 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1751              		.loc 1 1576 6
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 63


 1752 0050 7A69     		ldr	r2, [r7, #20]
 1753 0052 3B68     		ldr	r3, [r7]
 1754 0054 9A42     		cmp	r2, r3
 1755 0056 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1756              		.loc 1 1580 7
 1757 0058 3A68     		ldr	r2, [r7]
 1758 005a 7B69     		ldr	r3, [r7, #20]
 1759 005c 9A42     		cmp	r2, r3
 1760 005e 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1761              		.loc 1 1582 16
 1762 0060 324B     		ldr	r3, .L115
 1763 0062 1B68     		ldr	r3, [r3]
 1764              		.loc 1 1582 8
 1765 0064 BA69     		ldr	r2, [r7, #24]
 1766 0066 9A42     		cmp	r2, r3
 1767 0068 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1768              		.loc 1 1587 40
 1769 006a 304B     		ldr	r3, .L115
 1770 006c 1B68     		ldr	r3, [r3]
 1771 006e DB6A     		ldr	r3, [r3, #44]
 1772              		.loc 1 1587 9
 1773 0070 3A68     		ldr	r2, [r7]
 1774 0072 9A42     		cmp	r2, r3
 1775 0074 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1776              		.loc 1 1589 23
 1777 0076 0123     		movs	r3, #1
 1778 0078 FB61     		str	r3, [r7, #28]
 1779 007a 06E0     		b	.L110
 1780              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1781              		.loc 1 1603 20
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 64


 1782 007c 2B4B     		ldr	r3, .L115
 1783 007e 1B68     		ldr	r3, [r3]
 1784              		.loc 1 1603 12
 1785 0080 BA69     		ldr	r2, [r7, #24]
 1786 0082 9A42     		cmp	r2, r3
 1787 0084 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1788              		.loc 1 1608 21
 1789 0086 0123     		movs	r3, #1
 1790 0088 FB61     		str	r3, [r7, #28]
 1791              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1792              		.loc 1 1620 27
 1793 008a BB69     		ldr	r3, [r7, #24]
 1794 008c DB6A     		ldr	r3, [r3, #44]
 1795 008e 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1796              		.loc 1 1626 15
 1797 0090 BB69     		ldr	r3, [r7, #24]
 1798 0092 DA6C     		ldr	r2, [r3, #76]
 1799              		.loc 1 1626 40
 1800 0094 BB69     		ldr	r3, [r7, #24]
 1801 0096 DB6A     		ldr	r3, [r3, #44]
 1802              		.loc 1 1626 8
 1803 0098 9A42     		cmp	r2, r3
 1804 009a 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1805              		.loc 1 1628 25
 1806 009c BB69     		ldr	r3, [r7, #24]
 1807 009e 3A68     		ldr	r2, [r7]
 1808 00a0 DA62     		str	r2, [r3, #44]
 1809              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 65


1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1810              		.loc 1 1636 28
 1811 00a2 BB69     		ldr	r3, [r7, #24]
 1812 00a4 3A68     		ldr	r2, [r7]
 1813 00a6 DA64     		str	r2, [r3, #76]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1814              		.loc 1 1646 11
 1815 00a8 BB69     		ldr	r3, [r7, #24]
 1816 00aa 9B69     		ldr	r3, [r3, #24]
 1817              		.loc 1 1646 7
 1818 00ac 002B     		cmp	r3, #0
 1819 00ae 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1820              		.loc 1 1648 6
 1821 00b0 3B68     		ldr	r3, [r7]
 1822 00b2 C3F13802 		rsb	r2, r3, #56
 1823 00b6 BB69     		ldr	r3, [r7, #24]
 1824 00b8 9A61     		str	r2, [r3, #24]
 1825              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1826              		.loc 1 1659 9
 1827 00ba BB69     		ldr	r3, [r7, #24]
 1828 00bc 5969     		ldr	r1, [r3, #20]
 1829 00be 3A69     		ldr	r2, [r7, #16]
 1830 00c0 1346     		mov	r3, r2
 1831 00c2 9B00     		lsls	r3, r3, #2
 1832 00c4 1344     		add	r3, r3, r2
 1833 00c6 9B00     		lsls	r3, r3, #2
 1834 00c8 194A     		ldr	r2, .L115+4
 1835 00ca 1344     		add	r3, r3, r2
 1836              		.loc 1 1659 7
 1837 00cc 9942     		cmp	r1, r3
 1838 00ce 1CD1     		bne	.L113
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 66


1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1839              		.loc 1 1664 10
 1840 00d0 BB69     		ldr	r3, [r7, #24]
 1841 00d2 0433     		adds	r3, r3, #4
 1842 00d4 1846     		mov	r0, r3
 1843 00d6 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1844              		.loc 1 1675 6
 1845 00da BB69     		ldr	r3, [r7, #24]
 1846 00dc DA6A     		ldr	r2, [r3, #44]
 1847 00de 154B     		ldr	r3, .L115+8
 1848 00e0 1B68     		ldr	r3, [r3]
 1849 00e2 9A42     		cmp	r2, r3
 1850 00e4 03D9     		bls	.L114
 1851              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1852 00e6 BB69     		ldr	r3, [r7, #24]
 1853 00e8 DB6A     		ldr	r3, [r3, #44]
 1854 00ea 124A     		ldr	r2, .L115+8
 1855 00ec 1360     		str	r3, [r2]
 1856              	.L114:
 1857              		.loc 1 1675 6 discriminator 3
 1858 00ee BB69     		ldr	r3, [r7, #24]
 1859 00f0 DA6A     		ldr	r2, [r3, #44]
 1860 00f2 1346     		mov	r3, r2
 1861 00f4 9B00     		lsls	r3, r3, #2
 1862 00f6 1344     		add	r3, r3, r2
 1863 00f8 9B00     		lsls	r3, r3, #2
 1864 00fa 0D4A     		ldr	r2, .L115+4
 1865 00fc 1A44     		add	r2, r2, r3
 1866 00fe BB69     		ldr	r3, [r7, #24]
 1867 0100 0433     		adds	r3, r3, #4
 1868 0102 1946     		mov	r1, r3
 1869 0104 1046     		mov	r0, r2
 1870 0106 FFF7FEFF 		bl	vListInsertEnd
 1871              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1872              		.loc 1 1682 7 is_stmt 1
 1873 010a FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 67


 1874 010c 002B     		cmp	r3, #0
 1875 010e 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1876              		.loc 1 1684 6
 1877 0110 094B     		ldr	r3, .L115+12
 1878 0112 4FF08052 		mov	r2, #268435456
 1879 0116 1A60     		str	r2, [r3]
 1880              		.syntax unified
 1881              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1882 0118 BFF34F8F 		dsb
 1883              	@ 0 "" 2
 1884              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1885 011c BFF36F8F 		isb
 1886              	@ 0 "" 2
 1887              		.thumb
 1888              		.syntax unified
 1889              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1890              		.loc 1 1696 3
 1891 0120 FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1892              		.loc 1 1697 2
 1893 0124 00BF     		nop
 1894 0126 2037     		adds	r7, r7, #32
 1895              	.LCFI53:
 1896              		.cfi_def_cfa_offset 8
 1897 0128 BD46     		mov	sp, r7
 1898              	.LCFI54:
 1899              		.cfi_def_cfa_register 13
 1900              		@ sp needed
 1901 012a 80BD     		pop	{r7, pc}
 1902              	.L116:
 1903              		.align	2
 1904              	.L115:
 1905 012c 00000000 		.word	pxCurrentTCB
 1906 0130 00000000 		.word	pxReadyTasksLists
 1907 0134 00000000 		.word	uxTopReadyPriority
 1908 0138 04ED00E0 		.word	-536810236
 1909              		.cfi_endproc
 1910              	.LFE14:
 1912              		.section	.text.vTaskSuspend,"ax",%progbits
 1913              		.align	1
 1914              		.global	vTaskSuspend
 1915              		.syntax unified
 1916              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 68


 1917              		.thumb_func
 1919              	vTaskSuspend:
 1920              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1921              		.loc 1 1705 2
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 16
 1924              		@ frame_needed = 1, uses_anonymous_args = 0
 1925 0000 80B5     		push	{r7, lr}
 1926              	.LCFI55:
 1927              		.cfi_def_cfa_offset 8
 1928              		.cfi_offset 7, -8
 1929              		.cfi_offset 14, -4
 1930 0002 84B0     		sub	sp, sp, #16
 1931              	.LCFI56:
 1932              		.cfi_def_cfa_offset 24
 1933 0004 00AF     		add	r7, sp, #0
 1934              	.LCFI57:
 1935              		.cfi_def_cfa_register 7
 1936 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1937              		.loc 1 1708 3
 1938 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1939              		.loc 1 1712 12
 1940 000c 7B68     		ldr	r3, [r7, #4]
 1941 000e 002B     		cmp	r3, #0
 1942 0010 02D1     		bne	.L118
 1943              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1944 0012 304B     		ldr	r3, .L129
 1945 0014 1B68     		ldr	r3, [r3]
 1946 0016 00E0     		b	.L119
 1947              	.L118:
 1948              		.loc 1 1712 12 discriminator 2
 1949 0018 7B68     		ldr	r3, [r7, #4]
 1950              	.L119:
 1951              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1952 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1953              		.loc 1 1718 8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 69


 1954 001c FB68     		ldr	r3, [r7, #12]
 1955 001e 0433     		adds	r3, r3, #4
 1956 0020 1846     		mov	r0, r3
 1957 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1958              		.loc 1 1728 8
 1959 0026 FB68     		ldr	r3, [r7, #12]
 1960 0028 9B6A     		ldr	r3, [r3, #40]
 1961              		.loc 1 1728 6
 1962 002a 002B     		cmp	r3, #0
 1963 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1964              		.loc 1 1730 14
 1965 002e FB68     		ldr	r3, [r7, #12]
 1966 0030 1833     		adds	r3, r3, #24
 1967 0032 1846     		mov	r0, r3
 1968 0034 FFF7FEFF 		bl	uxListRemove
 1969              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1970              		.loc 1 1737 4
 1971 0038 FB68     		ldr	r3, [r7, #12]
 1972 003a 0433     		adds	r3, r3, #4
 1973 003c 1946     		mov	r1, r3
 1974 003e 2648     		ldr	r0, .L129+4
 1975 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1976              		.loc 1 1741 14
 1977 0044 FB68     		ldr	r3, [r7, #12]
 1978 0046 93F85830 		ldrb	r3, [r3, #88]
 1979 004a DBB2     		uxtb	r3, r3
 1980              		.loc 1 1741 7
 1981 004c 012B     		cmp	r3, #1
 1982 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1983              		.loc 1 1745 27
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 70


 1984 0050 FB68     		ldr	r3, [r7, #12]
 1985 0052 0022     		movs	r2, #0
 1986 0054 83F85820 		strb	r2, [r3, #88]
 1987              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1988              		.loc 1 1750 3
 1989 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1990              		.loc 1 1752 25
 1991 005c 1F4B     		ldr	r3, .L129+8
 1992 005e 1B68     		ldr	r3, [r3]
 1993              		.loc 1 1752 5
 1994 0060 002B     		cmp	r3, #0
 1995 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1996              		.loc 1 1756 4
 1997 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1998              		.loc 1 1758 5
 1999 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2000              		.loc 1 1760 4
 2001 006c FFF7FEFF 		bl	vPortExitCritical
 2002              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 2003              		.loc 1 1767 13
 2004 0070 184B     		ldr	r3, .L129
 2005 0072 1B68     		ldr	r3, [r3]
 2006              		.loc 1 1767 5
 2007 0074 FA68     		ldr	r2, [r7, #12]
 2008 0076 9A42     		cmp	r2, r3
 2009 0078 28D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2010              		.loc 1 1769 26
 2011 007a 184B     		ldr	r3, .L129+8
 2012 007c 1B68     		ldr	r3, [r3]
 2013              		.loc 1 1769 6
 2014 007e 002B     		cmp	r3, #0
 2015 0080 18D0     		beq	.L124
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 71


1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2016              		.loc 1 1772 5
 2017 0082 174B     		ldr	r3, .L129+12
 2018 0084 1B68     		ldr	r3, [r3]
 2019 0086 002B     		cmp	r3, #0
 2020 0088 0BD0     		beq	.L125
 2021              	.LBB148:
 2022              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2023              		.loc 2 195 2
 2024              		.syntax unified
 2025              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2026 008a 4FF05003 			mov r3, #80												
 2027 008e 83F31188 		msr basepri, r3											
 2028 0092 BFF36F8F 		isb														
 2029 0096 BFF34F8F 		dsb														
 2030              	
 2031              	@ 0 "" 2
 2032              		.thumb
 2033              		.syntax unified
 2034 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2035              		.loc 2 203 1
 2036 009c 00BF     		nop
 2037              	.L126:
 2038              	.LBE149:
 2039              	.LBE148:
 2040              		.loc 1 1772 5
 2041 009e 00BF     		nop
 2042 00a0 FDE7     		b	.L126
 2043              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2044              		.loc 1 1773 5
 2045 00a2 104B     		ldr	r3, .L129+16
 2046 00a4 4FF08052 		mov	r2, #268435456
 2047 00a8 1A60     		str	r2, [r3]
 2048              		.syntax unified
 2049              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2050 00aa BFF34F8F 		dsb
 2051              	@ 0 "" 2
 2052              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2053 00ae BFF36F8F 		isb
 2054              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 72


1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2055              		.loc 1 1798 2
 2056              		.thumb
 2057              		.syntax unified
 2058 00b2 0BE0     		b	.L128
 2059              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2060              		.loc 1 1780 9
 2061 00b4 084B     		ldr	r3, .L129+4
 2062 00b6 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2063              		.loc 1 1780 56
 2064 00b8 0B4B     		ldr	r3, .L129+20
 2065 00ba 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2066              		.loc 1 1780 7
 2067 00bc 9A42     		cmp	r2, r3
 2068 00be 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2069              		.loc 1 1786 19
 2070 00c0 044B     		ldr	r3, .L129
 2071 00c2 0022     		movs	r2, #0
 2072 00c4 1A60     		str	r2, [r3]
 2073              		.loc 1 1798 2
 2074 00c6 01E0     		b	.L128
 2075              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2076              		.loc 1 1790 6
 2077 00c8 FFF7FEFF 		bl	vTaskSwitchContext
 2078              	.L128:
 2079              		.loc 1 1798 2
 2080 00cc 00BF     		nop
 2081 00ce 1037     		adds	r7, r7, #16
 2082              	.LCFI58:
 2083              		.cfi_def_cfa_offset 8
 2084 00d0 BD46     		mov	sp, r7
 2085              	.LCFI59:
 2086              		.cfi_def_cfa_register 13
 2087              		@ sp needed
 2088 00d2 80BD     		pop	{r7, pc}
 2089              	.L130:
 2090              		.align	2
 2091              	.L129:
 2092 00d4 00000000 		.word	pxCurrentTCB
 2093 00d8 00000000 		.word	xSuspendedTaskList
 2094 00dc 00000000 		.word	xSchedulerRunning
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 73


 2095 00e0 00000000 		.word	uxSchedulerSuspended
 2096 00e4 04ED00E0 		.word	-536810236
 2097 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2098              		.cfi_endproc
 2099              	.LFE15:
 2101              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2102              		.align	1
 2103              		.syntax unified
 2104              		.thumb
 2105              		.thumb_func
 2107              	prvTaskIsTaskSuspended:
 2108              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2109              		.loc 1 1806 2
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 24
 2112              		@ frame_needed = 1, uses_anonymous_args = 0
 2113              		@ link register save eliminated.
 2114 0000 80B4     		push	{r7}
 2115              	.LCFI60:
 2116              		.cfi_def_cfa_offset 4
 2117              		.cfi_offset 7, -4
 2118 0002 87B0     		sub	sp, sp, #28
 2119              	.LCFI61:
 2120              		.cfi_def_cfa_offset 32
 2121 0004 00AF     		add	r7, sp, #0
 2122              	.LCFI62:
 2123              		.cfi_def_cfa_register 7
 2124 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2125              		.loc 1 1807 13
 2126 0008 0023     		movs	r3, #0
 2127 000a 7B61     		str	r3, [r7, #20]
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2128              		.loc 1 1808 22
 2129 000c 7B68     		ldr	r3, [r7, #4]
 2130 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2131              		.loc 1 1814 3
 2132 0010 7B68     		ldr	r3, [r7, #4]
 2133 0012 002B     		cmp	r3, #0
 2134 0014 0BD1     		bne	.L132
 2135              	.LBB150:
 2136              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 74


 2137              		.loc 2 195 2
 2138              		.syntax unified
 2139              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2140 0016 4FF05003 			mov r3, #80												
 2141 001a 83F31188 		msr basepri, r3											
 2142 001e BFF36F8F 		isb														
 2143 0022 BFF34F8F 		dsb														
 2144              	
 2145              	@ 0 "" 2
 2146              		.thumb
 2147              		.syntax unified
 2148 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2149              		.loc 2 203 1
 2150 0028 00BF     		nop
 2151              	.L133:
 2152              	.LBE151:
 2153              	.LBE150:
 2154              		.loc 1 1814 3
 2155 002a 00BF     		nop
 2156 002c FDE7     		b	.L133
 2157              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2158              		.loc 1 1817 7
 2159 002e 3B69     		ldr	r3, [r7, #16]
 2160 0030 5B69     		ldr	r3, [r3, #20]
 2161              		.loc 1 1817 5
 2162 0032 0A4A     		ldr	r2, .L136
 2163 0034 9342     		cmp	r3, r2
 2164 0036 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2165              		.loc 1 1820 8
 2166 0038 3B69     		ldr	r3, [r7, #16]
 2167 003a 9B6A     		ldr	r3, [r3, #40]
 2168              		.loc 1 1820 6
 2169 003c 084A     		ldr	r2, .L136+4
 2170 003e 9342     		cmp	r3, r2
 2171 0040 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2172              		.loc 1 1824 9
 2173 0042 3B69     		ldr	r3, [r7, #16]
 2174 0044 9B6A     		ldr	r3, [r3, #40]
 2175              		.loc 1 1824 7
 2176 0046 002B     		cmp	r3, #0
 2177 0048 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2178              		.loc 1 1826 14
 2179 004a 0123     		movs	r3, #1
 2180 004c 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 75


 2181              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2182              		.loc 1 1843 10
 2183 004e 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2184              		.loc 1 1844 2
 2185 0050 1846     		mov	r0, r3
 2186 0052 1C37     		adds	r7, r7, #28
 2187              	.LCFI63:
 2188              		.cfi_def_cfa_offset 4
 2189 0054 BD46     		mov	sp, r7
 2190              	.LCFI64:
 2191              		.cfi_def_cfa_register 13
 2192              		@ sp needed
 2193 0056 5DF8047B 		ldr	r7, [sp], #4
 2194              	.LCFI65:
 2195              		.cfi_restore 7
 2196              		.cfi_def_cfa_offset 0
 2197 005a 7047     		bx	lr
 2198              	.L137:
 2199              		.align	2
 2200              	.L136:
 2201 005c 00000000 		.word	xSuspendedTaskList
 2202 0060 00000000 		.word	xPendingReadyList
 2203              		.cfi_endproc
 2204              	.LFE16:
 2206              		.section	.text.vTaskResume,"ax",%progbits
 2207              		.align	1
 2208              		.global	vTaskResume
 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2213              	vTaskResume:
 2214              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 76


1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2215              		.loc 1 1852 2
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 16
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 0000 80B5     		push	{r7, lr}
 2220              	.LCFI66:
 2221              		.cfi_def_cfa_offset 8
 2222              		.cfi_offset 7, -8
 2223              		.cfi_offset 14, -4
 2224 0002 84B0     		sub	sp, sp, #16
 2225              	.LCFI67:
 2226              		.cfi_def_cfa_offset 24
 2227 0004 00AF     		add	r7, sp, #0
 2228              	.LCFI68:
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2231              		.loc 1 1853 16
 2232 0008 7B68     		ldr	r3, [r7, #4]
 2233 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2234              		.loc 1 1856 3
 2235 000c 7B68     		ldr	r3, [r7, #4]
 2236 000e 002B     		cmp	r3, #0
 2237 0010 0BD1     		bne	.L139
 2238              	.LBB152:
 2239              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2240              		.loc 2 195 2
 2241              		.syntax unified
 2242              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2243 0012 4FF05003 			mov r3, #80												
 2244 0016 83F31188 		msr basepri, r3											
 2245 001a BFF36F8F 		isb														
 2246 001e BFF34F8F 		dsb														
 2247              	
 2248              	@ 0 "" 2
 2249              		.thumb
 2250              		.syntax unified
 2251 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2252              		.loc 2 203 1
 2253 0024 00BF     		nop
 2254              	.L140:
 2255              	.LBE153:
 2256              	.LBE152:
 2257              		.loc 1 1856 3
 2258 0026 00BF     		nop
 2259 0028 FDE7     		b	.L140
 2260              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 77


 2261              		.loc 1 1860 15
 2262 002a 214B     		ldr	r3, .L145
 2263 002c 1B68     		ldr	r3, [r3]
 2264              		.loc 1 1860 5
 2265 002e FA68     		ldr	r2, [r7, #12]
 2266 0030 9A42     		cmp	r2, r3
 2267 0032 38D0     		beq	.L144
 2268              		.loc 1 1860 33 discriminator 1
 2269 0034 FB68     		ldr	r3, [r7, #12]
 2270 0036 002B     		cmp	r3, #0
 2271 0038 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2272              		.loc 1 1862 4
 2273 003a FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2274              		.loc 1 1864 9
 2275 003e F868     		ldr	r0, [r7, #12]
 2276 0040 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2277 0044 0346     		mov	r3, r0
 2278              		.loc 1 1864 7 discriminator 1
 2279 0046 002B     		cmp	r3, #0
 2280 0048 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2281              		.loc 1 1870 15
 2282 004a FB68     		ldr	r3, [r7, #12]
 2283 004c 0433     		adds	r3, r3, #4
 2284 004e 1846     		mov	r0, r3
 2285 0050 FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2286              		.loc 1 1871 6
 2287 0054 FB68     		ldr	r3, [r7, #12]
 2288 0056 DA6A     		ldr	r2, [r3, #44]
 2289 0058 164B     		ldr	r3, .L145+4
 2290 005a 1B68     		ldr	r3, [r3]
 2291 005c 9A42     		cmp	r2, r3
 2292 005e 03D9     		bls	.L143
 2293              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2294 0060 FB68     		ldr	r3, [r7, #12]
 2295 0062 DB6A     		ldr	r3, [r3, #44]
 2296 0064 134A     		ldr	r2, .L145+4
 2297 0066 1360     		str	r3, [r2]
 2298              	.L143:
 2299              		.loc 1 1871 6 discriminator 3
 2300 0068 FB68     		ldr	r3, [r7, #12]
 2301 006a DA6A     		ldr	r2, [r3, #44]
 2302 006c 1346     		mov	r3, r2
 2303 006e 9B00     		lsls	r3, r3, #2
 2304 0070 1344     		add	r3, r3, r2
 2305 0072 9B00     		lsls	r3, r3, #2
 2306 0074 104A     		ldr	r2, .L145+8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 78


 2307 0076 1A44     		add	r2, r2, r3
 2308 0078 FB68     		ldr	r3, [r7, #12]
 2309 007a 0433     		adds	r3, r3, #4
 2310 007c 1946     		mov	r1, r3
 2311 007e 1046     		mov	r0, r2
 2312 0080 FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2313              		.loc 1 1874 15 is_stmt 1
 2314 0084 FB68     		ldr	r3, [r7, #12]
 2315 0086 DA6A     		ldr	r2, [r3, #44]
 2316              		.loc 1 1874 43
 2317 0088 094B     		ldr	r3, .L145
 2318 008a 1B68     		ldr	r3, [r3]
 2319 008c DB6A     		ldr	r3, [r3, #44]
 2320              		.loc 1 1874 8
 2321 008e 9A42     		cmp	r2, r3
 2322 0090 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2323              		.loc 1 1879 7
 2324 0092 0A4B     		ldr	r3, .L145+12
 2325 0094 4FF08052 		mov	r2, #268435456
 2326 0098 1A60     		str	r2, [r3]
 2327              		.syntax unified
 2328              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2329 009a BFF34F8F 		dsb
 2330              	@ 0 "" 2
 2331              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2332 009e BFF36F8F 		isb
 2333              	@ 0 "" 2
 2334              		.thumb
 2335              		.syntax unified
 2336              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2337              		.loc 1 1891 4
 2338 00a2 FFF7FEFF 		bl	vPortExitCritical
 2339              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 79


1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2340              		.loc 1 1897 2
 2341 00a6 00BF     		nop
 2342 00a8 1037     		adds	r7, r7, #16
 2343              	.LCFI69:
 2344              		.cfi_def_cfa_offset 8
 2345 00aa BD46     		mov	sp, r7
 2346              	.LCFI70:
 2347              		.cfi_def_cfa_register 13
 2348              		@ sp needed
 2349 00ac 80BD     		pop	{r7, pc}
 2350              	.L146:
 2351 00ae 00BF     		.align	2
 2352              	.L145:
 2353 00b0 00000000 		.word	pxCurrentTCB
 2354 00b4 00000000 		.word	uxTopReadyPriority
 2355 00b8 00000000 		.word	pxReadyTasksLists
 2356 00bc 04ED00E0 		.word	-536810236
 2357              		.cfi_endproc
 2358              	.LFE17:
 2360              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2361              		.align	1
 2362              		.global	xTaskResumeFromISR
 2363              		.syntax unified
 2364              		.thumb
 2365              		.thumb_func
 2367              	xTaskResumeFromISR:
 2368              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2369              		.loc 1 1906 2
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 40
 2372              		@ frame_needed = 1, uses_anonymous_args = 0
 2373 0000 80B5     		push	{r7, lr}
 2374              	.LCFI71:
 2375              		.cfi_def_cfa_offset 8
 2376              		.cfi_offset 7, -8
 2377              		.cfi_offset 14, -4
 2378 0002 8AB0     		sub	sp, sp, #40
 2379              	.LCFI72:
 2380              		.cfi_def_cfa_offset 48
 2381 0004 00AF     		add	r7, sp, #0
 2382              	.LCFI73:
 2383              		.cfi_def_cfa_register 7
 2384 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2385              		.loc 1 1907 13
 2386 0008 0023     		movs	r3, #0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 80


 2387 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2388              		.loc 1 1908 16
 2389 000c 7B68     		ldr	r3, [r7, #4]
 2390 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2391              		.loc 1 1911 3
 2392 0010 7B68     		ldr	r3, [r7, #4]
 2393 0012 002B     		cmp	r3, #0
 2394 0014 0BD1     		bne	.L148
 2395              	.LBB154:
 2396              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2397              		.loc 2 195 2
 2398              		.syntax unified
 2399              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2400 0016 4FF05003 			mov r3, #80												
 2401 001a 83F31188 		msr basepri, r3											
 2402 001e BFF36F8F 		isb														
 2403 0022 BFF34F8F 		dsb														
 2404              	
 2405              	@ 0 "" 2
 2406              		.thumb
 2407              		.syntax unified
 2408 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2409              		.loc 2 203 1
 2410 0028 00BF     		nop
 2411              	.L149:
 2412              	.LBE155:
 2413              	.LBE154:
 2414              		.loc 1 1911 3
 2415 002a 00BF     		nop
 2416 002c FDE7     		b	.L149
 2417              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2418              		.loc 1 1929 3
 2419 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 81


 2420              	.LBB156:
 2421              	.LBB157:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2422              		.loc 2 211 2
 2423              		.syntax unified
 2424              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2425 0032 EFF31182 			mrs r2, basepri											
 2426 0036 4FF05003 		mov r3, #80												
 2427 003a 83F31188 		msr basepri, r3											
 2428 003e BFF36F8F 		isb														
 2429 0042 BFF34F8F 		dsb														
 2430              	
 2431              	@ 0 "" 2
 2432              		.thumb
 2433              		.syntax unified
 2434 0046 7A61     		str	r2, [r7, #20]
 2435 0048 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2436              		.loc 2 223 9
 2437 004a 7B69     		ldr	r3, [r7, #20]
 2438              	.LBE157:
 2439              	.LBE156:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2440              		.loc 1 1931 28
 2441 004c FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2442              		.loc 1 1933 8
 2443 004e 386A     		ldr	r0, [r7, #32]
 2444 0050 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2445 0054 0346     		mov	r3, r0
 2446              		.loc 1 1933 6 discriminator 1
 2447 0056 002B     		cmp	r3, #0
 2448 0058 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2449              		.loc 1 1938 30
 2450 005a 1E4B     		ldr	r3, .L156
 2451 005c 1B68     		ldr	r3, [r3]
 2452              		.loc 1 1938 7
 2453 005e 002B     		cmp	r3, #0
 2454 0060 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2455              		.loc 1 1942 15
 2456 0062 3B6A     		ldr	r3, [r7, #32]
 2457 0064 DA6A     		ldr	r2, [r3, #44]
 2458              		.loc 1 1942 43
 2459 0066 1C4B     		ldr	r3, .L156+4
 2460 0068 1B68     		ldr	r3, [r3]
 2461 006a DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 82


 2462              		.loc 1 1942 8
 2463 006c 9A42     		cmp	r2, r3
 2464 006e 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2465              		.loc 1 1944 22
 2466 0070 0123     		movs	r3, #1
 2467 0072 7B62     		str	r3, [r7, #36]
 2468              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2469              		.loc 1 1951 15
 2470 0074 3B6A     		ldr	r3, [r7, #32]
 2471 0076 0433     		adds	r3, r3, #4
 2472 0078 1846     		mov	r0, r3
 2473 007a FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2474              		.loc 1 1952 6
 2475 007e 3B6A     		ldr	r3, [r7, #32]
 2476 0080 DA6A     		ldr	r2, [r3, #44]
 2477 0082 164B     		ldr	r3, .L156+8
 2478 0084 1B68     		ldr	r3, [r3]
 2479 0086 9A42     		cmp	r2, r3
 2480 0088 03D9     		bls	.L154
 2481              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2482 008a 3B6A     		ldr	r3, [r7, #32]
 2483 008c DB6A     		ldr	r3, [r3, #44]
 2484 008e 134A     		ldr	r2, .L156+8
 2485 0090 1360     		str	r3, [r2]
 2486              	.L154:
 2487              		.loc 1 1952 6 discriminator 3
 2488 0092 3B6A     		ldr	r3, [r7, #32]
 2489 0094 DA6A     		ldr	r2, [r3, #44]
 2490 0096 1346     		mov	r3, r2
 2491 0098 9B00     		lsls	r3, r3, #2
 2492 009a 1344     		add	r3, r3, r2
 2493 009c 9B00     		lsls	r3, r3, #2
 2494 009e 104A     		ldr	r2, .L156+12
 2495 00a0 1A44     		add	r2, r2, r3
 2496 00a2 3B6A     		ldr	r3, [r7, #32]
 2497 00a4 0433     		adds	r3, r3, #4
 2498 00a6 1946     		mov	r1, r3
 2499 00a8 1046     		mov	r0, r2
 2500 00aa FFF7FEFF 		bl	vListInsertEnd
 2501 00ae 05E0     		b	.L151
 2502              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 83


1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2503              		.loc 1 1959 6 is_stmt 1
 2504 00b0 3B6A     		ldr	r3, [r7, #32]
 2505 00b2 1833     		adds	r3, r3, #24
 2506 00b4 1946     		mov	r1, r3
 2507 00b6 0B48     		ldr	r0, .L156+16
 2508 00b8 FFF7FEFF 		bl	vListInsertEnd
 2509              	.L151:
 2510 00bc FB69     		ldr	r3, [r7, #28]
 2511 00be FB60     		str	r3, [r7, #12]
 2512              	.LBB158:
 2513              	.LBB159:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2514              		.loc 2 229 2
 2515 00c0 FB68     		ldr	r3, [r7, #12]
 2516              		.syntax unified
 2517              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2518 00c2 83F31188 			msr basepri, r3	
 2519              	@ 0 "" 2
 2520              		.loc 2 233 1
 2521              		.thumb
 2522              		.syntax unified
 2523 00c6 00BF     		nop
 2524              	.LBE159:
 2525              	.LBE158:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2526              		.loc 1 1969 10
 2527 00c8 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2528              		.loc 1 1970 2
 2529 00ca 1846     		mov	r0, r3
 2530 00cc 2837     		adds	r7, r7, #40
 2531              	.LCFI74:
 2532              		.cfi_def_cfa_offset 8
 2533 00ce BD46     		mov	sp, r7
 2534              	.LCFI75:
 2535              		.cfi_def_cfa_register 13
 2536              		@ sp needed
 2537 00d0 80BD     		pop	{r7, pc}
 2538              	.L157:
 2539 00d2 00BF     		.align	2
 2540              	.L156:
 2541 00d4 00000000 		.word	uxSchedulerSuspended
 2542 00d8 00000000 		.word	pxCurrentTCB
 2543 00dc 00000000 		.word	uxTopReadyPriority
 2544 00e0 00000000 		.word	pxReadyTasksLists
 2545 00e4 00000000 		.word	xPendingReadyList
 2546              		.cfi_endproc
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 84


 2547              	.LFE18:
 2549              		.section	.rodata
 2550              		.align	2
 2551              	.LC0:
 2552 0000 49444C45 		.ascii	"IDLE\000"
 2552      00
 2553              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2554              		.align	1
 2555              		.global	vTaskStartScheduler
 2556              		.syntax unified
 2557              		.thumb
 2558              		.thumb_func
 2560              	vTaskStartScheduler:
 2561              	.LFB19:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2562              		.loc 1 1976 1
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 24
 2565              		@ frame_needed = 1, uses_anonymous_args = 0
 2566 0000 80B5     		push	{r7, lr}
 2567              	.LCFI76:
 2568              		.cfi_def_cfa_offset 8
 2569              		.cfi_offset 7, -8
 2570              		.cfi_offset 14, -4
 2571 0002 8AB0     		sub	sp, sp, #40
 2572              	.LCFI77:
 2573              		.cfi_def_cfa_offset 48
 2574 0004 04AF     		add	r7, sp, #16
 2575              	.LCFI78:
 2576              		.cfi_def_cfa 7, 32
 2577              	.LBB160:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2578              		.loc 1 1982 17
 2579 0006 0023     		movs	r3, #0
 2580 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2581              		.loc 1 1983 16
 2582 000a 0023     		movs	r3, #0
 2583 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2584              		.loc 1 1988 3
 2585 000e 3A46     		mov	r2, r7
 2586 0010 391D     		adds	r1, r7, #4
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 85


 2587 0012 07F10803 		add	r3, r7, #8
 2588 0016 1846     		mov	r0, r3
 2589 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2590              		.loc 1 1989 21
 2591 001c 3968     		ldr	r1, [r7]
 2592 001e 7B68     		ldr	r3, [r7, #4]
 2593 0020 BA68     		ldr	r2, [r7, #8]
 2594 0022 0292     		str	r2, [sp, #8]
 2595 0024 0193     		str	r3, [sp, #4]
 2596 0026 0023     		movs	r3, #0
 2597 0028 0093     		str	r3, [sp]
 2598 002a 0023     		movs	r3, #0
 2599 002c 0A46     		mov	r2, r1
 2600 002e 2249     		ldr	r1, .L166
 2601 0030 2248     		ldr	r0, .L166+4
 2602 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2603 0036 0346     		mov	r3, r0
 2604              		.loc 1 1989 19 discriminator 1
 2605 0038 214A     		ldr	r2, .L166+8
 2606 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2607              		.loc 1 1997 23
 2608 003c 204B     		ldr	r3, .L166+8
 2609 003e 1B68     		ldr	r3, [r3]
 2610              		.loc 1 1997 5
 2611 0040 002B     		cmp	r3, #0
 2612 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2613              		.loc 1 1999 12
 2614 0044 0123     		movs	r3, #1
 2615 0046 7B61     		str	r3, [r7, #20]
 2616 0048 01E0     		b	.L160
 2617              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2618              		.loc 1 2003 12
 2619 004a 0023     		movs	r3, #0
 2620 004c 7B61     		str	r3, [r7, #20]
 2621              	.L160:
 2622              	.LBE160:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 86


2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2623              		.loc 1 2020 5
 2624 004e 7B69     		ldr	r3, [r7, #20]
 2625 0050 012B     		cmp	r3, #1
 2626 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2627              		.loc 1 2022 14
 2628 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2629 0058 7861     		str	r0, [r7, #20]
 2630              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2631              		.loc 1 2031 4
 2632 005a 7B69     		ldr	r3, [r7, #20]
 2633 005c 012B     		cmp	r3, #1
 2634 005e 16D1     		bne	.L162
 2635              	.LBB161:
 2636              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2637              		.loc 2 195 2
 2638              		.syntax unified
 2639              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2640 0060 4FF05003 			mov r3, #80												
 2641 0064 83F31188 		msr basepri, r3											
 2642 0068 BFF36F8F 		isb														
 2643 006c BFF34F8F 		dsb														
 2644              	
 2645              	@ 0 "" 2
 2646              		.thumb
 2647              		.syntax unified
 2648 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2649              		.loc 2 203 1
 2650 0072 00BF     		nop
 2651              	.LBE162:
 2652              	.LBE161:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 87


2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2653              		.loc 1 2059 24
 2654 0074 134B     		ldr	r3, .L166+12
 2655 0076 4FF0FF32 		mov	r2, #-1
 2656 007a 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2657              		.loc 1 2060 21
 2658 007c 124B     		ldr	r3, .L166+16
 2659 007e 0122     		movs	r2, #1
 2660 0080 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2661              		.loc 1 2061 14
 2662 0082 124B     		ldr	r3, .L166+20
 2663 0084 0022     		movs	r2, #0
 2664 0086 1A60     		str	r2, [r3]
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2665              		.loc 1 2075 7
 2666 0088 FFF7FEFF 		bl	xPortStartScheduler
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 88


2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2667              		.loc 1 2096 1
 2668 008c 0FE0     		b	.L165
 2669              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2670              		.loc 1 2090 3
 2671 008e 7B69     		ldr	r3, [r7, #20]
 2672 0090 B3F1FF3F 		cmp	r3, #-1
 2673 0094 0BD1     		bne	.L165
 2674              	.LBB163:
 2675              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2676              		.loc 2 195 2
 2677              		.syntax unified
 2678              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2679 0096 4FF05003 			mov r3, #80												
 2680 009a 83F31188 		msr basepri, r3											
 2681 009e BFF36F8F 		isb														
 2682 00a2 BFF34F8F 		dsb														
 2683              	
 2684              	@ 0 "" 2
 2685              		.thumb
 2686              		.syntax unified
 2687 00a6 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2688              		.loc 2 203 1
 2689 00a8 00BF     		nop
 2690              	.L164:
 2691              	.LBE164:
 2692              	.LBE163:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2693              		.loc 1 2090 3
 2694 00aa 00BF     		nop
 2695 00ac FDE7     		b	.L164
 2696              	.L165:
 2697              		.loc 1 2096 1
 2698 00ae 00BF     		nop
 2699 00b0 1837     		adds	r7, r7, #24
 2700              	.LCFI79:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 89


 2701              		.cfi_def_cfa_offset 8
 2702 00b2 BD46     		mov	sp, r7
 2703              	.LCFI80:
 2704              		.cfi_def_cfa_register 13
 2705              		@ sp needed
 2706 00b4 80BD     		pop	{r7, pc}
 2707              	.L167:
 2708 00b6 00BF     		.align	2
 2709              	.L166:
 2710 00b8 00000000 		.word	.LC0
 2711 00bc 00000000 		.word	prvIdleTask
 2712 00c0 00000000 		.word	xIdleTaskHandle
 2713 00c4 00000000 		.word	xNextTaskUnblockTime
 2714 00c8 00000000 		.word	xSchedulerRunning
 2715 00cc 00000000 		.word	xTickCount
 2716              		.cfi_endproc
 2717              	.LFE19:
 2719              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2720              		.align	1
 2721              		.global	vTaskEndScheduler
 2722              		.syntax unified
 2723              		.thumb
 2724              		.thumb_func
 2726              	vTaskEndScheduler:
 2727              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2728              		.loc 1 2100 1
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 8
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732 0000 80B5     		push	{r7, lr}
 2733              	.LCFI81:
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 7, -8
 2736              		.cfi_offset 14, -4
 2737 0002 82B0     		sub	sp, sp, #8
 2738              	.LCFI82:
 2739              		.cfi_def_cfa_offset 16
 2740 0004 00AF     		add	r7, sp, #0
 2741              	.LCFI83:
 2742              		.cfi_def_cfa_register 7
 2743              	.LBB165:
 2744              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2745              		.loc 2 195 2
 2746              		.syntax unified
 2747              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2748 0006 4FF05003 			mov r3, #80												
 2749 000a 83F31188 		msr basepri, r3											
 2750 000e BFF36F8F 		isb														
 2751 0012 BFF34F8F 		dsb														
 2752              	
 2753              	@ 0 "" 2
 2754              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 90


 2755              		.syntax unified
 2756 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2757              		.loc 2 203 1
 2758 0018 00BF     		nop
 2759              	.LBE166:
 2760              	.LBE165:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2761              		.loc 1 2105 20
 2762 001a 044B     		ldr	r3, .L169
 2763 001c 0022     		movs	r2, #0
 2764 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2765              		.loc 1 2106 2
 2766 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2767              		.loc 1 2107 1
 2768 0024 00BF     		nop
 2769 0026 0837     		adds	r7, r7, #8
 2770              	.LCFI84:
 2771              		.cfi_def_cfa_offset 8
 2772 0028 BD46     		mov	sp, r7
 2773              	.LCFI85:
 2774              		.cfi_def_cfa_register 13
 2775              		@ sp needed
 2776 002a 80BD     		pop	{r7, pc}
 2777              	.L170:
 2778              		.align	2
 2779              	.L169:
 2780 002c 00000000 		.word	xSchedulerRunning
 2781              		.cfi_endproc
 2782              	.LFE20:
 2784              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2785              		.align	1
 2786              		.global	vTaskSuspendAll
 2787              		.syntax unified
 2788              		.thumb
 2789              		.thumb_func
 2791              	vTaskSuspendAll:
 2792              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2793              		.loc 1 2111 1
 2794              		.cfi_startproc
 2795              		@ args = 0, pretend = 0, frame = 0
 2796              		@ frame_needed = 1, uses_anonymous_args = 0
 2797              		@ link register save eliminated.
 2798 0000 80B4     		push	{r7}
 2799              	.LCFI86:
 2800              		.cfi_def_cfa_offset 4
 2801              		.cfi_offset 7, -4
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 91


 2802 0002 00AF     		add	r7, sp, #0
 2803              	.LCFI87:
 2804              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2805              		.loc 1 2123 2
 2806 0004 044B     		ldr	r3, .L172
 2807 0006 1B68     		ldr	r3, [r3]
 2808 0008 0133     		adds	r3, r3, #1
 2809 000a 034A     		ldr	r2, .L172
 2810 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2811              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2812              		.loc 1 2128 1
 2813 000e 00BF     		nop
 2814 0010 BD46     		mov	sp, r7
 2815              	.LCFI88:
 2816              		.cfi_def_cfa_register 13
 2817              		@ sp needed
 2818 0012 5DF8047B 		ldr	r7, [sp], #4
 2819              	.LCFI89:
 2820              		.cfi_restore 7
 2821              		.cfi_def_cfa_offset 0
 2822 0016 7047     		bx	lr
 2823              	.L173:
 2824              		.align	2
 2825              	.L172:
 2826 0018 00000000 		.word	uxSchedulerSuspended
 2827              		.cfi_endproc
 2828              	.LFE21:
 2830              		.section	.text.xTaskResumeAll,"ax",%progbits
 2831              		.align	1
 2832              		.global	xTaskResumeAll
 2833              		.syntax unified
 2834              		.thumb
 2835              		.thumb_func
 2837              	xTaskResumeAll:
 2838              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 92


2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 93


2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2839              		.loc 1 2195 1
 2840              		.cfi_startproc
 2841              		@ args = 0, pretend = 0, frame = 16
 2842              		@ frame_needed = 1, uses_anonymous_args = 0
 2843 0000 80B5     		push	{r7, lr}
 2844              	.LCFI90:
 2845              		.cfi_def_cfa_offset 8
 2846              		.cfi_offset 7, -8
 2847              		.cfi_offset 14, -4
 2848 0002 84B0     		sub	sp, sp, #16
 2849              	.LCFI91:
 2850              		.cfi_def_cfa_offset 24
 2851 0004 00AF     		add	r7, sp, #0
 2852              	.LCFI92:
 2853              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2854              		.loc 1 2196 8
 2855 0006 0023     		movs	r3, #0
 2856 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2857              		.loc 1 2197 12
 2858 000a 0023     		movs	r3, #0
 2859 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2860              		.loc 1 2201 2
 2861 000e 424B     		ldr	r3, .L187
 2862 0010 1B68     		ldr	r3, [r3]
 2863 0012 002B     		cmp	r3, #0
 2864 0014 0BD1     		bne	.L175
 2865              	.LBB167:
 2866              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2867              		.loc 2 195 2
 2868              		.syntax unified
 2869              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2870 0016 4FF05003 			mov r3, #80												
 2871 001a 83F31188 		msr basepri, r3											
 2872 001e BFF36F8F 		isb														
 2873 0022 BFF34F8F 		dsb														
 2874              	
 2875              	@ 0 "" 2
 2876              		.thumb
 2877              		.syntax unified
 2878 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2879              		.loc 2 203 1
 2880 0028 00BF     		nop
 2881              	.L176:
 2882              	.LBE168:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 94


 2883              	.LBE167:
 2884              		.loc 1 2201 2
 2885 002a 00BF     		nop
 2886 002c FDE7     		b	.L176
 2887              	.L175:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2888              		.loc 1 2208 2
 2889 002e FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2890              		.loc 1 2210 3
 2891 0032 394B     		ldr	r3, .L187
 2892 0034 1B68     		ldr	r3, [r3]
 2893 0036 013B     		subs	r3, r3, #1
 2894 0038 374A     		ldr	r2, .L187
 2895 003a 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2896              		.loc 1 2212 28
 2897 003c 364B     		ldr	r3, .L187
 2898 003e 1B68     		ldr	r3, [r3]
 2899              		.loc 1 2212 5
 2900 0040 002B     		cmp	r3, #0
 2901 0042 62D1     		bne	.L177
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2902              		.loc 1 2214 31
 2903 0044 354B     		ldr	r3, .L187+4
 2904 0046 1B68     		ldr	r3, [r3]
 2905              		.loc 1 2214 6
 2906 0048 002B     		cmp	r3, #0
 2907 004a 5ED0     		beq	.L177
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2908              		.loc 1 2218 10
 2909 004c 2FE0     		b	.L178
 2910              	.L181:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2911              		.loc 1 2220 14
 2912 004e 344B     		ldr	r3, .L187+8
 2913 0050 DB68     		ldr	r3, [r3, #12]
 2914              		.loc 1 2220 12
 2915 0052 DB68     		ldr	r3, [r3, #12]
 2916 0054 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2917              		.loc 1 2221 15
 2918 0056 FB68     		ldr	r3, [r7, #12]
 2919 0058 1833     		adds	r3, r3, #24
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 95


 2920 005a 1846     		mov	r0, r3
 2921 005c FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2922              		.loc 1 2222 15
 2923 0060 FB68     		ldr	r3, [r7, #12]
 2924 0062 0433     		adds	r3, r3, #4
 2925 0064 1846     		mov	r0, r3
 2926 0066 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2927              		.loc 1 2223 6
 2928 006a FB68     		ldr	r3, [r7, #12]
 2929 006c DA6A     		ldr	r2, [r3, #44]
 2930 006e 2D4B     		ldr	r3, .L187+12
 2931 0070 1B68     		ldr	r3, [r3]
 2932 0072 9A42     		cmp	r2, r3
 2933 0074 03D9     		bls	.L179
 2934              		.loc 1 2223 6 is_stmt 0 discriminator 1
 2935 0076 FB68     		ldr	r3, [r7, #12]
 2936 0078 DB6A     		ldr	r3, [r3, #44]
 2937 007a 2A4A     		ldr	r2, .L187+12
 2938 007c 1360     		str	r3, [r2]
 2939              	.L179:
 2940              		.loc 1 2223 6 discriminator 3
 2941 007e FB68     		ldr	r3, [r7, #12]
 2942 0080 DA6A     		ldr	r2, [r3, #44]
 2943 0082 1346     		mov	r3, r2
 2944 0084 9B00     		lsls	r3, r3, #2
 2945 0086 1344     		add	r3, r3, r2
 2946 0088 9B00     		lsls	r3, r3, #2
 2947 008a 274A     		ldr	r2, .L187+16
 2948 008c 1A44     		add	r2, r2, r3
 2949 008e FB68     		ldr	r3, [r7, #12]
 2950 0090 0433     		adds	r3, r3, #4
 2951 0092 1946     		mov	r1, r3
 2952 0094 1046     		mov	r0, r2
 2953 0096 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2954              		.loc 1 2227 15 is_stmt 1
 2955 009a FB68     		ldr	r3, [r7, #12]
 2956 009c DA6A     		ldr	r2, [r3, #44]
 2957              		.loc 1 2227 43
 2958 009e 234B     		ldr	r3, .L187+20
 2959 00a0 1B68     		ldr	r3, [r3]
 2960 00a2 DB6A     		ldr	r3, [r3, #44]
 2961              		.loc 1 2227 8
 2962 00a4 9A42     		cmp	r2, r3
 2963 00a6 02D3     		bcc	.L178
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2964              		.loc 1 2229 21
 2965 00a8 214B     		ldr	r3, .L187+24
 2966 00aa 0122     		movs	r2, #1
 2967 00ac 1A60     		str	r2, [r3]
 2968              	.L178:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 96


2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2969              		.loc 1 2218 12
 2970 00ae 1C4B     		ldr	r3, .L187+8
 2971 00b0 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2972              		.loc 1 2218 52
 2973 00b2 002B     		cmp	r3, #0
 2974 00b4 CBD1     		bne	.L181
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2975              		.loc 1 2237 7
 2976 00b6 FB68     		ldr	r3, [r7, #12]
 2977 00b8 002B     		cmp	r3, #0
 2978 00ba 01D0     		beq	.L182
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2979              		.loc 1 2245 6
 2980 00bc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2981              	.L182:
 2982              	.LBB169:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 2983              		.loc 1 2253 17
 2984 00c0 1C4B     		ldr	r3, .L187+28
 2985 00c2 1B68     		ldr	r3, [r3]
 2986 00c4 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 2987              		.loc 1 2255 8
 2988 00c6 7B68     		ldr	r3, [r7, #4]
 2989 00c8 002B     		cmp	r3, #0
 2990 00ca 10D0     		beq	.L183
 2991              	.L185:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2992              		.loc 1 2259 12
 2993 00cc FFF7FEFF 		bl	xTaskIncrementTick
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 97


 2994 00d0 0346     		mov	r3, r0
 2995              		.loc 1 2259 10 discriminator 1
 2996 00d2 002B     		cmp	r3, #0
 2997 00d4 02D0     		beq	.L184
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2998              		.loc 1 2261 23
 2999 00d6 164B     		ldr	r3, .L187+24
 3000 00d8 0122     		movs	r2, #1
 3001 00da 1A60     		str	r2, [r3]
 3002              	.L184:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 3003              		.loc 1 2267 8
 3004 00dc 7B68     		ldr	r3, [r7, #4]
 3005 00de 013B     		subs	r3, r3, #1
 3006 00e0 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3007              		.loc 1 2268 30
 3008 00e2 7B68     		ldr	r3, [r7, #4]
 3009 00e4 002B     		cmp	r3, #0
 3010 00e6 F1D1     		bne	.L185
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 3011              		.loc 1 2270 20
 3012 00e8 124B     		ldr	r3, .L187+28
 3013 00ea 0022     		movs	r2, #0
 3014 00ec 1A60     		str	r2, [r3]
 3015              	.L183:
 3016              	.LBE169:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3017              		.loc 1 2278 23
 3018 00ee 104B     		ldr	r3, .L187+24
 3019 00f0 1B68     		ldr	r3, [r3]
 3020              		.loc 1 2278 7
 3021 00f2 002B     		cmp	r3, #0
 3022 00f4 09D0     		beq	.L177
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3023              		.loc 1 2282 23
 3024 00f6 0123     		movs	r3, #1
 3025 00f8 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 98


2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3026              		.loc 1 2285 6
 3027 00fa 0F4B     		ldr	r3, .L187+32
 3028 00fc 4FF08052 		mov	r2, #268435456
 3029 0100 1A60     		str	r2, [r3]
 3030              		.syntax unified
 3031              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3032 0102 BFF34F8F 		dsb
 3033              	@ 0 "" 2
 3034              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3035 0106 BFF36F8F 		isb
 3036              	@ 0 "" 2
 3037              		.thumb
 3038              		.syntax unified
 3039              	.L177:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3040              		.loc 1 2298 2
 3041 010a FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3042              		.loc 1 2300 9
 3043 010e BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3044              		.loc 1 2301 1
 3045 0110 1846     		mov	r0, r3
 3046 0112 1037     		adds	r7, r7, #16
 3047              	.LCFI93:
 3048              		.cfi_def_cfa_offset 8
 3049 0114 BD46     		mov	sp, r7
 3050              	.LCFI94:
 3051              		.cfi_def_cfa_register 13
 3052              		@ sp needed
 3053 0116 80BD     		pop	{r7, pc}
 3054              	.L188:
 3055              		.align	2
 3056              	.L187:
 3057 0118 00000000 		.word	uxSchedulerSuspended
 3058 011c 00000000 		.word	uxCurrentNumberOfTasks
 3059 0120 00000000 		.word	xPendingReadyList
 3060 0124 00000000 		.word	uxTopReadyPriority
 3061 0128 00000000 		.word	pxReadyTasksLists
 3062 012c 00000000 		.word	pxCurrentTCB
 3063 0130 00000000 		.word	xYieldPending
 3064 0134 00000000 		.word	xPendedTicks
 3065 0138 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 99


 3066              		.cfi_endproc
 3067              	.LFE22:
 3069              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3070              		.align	1
 3071              		.global	xTaskGetTickCount
 3072              		.syntax unified
 3073              		.thumb
 3074              		.thumb_func
 3076              	xTaskGetTickCount:
 3077              	.LFB23:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3078              		.loc 1 2305 1
 3079              		.cfi_startproc
 3080              		@ args = 0, pretend = 0, frame = 8
 3081              		@ frame_needed = 1, uses_anonymous_args = 0
 3082              		@ link register save eliminated.
 3083 0000 80B4     		push	{r7}
 3084              	.LCFI95:
 3085              		.cfi_def_cfa_offset 4
 3086              		.cfi_offset 7, -4
 3087 0002 83B0     		sub	sp, sp, #12
 3088              	.LCFI96:
 3089              		.cfi_def_cfa_offset 16
 3090 0004 00AF     		add	r7, sp, #0
 3091              	.LCFI97:
 3092              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3093              		.loc 1 2311 10
 3094 0006 054B     		ldr	r3, .L191
 3095 0008 1B68     		ldr	r3, [r3]
 3096 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3097              		.loc 1 2315 9
 3098 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3099              		.loc 1 2316 1
 3100 000e 1846     		mov	r0, r3
 3101 0010 0C37     		adds	r7, r7, #12
 3102              	.LCFI98:
 3103              		.cfi_def_cfa_offset 4
 3104 0012 BD46     		mov	sp, r7
 3105              	.LCFI99:
 3106              		.cfi_def_cfa_register 13
 3107              		@ sp needed
 3108 0014 5DF8047B 		ldr	r7, [sp], #4
 3109              	.LCFI100:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 100


 3110              		.cfi_restore 7
 3111              		.cfi_def_cfa_offset 0
 3112 0018 7047     		bx	lr
 3113              	.L192:
 3114 001a 00BF     		.align	2
 3115              	.L191:
 3116 001c 00000000 		.word	xTickCount
 3117              		.cfi_endproc
 3118              	.LFE23:
 3120              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3121              		.align	1
 3122              		.global	xTaskGetTickCountFromISR
 3123              		.syntax unified
 3124              		.thumb
 3125              		.thumb_func
 3127              	xTaskGetTickCountFromISR:
 3128              	.LFB24:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3129              		.loc 1 2320 1
 3130              		.cfi_startproc
 3131              		@ args = 0, pretend = 0, frame = 8
 3132              		@ frame_needed = 1, uses_anonymous_args = 0
 3133 0000 80B5     		push	{r7, lr}
 3134              	.LCFI101:
 3135              		.cfi_def_cfa_offset 8
 3136              		.cfi_offset 7, -8
 3137              		.cfi_offset 14, -4
 3138 0002 82B0     		sub	sp, sp, #8
 3139              	.LCFI102:
 3140              		.cfi_def_cfa_offset 16
 3141 0004 00AF     		add	r7, sp, #0
 3142              	.LCFI103:
 3143              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3144              		.loc 1 2338 2
 3145 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 101


2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3146              		.loc 1 2340 25
 3147 000a 0023     		movs	r3, #0
 3148 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3149              		.loc 1 2342 11
 3150 000e 044B     		ldr	r3, .L195
 3151 0010 1B68     		ldr	r3, [r3]
 3152 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3153              		.loc 1 2346 9
 3154 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3155              		.loc 1 2347 1
 3156 0016 1846     		mov	r0, r3
 3157 0018 0837     		adds	r7, r7, #8
 3158              	.LCFI104:
 3159              		.cfi_def_cfa_offset 8
 3160 001a BD46     		mov	sp, r7
 3161              	.LCFI105:
 3162              		.cfi_def_cfa_register 13
 3163              		@ sp needed
 3164 001c 80BD     		pop	{r7, pc}
 3165              	.L196:
 3166 001e 00BF     		.align	2
 3167              	.L195:
 3168 0020 00000000 		.word	xTickCount
 3169              		.cfi_endproc
 3170              	.LFE24:
 3172              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3173              		.align	1
 3174              		.global	uxTaskGetNumberOfTasks
 3175              		.syntax unified
 3176              		.thumb
 3177              		.thumb_func
 3179              	uxTaskGetNumberOfTasks:
 3180              	.LFB25:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3181              		.loc 1 2351 1
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 1, uses_anonymous_args = 0
 3185              		@ link register save eliminated.
 3186 0000 80B4     		push	{r7}
 3187              	.LCFI106:
 3188              		.cfi_def_cfa_offset 4
 3189              		.cfi_offset 7, -4
 3190 0002 00AF     		add	r7, sp, #0
 3191              	.LCFI107:
 3192              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 102


2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3193              		.loc 1 2354 9
 3194 0004 034B     		ldr	r3, .L199
 3195 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3196              		.loc 1 2355 1
 3197 0008 1846     		mov	r0, r3
 3198 000a BD46     		mov	sp, r7
 3199              	.LCFI108:
 3200              		.cfi_def_cfa_register 13
 3201              		@ sp needed
 3202 000c 5DF8047B 		ldr	r7, [sp], #4
 3203              	.LCFI109:
 3204              		.cfi_restore 7
 3205              		.cfi_def_cfa_offset 0
 3206 0010 7047     		bx	lr
 3207              	.L200:
 3208 0012 00BF     		.align	2
 3209              	.L199:
 3210 0014 00000000 		.word	uxCurrentNumberOfTasks
 3211              		.cfi_endproc
 3212              	.LFE25:
 3214              		.section	.text.pcTaskGetName,"ax",%progbits
 3215              		.align	1
 3216              		.global	pcTaskGetName
 3217              		.syntax unified
 3218              		.thumb
 3219              		.thumb_func
 3221              	pcTaskGetName:
 3222              	.LFB26:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3223              		.loc 1 2359 1
 3224              		.cfi_startproc
 3225              		@ args = 0, pretend = 0, frame = 16
 3226              		@ frame_needed = 1, uses_anonymous_args = 0
 3227              		@ link register save eliminated.
 3228 0000 80B4     		push	{r7}
 3229              	.LCFI110:
 3230              		.cfi_def_cfa_offset 4
 3231              		.cfi_offset 7, -4
 3232 0002 85B0     		sub	sp, sp, #20
 3233              	.LCFI111:
 3234              		.cfi_def_cfa_offset 24
 3235 0004 00AF     		add	r7, sp, #0
 3236              	.LCFI112:
 3237              		.cfi_def_cfa_register 7
 3238 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 103


 3239              		.loc 1 2364 10
 3240 0008 7B68     		ldr	r3, [r7, #4]
 3241 000a 002B     		cmp	r3, #0
 3242 000c 02D1     		bne	.L202
 3243              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3244 000e 0E4B     		ldr	r3, .L207
 3245 0010 1B68     		ldr	r3, [r3]
 3246 0012 00E0     		b	.L203
 3247              	.L202:
 3248              		.loc 1 2364 10 discriminator 2
 3249 0014 7B68     		ldr	r3, [r7, #4]
 3250              	.L203:
 3251              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3252 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3253              		.loc 1 2365 2
 3254 0018 FB68     		ldr	r3, [r7, #12]
 3255 001a 002B     		cmp	r3, #0
 3256 001c 0BD1     		bne	.L204
 3257              	.LBB170:
 3258              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3259              		.loc 2 195 2
 3260              		.syntax unified
 3261              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3262 001e 4FF05003 			mov r3, #80												
 3263 0022 83F31188 		msr basepri, r3											
 3264 0026 BFF36F8F 		isb														
 3265 002a BFF34F8F 		dsb														
 3266              	
 3267              	@ 0 "" 2
 3268              		.thumb
 3269              		.syntax unified
 3270 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3271              		.loc 2 203 1
 3272 0030 00BF     		nop
 3273              	.L205:
 3274              	.LBE171:
 3275              	.LBE170:
 3276              		.loc 1 2365 2
 3277 0032 00BF     		nop
 3278 0034 FDE7     		b	.L205
 3279              	.L204:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3280              		.loc 1 2366 9
 3281 0036 FB68     		ldr	r3, [r7, #12]
 3282 0038 3433     		adds	r3, r3, #52
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3283              		.loc 1 2367 1
 3284 003a 1846     		mov	r0, r3
 3285 003c 1437     		adds	r7, r7, #20
 3286              	.LCFI113:
 3287              		.cfi_def_cfa_offset 4
 3288 003e BD46     		mov	sp, r7
 3289              	.LCFI114:
 3290              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 104


 3291              		@ sp needed
 3292 0040 5DF8047B 		ldr	r7, [sp], #4
 3293              	.LCFI115:
 3294              		.cfi_restore 7
 3295              		.cfi_def_cfa_offset 0
 3296 0044 7047     		bx	lr
 3297              	.L208:
 3298 0046 00BF     		.align	2
 3299              	.L207:
 3300 0048 00000000 		.word	pxCurrentTCB
 3301              		.cfi_endproc
 3302              	.LFE26:
 3304              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3305              		.align	1
 3306              		.global	uxTaskGetSystemState
 3307              		.syntax unified
 3308              		.thumb
 3309              		.thumb_func
 3311              	uxTaskGetSystemState:
 3312              	.LFB27:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 105


2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 106


2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3313              		.loc 1 2506 2
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 24
 3316              		@ frame_needed = 1, uses_anonymous_args = 0
 3317 0000 80B5     		push	{r7, lr}
 3318              	.LCFI116:
 3319              		.cfi_def_cfa_offset 8
 3320              		.cfi_offset 7, -8
 3321              		.cfi_offset 14, -4
 3322 0002 86B0     		sub	sp, sp, #24
 3323              	.LCFI117:
 3324              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 107


 3325 0004 00AF     		add	r7, sp, #0
 3326              	.LCFI118:
 3327              		.cfi_def_cfa_register 7
 3328 0006 F860     		str	r0, [r7, #12]
 3329 0008 B960     		str	r1, [r7, #8]
 3330 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3331              		.loc 1 2507 14
 3332 000c 0023     		movs	r3, #0
 3333 000e 7B61     		str	r3, [r7, #20]
 3334              		.loc 1 2507 26
 3335 0010 3823     		movs	r3, #56
 3336 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3337              		.loc 1 2509 3
 3338 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3339              		.loc 1 2512 20
 3340 0018 3A4B     		ldr	r3, .L213
 3341 001a 1B68     		ldr	r3, [r3]
 3342              		.loc 1 2512 6
 3343 001c BA68     		ldr	r2, [r7, #8]
 3344 001e 9A42     		cmp	r2, r3
 3345 0020 68D3     		bcc	.L210
 3346              	.L211:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3347              		.loc 1 2518 13
 3348 0022 3B69     		ldr	r3, [r7, #16]
 3349 0024 013B     		subs	r3, r3, #1
 3350 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3351              		.loc 1 2519 66
 3352 0028 7A69     		ldr	r2, [r7, #20]
 3353 002a 1346     		mov	r3, r2
 3354 002c DB00     		lsls	r3, r3, #3
 3355 002e 1344     		add	r3, r3, r2
 3356 0030 9B00     		lsls	r3, r3, #2
 3357 0032 1A46     		mov	r2, r3
 3358              		.loc 1 2519 46
 3359 0034 FB68     		ldr	r3, [r7, #12]
 3360 0036 9818     		adds	r0, r3, r2
 3361              		.loc 1 2519 16
 3362 0038 3A69     		ldr	r2, [r7, #16]
 3363 003a 1346     		mov	r3, r2
 3364 003c 9B00     		lsls	r3, r3, #2
 3365 003e 1344     		add	r3, r3, r2
 3366 0040 9B00     		lsls	r3, r3, #2
 3367 0042 314A     		ldr	r2, .L213+4
 3368 0044 1344     		add	r3, r3, r2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 108


 3369 0046 0122     		movs	r2, #1
 3370 0048 1946     		mov	r1, r3
 3371 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3372 004e 0246     		mov	r2, r0
 3373              		.loc 1 2519 13 discriminator 1
 3374 0050 7B69     		ldr	r3, [r7, #20]
 3375 0052 1344     		add	r3, r3, r2
 3376 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3377              		.loc 1 2521 22 discriminator 1
 3378 0056 3B69     		ldr	r3, [r7, #16]
 3379 0058 002B     		cmp	r3, #0
 3380 005a E2D1     		bne	.L211
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3381              		.loc 1 2525 65
 3382 005c 7A69     		ldr	r2, [r7, #20]
 3383 005e 1346     		mov	r3, r2
 3384 0060 DB00     		lsls	r3, r3, #3
 3385 0062 1344     		add	r3, r3, r2
 3386 0064 9B00     		lsls	r3, r3, #2
 3387 0066 1A46     		mov	r2, r3
 3388              		.loc 1 2525 45
 3389 0068 FB68     		ldr	r3, [r7, #12]
 3390 006a 1344     		add	r3, r3, r2
 3391              		.loc 1 2525 15
 3392 006c 274A     		ldr	r2, .L213+8
 3393 006e 1168     		ldr	r1, [r2]
 3394 0070 0222     		movs	r2, #2
 3395 0072 1846     		mov	r0, r3
 3396 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3397 0078 0246     		mov	r2, r0
 3398              		.loc 1 2525 12 discriminator 1
 3399 007a 7B69     		ldr	r3, [r7, #20]
 3400 007c 1344     		add	r3, r3, r2
 3401 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3402              		.loc 1 2526 65
 3403 0080 7A69     		ldr	r2, [r7, #20]
 3404 0082 1346     		mov	r3, r2
 3405 0084 DB00     		lsls	r3, r3, #3
 3406 0086 1344     		add	r3, r3, r2
 3407 0088 9B00     		lsls	r3, r3, #2
 3408 008a 1A46     		mov	r2, r3
 3409              		.loc 1 2526 45
 3410 008c FB68     		ldr	r3, [r7, #12]
 3411 008e 1344     		add	r3, r3, r2
 3412              		.loc 1 2526 15
 3413 0090 1F4A     		ldr	r2, .L213+12
 3414 0092 1168     		ldr	r1, [r2]
 3415 0094 0222     		movs	r2, #2
 3416 0096 1846     		mov	r0, r3
 3417 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3418 009c 0246     		mov	r2, r0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 109


 3419              		.loc 1 2526 12 discriminator 1
 3420 009e 7B69     		ldr	r3, [r7, #20]
 3421 00a0 1344     		add	r3, r3, r2
 3422 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3423              		.loc 1 2532 66
 3424 00a4 7A69     		ldr	r2, [r7, #20]
 3425 00a6 1346     		mov	r3, r2
 3426 00a8 DB00     		lsls	r3, r3, #3
 3427 00aa 1344     		add	r3, r3, r2
 3428 00ac 9B00     		lsls	r3, r3, #2
 3429 00ae 1A46     		mov	r2, r3
 3430              		.loc 1 2532 46
 3431 00b0 FB68     		ldr	r3, [r7, #12]
 3432 00b2 1344     		add	r3, r3, r2
 3433              		.loc 1 2532 16
 3434 00b4 0422     		movs	r2, #4
 3435 00b6 1749     		ldr	r1, .L213+16
 3436 00b8 1846     		mov	r0, r3
 3437 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3438 00be 0246     		mov	r2, r0
 3439              		.loc 1 2532 13 discriminator 1
 3440 00c0 7B69     		ldr	r3, [r7, #20]
 3441 00c2 1344     		add	r3, r3, r2
 3442 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3443              		.loc 1 2540 66
 3444 00c6 7A69     		ldr	r2, [r7, #20]
 3445 00c8 1346     		mov	r3, r2
 3446 00ca DB00     		lsls	r3, r3, #3
 3447 00cc 1344     		add	r3, r3, r2
 3448 00ce 9B00     		lsls	r3, r3, #2
 3449 00d0 1A46     		mov	r2, r3
 3450              		.loc 1 2540 46
 3451 00d2 FB68     		ldr	r3, [r7, #12]
 3452 00d4 1344     		add	r3, r3, r2
 3453              		.loc 1 2540 16
 3454 00d6 0322     		movs	r2, #3
 3455 00d8 0F49     		ldr	r1, .L213+20
 3456 00da 1846     		mov	r0, r3
 3457 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3458 00e0 0246     		mov	r2, r0
 3459              		.loc 1 2540 13 discriminator 1
 3460 00e2 7B69     		ldr	r3, [r7, #20]
 3461 00e4 1344     		add	r3, r3, r2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 110


 3462 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3463              		.loc 1 2557 8
 3464 00e8 7B68     		ldr	r3, [r7, #4]
 3465 00ea 002B     		cmp	r3, #0
 3466 00ec 02D0     		beq	.L210
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3467              		.loc 1 2559 24
 3468 00ee 7B68     		ldr	r3, [r7, #4]
 3469 00f0 0022     		movs	r2, #0
 3470 00f2 1A60     		str	r2, [r3]
 3471              	.L210:
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3472              		.loc 1 2569 12
 3473 00f4 FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3474              		.loc 1 2571 10
 3475 00f8 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3476              		.loc 1 2572 2
 3477 00fa 1846     		mov	r0, r3
 3478 00fc 1837     		adds	r7, r7, #24
 3479              	.LCFI119:
 3480              		.cfi_def_cfa_offset 8
 3481 00fe BD46     		mov	sp, r7
 3482              	.LCFI120:
 3483              		.cfi_def_cfa_register 13
 3484              		@ sp needed
 3485 0100 80BD     		pop	{r7, pc}
 3486              	.L214:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 111


 3487 0102 00BF     		.align	2
 3488              	.L213:
 3489 0104 00000000 		.word	uxCurrentNumberOfTasks
 3490 0108 00000000 		.word	pxReadyTasksLists
 3491 010c 00000000 		.word	pxDelayedTaskList
 3492 0110 00000000 		.word	pxOverflowDelayedTaskList
 3493 0114 00000000 		.word	xTasksWaitingTermination
 3494 0118 00000000 		.word	xSuspendedTaskList
 3495              		.cfi_endproc
 3496              	.LFE27:
 3498              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3499              		.align	1
 3500              		.global	xTaskCatchUpTicks
 3501              		.syntax unified
 3502              		.thumb
 3503              		.thumb_func
 3505              	xTaskCatchUpTicks:
 3506              	.LFB28:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3507              		.loc 1 2610 1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 112


 3508              		.cfi_startproc
 3509              		@ args = 0, pretend = 0, frame = 16
 3510              		@ frame_needed = 1, uses_anonymous_args = 0
 3511 0000 80B5     		push	{r7, lr}
 3512              	.LCFI121:
 3513              		.cfi_def_cfa_offset 8
 3514              		.cfi_offset 7, -8
 3515              		.cfi_offset 14, -4
 3516 0002 84B0     		sub	sp, sp, #16
 3517              	.LCFI122:
 3518              		.cfi_def_cfa_offset 24
 3519 0004 00AF     		add	r7, sp, #0
 3520              	.LCFI123:
 3521              		.cfi_def_cfa_register 7
 3522 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3523              		.loc 1 2611 12
 3524 0008 0023     		movs	r3, #0
 3525 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3526              		.loc 1 2615 2
 3527 000c 0F4B     		ldr	r3, .L219
 3528 000e 1B68     		ldr	r3, [r3]
 3529 0010 002B     		cmp	r3, #0
 3530 0012 0BD0     		beq	.L216
 3531              	.LBB172:
 3532              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3533              		.loc 2 195 2
 3534              		.syntax unified
 3535              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3536 0014 4FF05003 			mov r3, #80												
 3537 0018 83F31188 		msr basepri, r3											
 3538 001c BFF36F8F 		isb														
 3539 0020 BFF34F8F 		dsb														
 3540              	
 3541              	@ 0 "" 2
 3542              		.thumb
 3543              		.syntax unified
 3544 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3545              		.loc 2 203 1
 3546 0026 00BF     		nop
 3547              	.L217:
 3548              	.LBE173:
 3549              	.LBE172:
 3550              		.loc 1 2615 2
 3551 0028 00BF     		nop
 3552 002a FDE7     		b	.L217
 3553              	.L216:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 113


 3554              		.loc 1 2619 2
 3555 002c FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3556              		.loc 1 2620 15
 3557 0030 074B     		ldr	r3, .L219+4
 3558 0032 1A68     		ldr	r2, [r3]
 3559 0034 7B68     		ldr	r3, [r7, #4]
 3560 0036 1344     		add	r3, r3, r2
 3561 0038 054A     		ldr	r2, .L219+4
 3562 003a 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3563              		.loc 1 2621 19
 3564 003c FFF7FEFF 		bl	xTaskResumeAll
 3565 0040 F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3566              		.loc 1 2623 9
 3567 0042 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3568              		.loc 1 2624 1
 3569 0044 1846     		mov	r0, r3
 3570 0046 1037     		adds	r7, r7, #16
 3571              	.LCFI124:
 3572              		.cfi_def_cfa_offset 8
 3573 0048 BD46     		mov	sp, r7
 3574              	.LCFI125:
 3575              		.cfi_def_cfa_register 13
 3576              		@ sp needed
 3577 004a 80BD     		pop	{r7, pc}
 3578              	.L220:
 3579              		.align	2
 3580              	.L219:
 3581 004c 00000000 		.word	uxSchedulerSuspended
 3582 0050 00000000 		.word	xPendedTicks
 3583              		.cfi_endproc
 3584              	.LFE28:
 3586              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3587              		.align	1
 3588              		.global	xTaskIncrementTick
 3589              		.syntax unified
 3590              		.thumb
 3591              		.thumb_func
 3593              	xTaskIncrementTick:
 3594              	.LFB29:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 114


2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 115


2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3595              		.loc 1 2708 1
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 24
 3598              		@ frame_needed = 1, uses_anonymous_args = 0
 3599 0000 80B5     		push	{r7, lr}
 3600              	.LCFI126:
 3601              		.cfi_def_cfa_offset 8
 3602              		.cfi_offset 7, -8
 3603              		.cfi_offset 14, -4
 3604 0002 86B0     		sub	sp, sp, #24
 3605              	.LCFI127:
 3606              		.cfi_def_cfa_offset 32
 3607 0004 00AF     		add	r7, sp, #0
 3608              	.LCFI128:
 3609              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3610              		.loc 1 2711 12
 3611 0006 0023     		movs	r3, #0
 3612 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3613              		.loc 1 2717 27
 3614 000a 4F4B     		ldr	r3, .L236
 3615 000c 1B68     		ldr	r3, [r3]
 3616              		.loc 1 2717 4
 3617 000e 002B     		cmp	r3, #0
 3618 0010 40F09080 		bne	.L222
 3619              	.LBB174:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3620              		.loc 1 2721 49
 3621 0014 4D4B     		ldr	r3, .L236+4
 3622 0016 1B68     		ldr	r3, [r3]
 3623              		.loc 1 2721 20
 3624 0018 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 116


 3625 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3626              		.loc 1 2725 14
 3627 001c 4B4A     		ldr	r2, .L236+4
 3628 001e 3B69     		ldr	r3, [r7, #16]
 3629 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3630              		.loc 1 2727 5
 3631 0022 3B69     		ldr	r3, [r7, #16]
 3632 0024 002B     		cmp	r3, #0
 3633 0026 21D1     		bne	.L223
 3634              	.LBB175:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3635              		.loc 1 2729 4
 3636 0028 494B     		ldr	r3, .L236+8
 3637 002a 1B68     		ldr	r3, [r3]
 3638 002c 1B68     		ldr	r3, [r3]
 3639 002e 002B     		cmp	r3, #0
 3640 0030 0BD0     		beq	.L224
 3641              	.LBB176:
 3642              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3643              		.loc 2 195 2
 3644              		.syntax unified
 3645              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3646 0032 4FF05003 			mov r3, #80												
 3647 0036 83F31188 		msr basepri, r3											
 3648 003a BFF36F8F 		isb														
 3649 003e BFF34F8F 		dsb														
 3650              	
 3651              	@ 0 "" 2
 3652              		.thumb
 3653              		.syntax unified
 3654 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3655              		.loc 2 203 1
 3656 0044 00BF     		nop
 3657              	.L225:
 3658              	.LBE177:
 3659              	.LBE176:
 3660              		.loc 1 2729 4
 3661 0046 00BF     		nop
 3662 0048 FDE7     		b	.L225
 3663              	.L224:
 3664              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3665 004a 414B     		ldr	r3, .L236+8
 3666 004c 1B68     		ldr	r3, [r3]
 3667 004e FB60     		str	r3, [r7, #12]
 3668 0050 404B     		ldr	r3, .L236+12
 3669 0052 1B68     		ldr	r3, [r3]
 3670 0054 3E4A     		ldr	r2, .L236+8
 3671 0056 1360     		str	r3, [r2]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 117


 3672 0058 3E4A     		ldr	r2, .L236+12
 3673 005a FB68     		ldr	r3, [r7, #12]
 3674 005c 1360     		str	r3, [r2]
 3675 005e 3E4B     		ldr	r3, .L236+16
 3676 0060 1B68     		ldr	r3, [r3]
 3677 0062 0133     		adds	r3, r3, #1
 3678 0064 3C4A     		ldr	r2, .L236+16
 3679 0066 1360     		str	r3, [r2]
 3680 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3681              	.L223:
 3682              	.LBE175:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3683              		.loc 1 2740 23 is_stmt 1
 3684 006c 3B4B     		ldr	r3, .L236+20
 3685 006e 1B68     		ldr	r3, [r3]
 3686              		.loc 1 2740 5
 3687 0070 3A69     		ldr	r2, [r7, #16]
 3688 0072 9A42     		cmp	r2, r3
 3689 0074 49D3     		bcc	.L226
 3690              	.L232:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3691              		.loc 1 2744 9
 3692 0076 364B     		ldr	r3, .L236+8
 3693 0078 1B68     		ldr	r3, [r3]
 3694 007a 1B68     		ldr	r3, [r3]
 3695              		.loc 1 2744 7
 3696 007c 002B     		cmp	r3, #0
 3697 007e 04D1     		bne	.L227
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3698              		.loc 1 2751 27
 3699 0080 364B     		ldr	r3, .L236+20
 3700 0082 4FF0FF32 		mov	r2, #-1
 3701 0086 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3702              		.loc 1 2752 6
 3703 0088 3FE0     		b	.L226
 3704              	.L227:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 118


2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3705              		.loc 1 2760 14
 3706 008a 314B     		ldr	r3, .L236+8
 3707 008c 1B68     		ldr	r3, [r3]
 3708 008e DB68     		ldr	r3, [r3, #12]
 3709              		.loc 1 2760 12
 3710 0090 DB68     		ldr	r3, [r3, #12]
 3711 0092 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3712              		.loc 1 2761 17
 3713 0094 BB68     		ldr	r3, [r7, #8]
 3714 0096 5B68     		ldr	r3, [r3, #4]
 3715 0098 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3716              		.loc 1 2763 8
 3717 009a 3A69     		ldr	r2, [r7, #16]
 3718 009c 7B68     		ldr	r3, [r7, #4]
 3719 009e 9A42     		cmp	r2, r3
 3720 00a0 03D2     		bcs	.L228
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3721              		.loc 1 2770 28
 3722 00a2 2E4A     		ldr	r2, .L236+20
 3723 00a4 7B68     		ldr	r3, [r7, #4]
 3724 00a6 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3725              		.loc 1 2771 7
 3726 00a8 2FE0     		b	.L226
 3727              	.L228:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3728              		.loc 1 2779 15
 3729 00aa BB68     		ldr	r3, [r7, #8]
 3730 00ac 0433     		adds	r3, r3, #4
 3731 00ae 1846     		mov	r0, r3
 3732 00b0 FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 119


2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3733              		.loc 1 2783 10
 3734 00b4 BB68     		ldr	r3, [r7, #8]
 3735 00b6 9B6A     		ldr	r3, [r3, #40]
 3736              		.loc 1 2783 8
 3737 00b8 002B     		cmp	r3, #0
 3738 00ba 04D0     		beq	.L229
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3739              		.loc 1 2785 16
 3740 00bc BB68     		ldr	r3, [r7, #8]
 3741 00be 1833     		adds	r3, r3, #24
 3742 00c0 1846     		mov	r0, r3
 3743 00c2 FFF7FEFF 		bl	uxListRemove
 3744              	.L229:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3745              		.loc 1 2794 6
 3746 00c6 BB68     		ldr	r3, [r7, #8]
 3747 00c8 DA6A     		ldr	r2, [r3, #44]
 3748 00ca 254B     		ldr	r3, .L236+24
 3749 00cc 1B68     		ldr	r3, [r3]
 3750 00ce 9A42     		cmp	r2, r3
 3751 00d0 03D9     		bls	.L230
 3752              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3753 00d2 BB68     		ldr	r3, [r7, #8]
 3754 00d4 DB6A     		ldr	r3, [r3, #44]
 3755 00d6 224A     		ldr	r2, .L236+24
 3756 00d8 1360     		str	r3, [r2]
 3757              	.L230:
 3758              		.loc 1 2794 6 discriminator 3
 3759 00da BB68     		ldr	r3, [r7, #8]
 3760 00dc DA6A     		ldr	r2, [r3, #44]
 3761 00de 1346     		mov	r3, r2
 3762 00e0 9B00     		lsls	r3, r3, #2
 3763 00e2 1344     		add	r3, r3, r2
 3764 00e4 9B00     		lsls	r3, r3, #2
 3765 00e6 1F4A     		ldr	r2, .L236+28
 3766 00e8 1A44     		add	r2, r2, r3
 3767 00ea BB68     		ldr	r3, [r7, #8]
 3768 00ec 0433     		adds	r3, r3, #4
 3769 00ee 1946     		mov	r1, r3
 3770 00f0 1046     		mov	r0, r2
 3771 00f2 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 120


2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3772              		.loc 1 2804 16 is_stmt 1
 3773 00f6 BB68     		ldr	r3, [r7, #8]
 3774 00f8 DA6A     		ldr	r2, [r3, #44]
 3775              		.loc 1 2804 44
 3776 00fa 1B4B     		ldr	r3, .L236+32
 3777 00fc 1B68     		ldr	r3, [r3]
 3778 00fe DB6A     		ldr	r3, [r3, #44]
 3779              		.loc 1 2804 9
 3780 0100 9A42     		cmp	r2, r3
 3781 0102 B8D3     		bcc	.L232
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 3782              		.loc 1 2806 24
 3783 0104 0123     		movs	r3, #1
 3784 0106 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3785              		.loc 1 2744 7
 3786 0108 B5E7     		b	.L232
 3787              	.L226:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 3788              		.loc 1 2823 8
 3789 010a 174B     		ldr	r3, .L236+32
 3790 010c 1B68     		ldr	r3, [r3]
 3791 010e DA6A     		ldr	r2, [r3, #44]
 3792 0110 1449     		ldr	r1, .L236+28
 3793 0112 1346     		mov	r3, r2
 3794 0114 9B00     		lsls	r3, r3, #2
 3795 0116 1344     		add	r3, r3, r2
 3796 0118 9B00     		lsls	r3, r3, #2
 3797 011a 0B44     		add	r3, r3, r1
 3798 011c 1B68     		ldr	r3, [r3]
 3799              		.loc 1 2823 6
 3800 011e 012B     		cmp	r3, #1
 3801 0120 01D9     		bls	.L233
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3802              		.loc 1 2825 21
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 121


 3803 0122 0123     		movs	r3, #1
 3804 0124 7B61     		str	r3, [r7, #20]
 3805              	.L233:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 3806              		.loc 1 2851 22
 3807 0126 114B     		ldr	r3, .L236+36
 3808 0128 1B68     		ldr	r3, [r3]
 3809              		.loc 1 2851 6
 3810 012a 002B     		cmp	r3, #0
 3811 012c 07D0     		beq	.L234
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 3812              		.loc 1 2853 21
 3813 012e 0123     		movs	r3, #1
 3814 0130 7B61     		str	r3, [r7, #20]
 3815 0132 04E0     		b	.L234
 3816              	.L222:
 3817              	.LBE174:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 3818              		.loc 1 2864 3
 3819 0134 0E4B     		ldr	r3, .L236+40
 3820 0136 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 122


 3821 0138 0133     		adds	r3, r3, #1
 3822 013a 0D4A     		ldr	r2, .L236+40
 3823 013c 1360     		str	r3, [r2]
 3824              	.L234:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 3825              		.loc 1 2875 9
 3826 013e 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3827              		.loc 1 2876 1
 3828 0140 1846     		mov	r0, r3
 3829 0142 1837     		adds	r7, r7, #24
 3830              	.LCFI129:
 3831              		.cfi_def_cfa_offset 8
 3832 0144 BD46     		mov	sp, r7
 3833              	.LCFI130:
 3834              		.cfi_def_cfa_register 13
 3835              		@ sp needed
 3836 0146 80BD     		pop	{r7, pc}
 3837              	.L237:
 3838              		.align	2
 3839              	.L236:
 3840 0148 00000000 		.word	uxSchedulerSuspended
 3841 014c 00000000 		.word	xTickCount
 3842 0150 00000000 		.word	pxDelayedTaskList
 3843 0154 00000000 		.word	pxOverflowDelayedTaskList
 3844 0158 00000000 		.word	xNumOfOverflows
 3845 015c 00000000 		.word	xNextTaskUnblockTime
 3846 0160 00000000 		.word	uxTopReadyPriority
 3847 0164 00000000 		.word	pxReadyTasksLists
 3848 0168 00000000 		.word	pxCurrentTCB
 3849 016c 00000000 		.word	xYieldPending
 3850 0170 00000000 		.word	xPendedTicks
 3851              		.cfi_endproc
 3852              	.LFE29:
 3854              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3855              		.align	1
 3856              		.global	vTaskSwitchContext
 3857              		.syntax unified
 3858              		.thumb
 3859              		.thumb_func
 3861              	vTaskSwitchContext:
 3862              	.LFB30:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 123


2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 124


2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3863              		.loc 1 2990 1
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 16
 3866              		@ frame_needed = 1, uses_anonymous_args = 0
 3867              		@ link register save eliminated.
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 125


 3868 0000 80B4     		push	{r7}
 3869              	.LCFI131:
 3870              		.cfi_def_cfa_offset 4
 3871              		.cfi_offset 7, -4
 3872 0002 85B0     		sub	sp, sp, #20
 3873              	.LCFI132:
 3874              		.cfi_def_cfa_offset 24
 3875 0004 00AF     		add	r7, sp, #0
 3876              	.LCFI133:
 3877              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3878              		.loc 1 2991 27
 3879 0006 284B     		ldr	r3, .L247
 3880 0008 1B68     		ldr	r3, [r3]
 3881              		.loc 1 2991 4
 3882 000a 002B     		cmp	r3, #0
 3883 000c 03D0     		beq	.L239
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 3884              		.loc 1 2995 17
 3885 000e 274B     		ldr	r3, .L247+4
 3886 0010 0122     		movs	r2, #1
 3887 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 126


3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3888              		.loc 1 3061 1
 3889 0014 42E0     		b	.L246
 3890              	.L239:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3891              		.loc 1 2999 17
 3892 0016 254B     		ldr	r3, .L247+4
 3893 0018 0022     		movs	r2, #0
 3894 001a 1A60     		str	r2, [r3]
 3895              	.LBB178:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3896              		.loc 1 3041 3
 3897 001c 244B     		ldr	r3, .L247+8
 3898 001e 1B68     		ldr	r3, [r3]
 3899 0020 FB60     		str	r3, [r7, #12]
 3900 0022 11E0     		b	.L241
 3901              	.L244:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3902              		.loc 1 3041 3 is_stmt 0 discriminator 5
 3903 0024 FB68     		ldr	r3, [r7, #12]
 3904 0026 002B     		cmp	r3, #0
 3905 0028 0BD1     		bne	.L242
 3906              	.LBB179:
 3907              	.LBB180:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 127


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3908              		.loc 2 195 2 is_stmt 1
 3909              		.syntax unified
 3910              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3911 002a 4FF05003 			mov r3, #80												
 3912 002e 83F31188 		msr basepri, r3											
 3913 0032 BFF36F8F 		isb														
 3914 0036 BFF34F8F 		dsb														
 3915              	
 3916              	@ 0 "" 2
 3917              		.thumb
 3918              		.syntax unified
 3919 003a 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3920              		.loc 2 203 1
 3921 003c 00BF     		nop
 3922              	.L243:
 3923              	.LBE180:
 3924              	.LBE179:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3925              		.loc 1 3041 3
 3926 003e 00BF     		nop
 3927 0040 FDE7     		b	.L243
 3928              	.L242:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3929              		.loc 1 3041 3 is_stmt 0 discriminator 3
 3930 0042 FB68     		ldr	r3, [r7, #12]
 3931 0044 013B     		subs	r3, r3, #1
 3932 0046 FB60     		str	r3, [r7, #12]
 3933              	.L241:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3934              		.loc 1 3041 3 discriminator 4
 3935 0048 1A49     		ldr	r1, .L247+12
 3936 004a FA68     		ldr	r2, [r7, #12]
 3937 004c 1346     		mov	r3, r2
 3938 004e 9B00     		lsls	r3, r3, #2
 3939 0050 1344     		add	r3, r3, r2
 3940 0052 9B00     		lsls	r3, r3, #2
 3941 0054 0B44     		add	r3, r3, r1
 3942 0056 1B68     		ldr	r3, [r3]
 3943 0058 002B     		cmp	r3, #0
 3944 005a E3D0     		beq	.L244
 3945              	.LBB181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3946              		.loc 1 3041 3 discriminator 6
 3947 005c FA68     		ldr	r2, [r7, #12]
 3948 005e 1346     		mov	r3, r2
 3949 0060 9B00     		lsls	r3, r3, #2
 3950 0062 1344     		add	r3, r3, r2
 3951 0064 9B00     		lsls	r3, r3, #2
 3952 0066 134A     		ldr	r2, .L247+12
 3953 0068 1344     		add	r3, r3, r2
 3954 006a BB60     		str	r3, [r7, #8]
 3955 006c BB68     		ldr	r3, [r7, #8]
 3956 006e 5B68     		ldr	r3, [r3, #4]
 3957 0070 5A68     		ldr	r2, [r3, #4]
 3958 0072 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 128


 3959 0074 5A60     		str	r2, [r3, #4]
 3960 0076 BB68     		ldr	r3, [r7, #8]
 3961 0078 5A68     		ldr	r2, [r3, #4]
 3962 007a BB68     		ldr	r3, [r7, #8]
 3963 007c 0833     		adds	r3, r3, #8
 3964 007e 9A42     		cmp	r2, r3
 3965 0080 04D1     		bne	.L245
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3966              		.loc 1 3041 3 discriminator 7
 3967 0082 BB68     		ldr	r3, [r7, #8]
 3968 0084 5B68     		ldr	r3, [r3, #4]
 3969 0086 5A68     		ldr	r2, [r3, #4]
 3970 0088 BB68     		ldr	r3, [r7, #8]
 3971 008a 5A60     		str	r2, [r3, #4]
 3972              	.L245:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3973              		.loc 1 3041 3 discriminator 9
 3974 008c BB68     		ldr	r3, [r7, #8]
 3975 008e 5B68     		ldr	r3, [r3, #4]
 3976 0090 DB68     		ldr	r3, [r3, #12]
 3977 0092 094A     		ldr	r2, .L247+16
 3978 0094 1360     		str	r3, [r2]
 3979              	.LBE181:
 3980 0096 064A     		ldr	r2, .L247+8
 3981 0098 FB68     		ldr	r3, [r7, #12]
 3982 009a 1360     		str	r3, [r2]
 3983              	.L246:
 3984              	.LBE178:
 3985              		.loc 1 3061 1 is_stmt 1
 3986 009c 00BF     		nop
 3987 009e 1437     		adds	r7, r7, #20
 3988              	.LCFI134:
 3989              		.cfi_def_cfa_offset 4
 3990 00a0 BD46     		mov	sp, r7
 3991              	.LCFI135:
 3992              		.cfi_def_cfa_register 13
 3993              		@ sp needed
 3994 00a2 5DF8047B 		ldr	r7, [sp], #4
 3995              	.LCFI136:
 3996              		.cfi_restore 7
 3997              		.cfi_def_cfa_offset 0
 3998 00a6 7047     		bx	lr
 3999              	.L248:
 4000              		.align	2
 4001              	.L247:
 4002 00a8 00000000 		.word	uxSchedulerSuspended
 4003 00ac 00000000 		.word	xYieldPending
 4004 00b0 00000000 		.word	uxTopReadyPriority
 4005 00b4 00000000 		.word	pxReadyTasksLists
 4006 00b8 00000000 		.word	pxCurrentTCB
 4007              		.cfi_endproc
 4008              	.LFE30:
 4010              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4011              		.align	1
 4012              		.global	vTaskPlaceOnEventList
 4013              		.syntax unified
 4014              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 129


 4015              		.thumb_func
 4017              	vTaskPlaceOnEventList:
 4018              	.LFB31:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4019              		.loc 1 3065 1
 4020              		.cfi_startproc
 4021              		@ args = 0, pretend = 0, frame = 16
 4022              		@ frame_needed = 1, uses_anonymous_args = 0
 4023 0000 80B5     		push	{r7, lr}
 4024              	.LCFI137:
 4025              		.cfi_def_cfa_offset 8
 4026              		.cfi_offset 7, -8
 4027              		.cfi_offset 14, -4
 4028 0002 84B0     		sub	sp, sp, #16
 4029              	.LCFI138:
 4030              		.cfi_def_cfa_offset 24
 4031 0004 00AF     		add	r7, sp, #0
 4032              	.LCFI139:
 4033              		.cfi_def_cfa_register 7
 4034 0006 7860     		str	r0, [r7, #4]
 4035 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4036              		.loc 1 3066 2
 4037 000a 7B68     		ldr	r3, [r7, #4]
 4038 000c 002B     		cmp	r3, #0
 4039 000e 0BD1     		bne	.L250
 4040              	.LBB182:
 4041              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4042              		.loc 2 195 2
 4043              		.syntax unified
 4044              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4045 0010 4FF05003 			mov r3, #80												
 4046 0014 83F31188 		msr basepri, r3											
 4047 0018 BFF36F8F 		isb														
 4048 001c BFF34F8F 		dsb														
 4049              	
 4050              	@ 0 "" 2
 4051              		.thumb
 4052              		.syntax unified
 4053 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4054              		.loc 2 203 1
 4055 0022 00BF     		nop
 4056              	.L251:
 4057              	.LBE183:
 4058              	.LBE182:
 4059              		.loc 1 3066 2
 4060 0024 00BF     		nop
 4061 0026 FDE7     		b	.L251
 4062              	.L250:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 130


3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4063              		.loc 1 3075 43
 4064 0028 074B     		ldr	r3, .L252
 4065 002a 1B68     		ldr	r3, [r3]
 4066              		.loc 1 3075 2
 4067 002c 1833     		adds	r3, r3, #24
 4068 002e 1946     		mov	r1, r3
 4069 0030 7868     		ldr	r0, [r7, #4]
 4070 0032 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4071              		.loc 1 3077 2
 4072 0036 0121     		movs	r1, #1
 4073 0038 3868     		ldr	r0, [r7]
 4074 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4075              		.loc 1 3078 1
 4076 003e 00BF     		nop
 4077 0040 1037     		adds	r7, r7, #16
 4078              	.LCFI140:
 4079              		.cfi_def_cfa_offset 8
 4080 0042 BD46     		mov	sp, r7
 4081              	.LCFI141:
 4082              		.cfi_def_cfa_register 13
 4083              		@ sp needed
 4084 0044 80BD     		pop	{r7, pc}
 4085              	.L253:
 4086 0046 00BF     		.align	2
 4087              	.L252:
 4088 0048 00000000 		.word	pxCurrentTCB
 4089              		.cfi_endproc
 4090              	.LFE31:
 4092              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4093              		.align	1
 4094              		.global	vTaskPlaceOnUnorderedEventList
 4095              		.syntax unified
 4096              		.thumb
 4097              		.thumb_func
 4099              	vTaskPlaceOnUnorderedEventList:
 4100              	.LFB32:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4101              		.loc 1 3082 1
 4102              		.cfi_startproc
 4103              		@ args = 0, pretend = 0, frame = 24
 4104              		@ frame_needed = 1, uses_anonymous_args = 0
 4105 0000 80B5     		push	{r7, lr}
 4106              	.LCFI142:
 4107              		.cfi_def_cfa_offset 8
 4108              		.cfi_offset 7, -8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 131


 4109              		.cfi_offset 14, -4
 4110 0002 86B0     		sub	sp, sp, #24
 4111              	.LCFI143:
 4112              		.cfi_def_cfa_offset 32
 4113 0004 00AF     		add	r7, sp, #0
 4114              	.LCFI144:
 4115              		.cfi_def_cfa_register 7
 4116 0006 F860     		str	r0, [r7, #12]
 4117 0008 B960     		str	r1, [r7, #8]
 4118 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4119              		.loc 1 3083 2
 4120 000c FB68     		ldr	r3, [r7, #12]
 4121 000e 002B     		cmp	r3, #0
 4122 0010 0BD1     		bne	.L255
 4123              	.LBB184:
 4124              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4125              		.loc 2 195 2
 4126              		.syntax unified
 4127              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4128 0012 4FF05003 			mov r3, #80												
 4129 0016 83F31188 		msr basepri, r3											
 4130 001a BFF36F8F 		isb														
 4131 001e BFF34F8F 		dsb														
 4132              	
 4133              	@ 0 "" 2
 4134              		.thumb
 4135              		.syntax unified
 4136 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4137              		.loc 2 203 1
 4138 0024 00BF     		nop
 4139              	.L256:
 4140              	.LBE185:
 4141              	.LBE184:
 4142              		.loc 1 3083 2
 4143 0026 00BF     		nop
 4144 0028 FDE7     		b	.L256
 4145              	.L255:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4146              		.loc 1 3087 2
 4147 002a 124B     		ldr	r3, .L259
 4148 002c 1B68     		ldr	r3, [r3]
 4149 002e 002B     		cmp	r3, #0
 4150 0030 0BD1     		bne	.L257
 4151              	.LBB186:
 4152              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4153              		.loc 2 195 2
 4154              		.syntax unified
 4155              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4156 0032 4FF05003 			mov r3, #80												
 4157 0036 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 132


 4158 003a BFF36F8F 		isb														
 4159 003e BFF34F8F 		dsb														
 4160              	
 4161              	@ 0 "" 2
 4162              		.thumb
 4163              		.syntax unified
 4164 0042 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4165              		.loc 2 203 1
 4166 0044 00BF     		nop
 4167              	.L258:
 4168              	.LBE187:
 4169              	.LBE186:
 4170              		.loc 1 3087 2
 4171 0046 00BF     		nop
 4172 0048 FDE7     		b	.L258
 4173              	.L257:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4174              		.loc 1 3092 2
 4175 004a 0B4B     		ldr	r3, .L259+4
 4176 004c 1B68     		ldr	r3, [r3]
 4177 004e BA68     		ldr	r2, [r7, #8]
 4178 0050 42F00042 		orr	r2, r2, #-2147483648
 4179 0054 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4180              		.loc 1 3099 46
 4181 0056 084B     		ldr	r3, .L259+4
 4182 0058 1B68     		ldr	r3, [r3]
 4183              		.loc 1 3099 2
 4184 005a 1833     		adds	r3, r3, #24
 4185 005c 1946     		mov	r1, r3
 4186 005e F868     		ldr	r0, [r7, #12]
 4187 0060 FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4188              		.loc 1 3101 2
 4189 0064 0121     		movs	r1, #1
 4190 0066 7868     		ldr	r0, [r7, #4]
 4191 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4192              		.loc 1 3102 1
 4193 006c 00BF     		nop
 4194 006e 1837     		adds	r7, r7, #24
 4195              	.LCFI145:
 4196              		.cfi_def_cfa_offset 8
 4197 0070 BD46     		mov	sp, r7
 4198              	.LCFI146:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 133


 4199              		.cfi_def_cfa_register 13
 4200              		@ sp needed
 4201 0072 80BD     		pop	{r7, pc}
 4202              	.L260:
 4203              		.align	2
 4204              	.L259:
 4205 0074 00000000 		.word	uxSchedulerSuspended
 4206 0078 00000000 		.word	pxCurrentTCB
 4207              		.cfi_endproc
 4208              	.LFE32:
 4210              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4211              		.align	1
 4212              		.global	vTaskPlaceOnEventListRestricted
 4213              		.syntax unified
 4214              		.thumb
 4215              		.thumb_func
 4217              	vTaskPlaceOnEventListRestricted:
 4218              	.LFB33:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4219              		.loc 1 3108 2
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 24
 4222              		@ frame_needed = 1, uses_anonymous_args = 0
 4223 0000 80B5     		push	{r7, lr}
 4224              	.LCFI147:
 4225              		.cfi_def_cfa_offset 8
 4226              		.cfi_offset 7, -8
 4227              		.cfi_offset 14, -4
 4228 0002 86B0     		sub	sp, sp, #24
 4229              	.LCFI148:
 4230              		.cfi_def_cfa_offset 32
 4231 0004 00AF     		add	r7, sp, #0
 4232              	.LCFI149:
 4233              		.cfi_def_cfa_register 7
 4234 0006 F860     		str	r0, [r7, #12]
 4235 0008 B960     		str	r1, [r7, #8]
 4236 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4237              		.loc 1 3109 3
 4238 000c FB68     		ldr	r3, [r7, #12]
 4239 000e 002B     		cmp	r3, #0
 4240 0010 0BD1     		bne	.L262
 4241              	.LBB188:
 4242              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4243              		.loc 2 195 2
 4244              		.syntax unified
 4245              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4246 0012 4FF05003 			mov r3, #80												
 4247 0016 83F31188 		msr basepri, r3											
 4248 001a BFF36F8F 		isb														
 4249 001e BFF34F8F 		dsb														
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 134


 4250              	
 4251              	@ 0 "" 2
 4252              		.thumb
 4253              		.syntax unified
 4254 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4255              		.loc 2 203 1
 4256 0024 00BF     		nop
 4257              	.L263:
 4258              	.LBE189:
 4259              	.LBE188:
 4260              		.loc 1 3109 3
 4261 0026 00BF     		nop
 4262 0028 FDE7     		b	.L263
 4263              	.L262:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4264              		.loc 1 3121 47
 4265 002a 0A4B     		ldr	r3, .L265
 4266 002c 1B68     		ldr	r3, [r3]
 4267              		.loc 1 3121 3
 4268 002e 1833     		adds	r3, r3, #24
 4269 0030 1946     		mov	r1, r3
 4270 0032 F868     		ldr	r0, [r7, #12]
 4271 0034 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4272              		.loc 1 3126 5
 4273 0038 7B68     		ldr	r3, [r7, #4]
 4274 003a 002B     		cmp	r3, #0
 4275 003c 02D0     		beq	.L264
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4276              		.loc 1 3128 17
 4277 003e 4FF0FF33 		mov	r3, #-1
 4278 0042 BB60     		str	r3, [r7, #8]
 4279              	.L264:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4280              		.loc 1 3132 3
 4281 0044 7968     		ldr	r1, [r7, #4]
 4282 0046 B868     		ldr	r0, [r7, #8]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 135


 4283 0048 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4284              		.loc 1 3133 2
 4285 004c 00BF     		nop
 4286 004e 1837     		adds	r7, r7, #24
 4287              	.LCFI150:
 4288              		.cfi_def_cfa_offset 8
 4289 0050 BD46     		mov	sp, r7
 4290              	.LCFI151:
 4291              		.cfi_def_cfa_register 13
 4292              		@ sp needed
 4293 0052 80BD     		pop	{r7, pc}
 4294              	.L266:
 4295              		.align	2
 4296              	.L265:
 4297 0054 00000000 		.word	pxCurrentTCB
 4298              		.cfi_endproc
 4299              	.LFE33:
 4301              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4302              		.align	1
 4303              		.global	xTaskRemoveFromEventList
 4304              		.syntax unified
 4305              		.thumb
 4306              		.thumb_func
 4308              	xTaskRemoveFromEventList:
 4309              	.LFB34:
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4310              		.loc 1 3139 1
 4311              		.cfi_startproc
 4312              		@ args = 0, pretend = 0, frame = 24
 4313              		@ frame_needed = 1, uses_anonymous_args = 0
 4314 0000 80B5     		push	{r7, lr}
 4315              	.LCFI152:
 4316              		.cfi_def_cfa_offset 8
 4317              		.cfi_offset 7, -8
 4318              		.cfi_offset 14, -4
 4319 0002 86B0     		sub	sp, sp, #24
 4320              	.LCFI153:
 4321              		.cfi_def_cfa_offset 32
 4322 0004 00AF     		add	r7, sp, #0
 4323              	.LCFI154:
 4324              		.cfi_def_cfa_register 7
 4325 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 136


3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4326              		.loc 1 3156 19
 4327 0008 7B68     		ldr	r3, [r7, #4]
 4328 000a DB68     		ldr	r3, [r3, #12]
 4329              		.loc 1 3156 17
 4330 000c DB68     		ldr	r3, [r3, #12]
 4331 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4332              		.loc 1 3157 2
 4333 0010 3B69     		ldr	r3, [r7, #16]
 4334 0012 002B     		cmp	r3, #0
 4335 0014 0BD1     		bne	.L268
 4336              	.LBB190:
 4337              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4338              		.loc 2 195 2
 4339              		.syntax unified
 4340              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4341 0016 4FF05003 			mov r3, #80												
 4342 001a 83F31188 		msr basepri, r3											
 4343 001e BFF36F8F 		isb														
 4344 0022 BFF34F8F 		dsb														
 4345              	
 4346              	@ 0 "" 2
 4347              		.thumb
 4348              		.syntax unified
 4349 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4350              		.loc 2 203 1
 4351 0028 00BF     		nop
 4352              	.L269:
 4353              	.LBE191:
 4354              	.LBE190:
 4355              		.loc 1 3157 2
 4356 002a 00BF     		nop
 4357 002c FDE7     		b	.L269
 4358              	.L268:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4359              		.loc 1 3158 11
 4360 002e 3B69     		ldr	r3, [r7, #16]
 4361 0030 1833     		adds	r3, r3, #24
 4362 0032 1846     		mov	r0, r3
 4363 0034 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4364              		.loc 1 3160 27
 4365 0038 1D4B     		ldr	r3, .L276
 4366 003a 1B68     		ldr	r3, [r3]
 4367              		.loc 1 3160 4
 4368 003c 002B     		cmp	r3, #0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 137


 4369 003e 1DD1     		bne	.L270
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4370              		.loc 1 3162 12
 4371 0040 3B69     		ldr	r3, [r7, #16]
 4372 0042 0433     		adds	r3, r3, #4
 4373 0044 1846     		mov	r0, r3
 4374 0046 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4375              		.loc 1 3163 3
 4376 004a 3B69     		ldr	r3, [r7, #16]
 4377 004c DA6A     		ldr	r2, [r3, #44]
 4378 004e 194B     		ldr	r3, .L276+4
 4379 0050 1B68     		ldr	r3, [r3]
 4380 0052 9A42     		cmp	r2, r3
 4381 0054 03D9     		bls	.L271
 4382              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4383 0056 3B69     		ldr	r3, [r7, #16]
 4384 0058 DB6A     		ldr	r3, [r3, #44]
 4385 005a 164A     		ldr	r2, .L276+4
 4386 005c 1360     		str	r3, [r2]
 4387              	.L271:
 4388              		.loc 1 3163 3 discriminator 3
 4389 005e 3B69     		ldr	r3, [r7, #16]
 4390 0060 DA6A     		ldr	r2, [r3, #44]
 4391 0062 1346     		mov	r3, r2
 4392 0064 9B00     		lsls	r3, r3, #2
 4393 0066 1344     		add	r3, r3, r2
 4394 0068 9B00     		lsls	r3, r3, #2
 4395 006a 134A     		ldr	r2, .L276+8
 4396 006c 1A44     		add	r2, r2, r3
 4397 006e 3B69     		ldr	r3, [r7, #16]
 4398 0070 0433     		adds	r3, r3, #4
 4399 0072 1946     		mov	r1, r3
 4400 0074 1046     		mov	r0, r2
 4401 0076 FFF7FEFF 		bl	vListInsertEnd
 4402 007a 05E0     		b	.L272
 4403              	.L270:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 138


3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4404              		.loc 1 3183 3 is_stmt 1
 4405 007c 3B69     		ldr	r3, [r7, #16]
 4406 007e 1833     		adds	r3, r3, #24
 4407 0080 1946     		mov	r1, r3
 4408 0082 0E48     		ldr	r0, .L276+12
 4409 0084 FFF7FEFF 		bl	vListInsertEnd
 4410              	.L272:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4411              		.loc 1 3186 20
 4412 0088 3B69     		ldr	r3, [r7, #16]
 4413 008a DA6A     		ldr	r2, [r3, #44]
 4414              		.loc 1 3186 47
 4415 008c 0C4B     		ldr	r3, .L276+16
 4416 008e 1B68     		ldr	r3, [r3]
 4417 0090 DB6A     		ldr	r3, [r3, #44]
 4418              		.loc 1 3186 4
 4419 0092 9A42     		cmp	r2, r3
 4420 0094 05D9     		bls	.L273
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4421              		.loc 1 3191 11
 4422 0096 0123     		movs	r3, #1
 4423 0098 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4424              		.loc 1 3195 17
 4425 009a 0A4B     		ldr	r3, .L276+20
 4426 009c 0122     		movs	r2, #1
 4427 009e 1A60     		str	r2, [r3]
 4428 00a0 01E0     		b	.L274
 4429              	.L273:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4430              		.loc 1 3199 11
 4431 00a2 0023     		movs	r3, #0
 4432 00a4 7B61     		str	r3, [r7, #20]
 4433              	.L274:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4434              		.loc 1 3202 9
 4435 00a6 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4436              		.loc 1 3203 1
 4437 00a8 1846     		mov	r0, r3
 4438 00aa 1837     		adds	r7, r7, #24
 4439              	.LCFI155:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 139


 4440              		.cfi_def_cfa_offset 8
 4441 00ac BD46     		mov	sp, r7
 4442              	.LCFI156:
 4443              		.cfi_def_cfa_register 13
 4444              		@ sp needed
 4445 00ae 80BD     		pop	{r7, pc}
 4446              	.L277:
 4447              		.align	2
 4448              	.L276:
 4449 00b0 00000000 		.word	uxSchedulerSuspended
 4450 00b4 00000000 		.word	uxTopReadyPriority
 4451 00b8 00000000 		.word	pxReadyTasksLists
 4452 00bc 00000000 		.word	xPendingReadyList
 4453 00c0 00000000 		.word	pxCurrentTCB
 4454 00c4 00000000 		.word	xYieldPending
 4455              		.cfi_endproc
 4456              	.LFE34:
 4458              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4459              		.align	1
 4460              		.global	vTaskRemoveFromUnorderedEventList
 4461              		.syntax unified
 4462              		.thumb
 4463              		.thumb_func
 4465              	vTaskRemoveFromUnorderedEventList:
 4466              	.LFB35:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4467              		.loc 1 3207 1
 4468              		.cfi_startproc
 4469              		@ args = 0, pretend = 0, frame = 24
 4470              		@ frame_needed = 1, uses_anonymous_args = 0
 4471 0000 80B5     		push	{r7, lr}
 4472              	.LCFI157:
 4473              		.cfi_def_cfa_offset 8
 4474              		.cfi_offset 7, -8
 4475              		.cfi_offset 14, -4
 4476 0002 86B0     		sub	sp, sp, #24
 4477              	.LCFI158:
 4478              		.cfi_def_cfa_offset 32
 4479 0004 00AF     		add	r7, sp, #0
 4480              	.LCFI159:
 4481              		.cfi_def_cfa_register 7
 4482 0006 7860     		str	r0, [r7, #4]
 4483 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4484              		.loc 1 3212 2
 4485 000a 2A4B     		ldr	r3, .L286
 4486 000c 1B68     		ldr	r3, [r3]
 4487 000e 002B     		cmp	r3, #0
 4488 0010 0BD1     		bne	.L279
 4489              	.LBB192:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 140


 4490              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4491              		.loc 2 195 2
 4492              		.syntax unified
 4493              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4494 0012 4FF05003 			mov r3, #80												
 4495 0016 83F31188 		msr basepri, r3											
 4496 001a BFF36F8F 		isb														
 4497 001e BFF34F8F 		dsb														
 4498              	
 4499              	@ 0 "" 2
 4500              		.thumb
 4501              		.syntax unified
 4502 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4503              		.loc 2 203 1
 4504 0024 00BF     		nop
 4505              	.L280:
 4506              	.LBE193:
 4507              	.LBE192:
 4508              		.loc 1 3212 2
 4509 0026 00BF     		nop
 4510 0028 FDE7     		b	.L280
 4511              	.L279:
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4512              		.loc 1 3215 2
 4513 002a 3B68     		ldr	r3, [r7]
 4514 002c 43F00042 		orr	r2, r3, #-2147483648
 4515 0030 7B68     		ldr	r3, [r7, #4]
 4516 0032 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4517              		.loc 1 3219 17
 4518 0034 7B68     		ldr	r3, [r7, #4]
 4519 0036 DB68     		ldr	r3, [r3, #12]
 4520 0038 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4521              		.loc 1 3220 2
 4522 003a 7B69     		ldr	r3, [r7, #20]
 4523 003c 002B     		cmp	r3, #0
 4524 003e 0BD1     		bne	.L281
 4525              	.LBB194:
 4526              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4527              		.loc 2 195 2
 4528              		.syntax unified
 4529              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4530 0040 4FF05003 			mov r3, #80												
 4531 0044 83F31188 		msr basepri, r3											
 4532 0048 BFF36F8F 		isb														
 4533 004c BFF34F8F 		dsb														
 4534              	
 4535              	@ 0 "" 2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 141


 4536              		.thumb
 4537              		.syntax unified
 4538 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4539              		.loc 2 203 1
 4540 0052 00BF     		nop
 4541              	.L282:
 4542              	.LBE195:
 4543              	.LBE194:
 4544              		.loc 1 3220 2
 4545 0054 00BF     		nop
 4546 0056 FDE7     		b	.L282
 4547              	.L281:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4548              		.loc 1 3221 11
 4549 0058 7868     		ldr	r0, [r7, #4]
 4550 005a FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4551              		.loc 1 3240 11
 4552 005e 7B69     		ldr	r3, [r7, #20]
 4553 0060 0433     		adds	r3, r3, #4
 4554 0062 1846     		mov	r0, r3
 4555 0064 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4556              		.loc 1 3241 2
 4557 0068 7B69     		ldr	r3, [r7, #20]
 4558 006a DA6A     		ldr	r2, [r3, #44]
 4559 006c 124B     		ldr	r3, .L286+4
 4560 006e 1B68     		ldr	r3, [r3]
 4561 0070 9A42     		cmp	r2, r3
 4562 0072 03D9     		bls	.L283
 4563              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4564 0074 7B69     		ldr	r3, [r7, #20]
 4565 0076 DB6A     		ldr	r3, [r3, #44]
 4566 0078 0F4A     		ldr	r2, .L286+4
 4567 007a 1360     		str	r3, [r2]
 4568              	.L283:
 4569              		.loc 1 3241 2 discriminator 3
 4570 007c 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 142


 4571 007e DA6A     		ldr	r2, [r3, #44]
 4572 0080 1346     		mov	r3, r2
 4573 0082 9B00     		lsls	r3, r3, #2
 4574 0084 1344     		add	r3, r3, r2
 4575 0086 9B00     		lsls	r3, r3, #2
 4576 0088 0C4A     		ldr	r2, .L286+8
 4577 008a 1A44     		add	r2, r2, r3
 4578 008c 7B69     		ldr	r3, [r7, #20]
 4579 008e 0433     		adds	r3, r3, #4
 4580 0090 1946     		mov	r1, r3
 4581 0092 1046     		mov	r0, r2
 4582 0094 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4583              		.loc 1 3243 20 is_stmt 1
 4584 0098 7B69     		ldr	r3, [r7, #20]
 4585 009a DA6A     		ldr	r2, [r3, #44]
 4586              		.loc 1 3243 47
 4587 009c 084B     		ldr	r3, .L286+12
 4588 009e 1B68     		ldr	r3, [r3]
 4589 00a0 DB6A     		ldr	r3, [r3, #44]
 4590              		.loc 1 3243 4
 4591 00a2 9A42     		cmp	r2, r3
 4592 00a4 02D9     		bls	.L285
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4593              		.loc 1 3249 17
 4594 00a6 074B     		ldr	r3, .L286+16
 4595 00a8 0122     		movs	r2, #1
 4596 00aa 1A60     		str	r2, [r3]
 4597              	.L285:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4598              		.loc 1 3251 1
 4599 00ac 00BF     		nop
 4600 00ae 1837     		adds	r7, r7, #24
 4601              	.LCFI160:
 4602              		.cfi_def_cfa_offset 8
 4603 00b0 BD46     		mov	sp, r7
 4604              	.LCFI161:
 4605              		.cfi_def_cfa_register 13
 4606              		@ sp needed
 4607 00b2 80BD     		pop	{r7, pc}
 4608              	.L287:
 4609              		.align	2
 4610              	.L286:
 4611 00b4 00000000 		.word	uxSchedulerSuspended
 4612 00b8 00000000 		.word	uxTopReadyPriority
 4613 00bc 00000000 		.word	pxReadyTasksLists
 4614 00c0 00000000 		.word	pxCurrentTCB
 4615 00c4 00000000 		.word	xYieldPending
 4616              		.cfi_endproc
 4617              	.LFE35:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 143


 4619              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4620              		.align	1
 4621              		.global	vTaskSetTimeOutState
 4622              		.syntax unified
 4623              		.thumb
 4624              		.thumb_func
 4626              	vTaskSetTimeOutState:
 4627              	.LFB36:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4628              		.loc 1 3255 1
 4629              		.cfi_startproc
 4630              		@ args = 0, pretend = 0, frame = 16
 4631              		@ frame_needed = 1, uses_anonymous_args = 0
 4632 0000 80B5     		push	{r7, lr}
 4633              	.LCFI162:
 4634              		.cfi_def_cfa_offset 8
 4635              		.cfi_offset 7, -8
 4636              		.cfi_offset 14, -4
 4637 0002 84B0     		sub	sp, sp, #16
 4638              	.LCFI163:
 4639              		.cfi_def_cfa_offset 24
 4640 0004 00AF     		add	r7, sp, #0
 4641              	.LCFI164:
 4642              		.cfi_def_cfa_register 7
 4643 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4644              		.loc 1 3256 2
 4645 0008 7B68     		ldr	r3, [r7, #4]
 4646 000a 002B     		cmp	r3, #0
 4647 000c 0BD1     		bne	.L289
 4648              	.LBB196:
 4649              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4650              		.loc 2 195 2
 4651              		.syntax unified
 4652              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4653 000e 4FF05003 			mov r3, #80												
 4654 0012 83F31188 		msr basepri, r3											
 4655 0016 BFF36F8F 		isb														
 4656 001a BFF34F8F 		dsb														
 4657              	
 4658              	@ 0 "" 2
 4659              		.thumb
 4660              		.syntax unified
 4661 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4662              		.loc 2 203 1
 4663 0020 00BF     		nop
 4664              	.L290:
 4665              	.LBE197:
 4666              	.LBE196:
 4667              		.loc 1 3256 2
 4668 0022 00BF     		nop
 4669 0024 FDE7     		b	.L290
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 144


 4670              	.L289:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4671              		.loc 1 3257 2
 4672 0026 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4673              		.loc 1 3259 29
 4674 002a 074B     		ldr	r3, .L291
 4675 002c 1A68     		ldr	r2, [r3]
 4676 002e 7B68     		ldr	r3, [r7, #4]
 4677 0030 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4678              		.loc 1 3260 30
 4679 0032 064B     		ldr	r3, .L291+4
 4680 0034 1A68     		ldr	r2, [r3]
 4681 0036 7B68     		ldr	r3, [r7, #4]
 4682 0038 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4683              		.loc 1 3262 2
 4684 003a FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4685              		.loc 1 3263 1
 4686 003e 00BF     		nop
 4687 0040 1037     		adds	r7, r7, #16
 4688              	.LCFI165:
 4689              		.cfi_def_cfa_offset 8
 4690 0042 BD46     		mov	sp, r7
 4691              	.LCFI166:
 4692              		.cfi_def_cfa_register 13
 4693              		@ sp needed
 4694 0044 80BD     		pop	{r7, pc}
 4695              	.L292:
 4696 0046 00BF     		.align	2
 4697              	.L291:
 4698 0048 00000000 		.word	xNumOfOverflows
 4699 004c 00000000 		.word	xTickCount
 4700              		.cfi_endproc
 4701              	.LFE36:
 4703              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4704              		.align	1
 4705              		.global	vTaskInternalSetTimeOutState
 4706              		.syntax unified
 4707              		.thumb
 4708              		.thumb_func
 4710              	vTaskInternalSetTimeOutState:
 4711              	.LFB37:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4712              		.loc 1 3267 1
 4713              		.cfi_startproc
 4714              		@ args = 0, pretend = 0, frame = 8
 4715              		@ frame_needed = 1, uses_anonymous_args = 0
 4716              		@ link register save eliminated.
 4717 0000 80B4     		push	{r7}
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 145


 4718              	.LCFI167:
 4719              		.cfi_def_cfa_offset 4
 4720              		.cfi_offset 7, -4
 4721 0002 83B0     		sub	sp, sp, #12
 4722              	.LCFI168:
 4723              		.cfi_def_cfa_offset 16
 4724 0004 00AF     		add	r7, sp, #0
 4725              	.LCFI169:
 4726              		.cfi_def_cfa_register 7
 4727 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4728              		.loc 1 3269 28
 4729 0008 064B     		ldr	r3, .L294
 4730 000a 1A68     		ldr	r2, [r3]
 4731 000c 7B68     		ldr	r3, [r7, #4]
 4732 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4733              		.loc 1 3270 29
 4734 0010 054B     		ldr	r3, .L294+4
 4735 0012 1A68     		ldr	r2, [r3]
 4736 0014 7B68     		ldr	r3, [r7, #4]
 4737 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4738              		.loc 1 3271 1
 4739 0018 00BF     		nop
 4740 001a 0C37     		adds	r7, r7, #12
 4741              	.LCFI170:
 4742              		.cfi_def_cfa_offset 4
 4743 001c BD46     		mov	sp, r7
 4744              	.LCFI171:
 4745              		.cfi_def_cfa_register 13
 4746              		@ sp needed
 4747 001e 5DF8047B 		ldr	r7, [sp], #4
 4748              	.LCFI172:
 4749              		.cfi_restore 7
 4750              		.cfi_def_cfa_offset 0
 4751 0022 7047     		bx	lr
 4752              	.L295:
 4753              		.align	2
 4754              	.L294:
 4755 0024 00000000 		.word	xNumOfOverflows
 4756 0028 00000000 		.word	xTickCount
 4757              		.cfi_endproc
 4758              	.LFE37:
 4760              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4761              		.align	1
 4762              		.global	xTaskCheckForTimeOut
 4763              		.syntax unified
 4764              		.thumb
 4765              		.thumb_func
 4767              	xTaskCheckForTimeOut:
 4768              	.LFB38:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 146


 4769              		.loc 1 3275 1
 4770              		.cfi_startproc
 4771              		@ args = 0, pretend = 0, frame = 32
 4772              		@ frame_needed = 1, uses_anonymous_args = 0
 4773 0000 80B5     		push	{r7, lr}
 4774              	.LCFI173:
 4775              		.cfi_def_cfa_offset 8
 4776              		.cfi_offset 7, -8
 4777              		.cfi_offset 14, -4
 4778 0002 88B0     		sub	sp, sp, #32
 4779              	.LCFI174:
 4780              		.cfi_def_cfa_offset 40
 4781 0004 00AF     		add	r7, sp, #0
 4782              	.LCFI175:
 4783              		.cfi_def_cfa_register 7
 4784 0006 7860     		str	r0, [r7, #4]
 4785 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4786              		.loc 1 3278 2
 4787 000a 7B68     		ldr	r3, [r7, #4]
 4788 000c 002B     		cmp	r3, #0
 4789 000e 0BD1     		bne	.L297
 4790              	.LBB198:
 4791              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4792              		.loc 2 195 2
 4793              		.syntax unified
 4794              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4795 0010 4FF05003 			mov r3, #80												
 4796 0014 83F31188 		msr basepri, r3											
 4797 0018 BFF36F8F 		isb														
 4798 001c BFF34F8F 		dsb														
 4799              	
 4800              	@ 0 "" 2
 4801              		.thumb
 4802              		.syntax unified
 4803 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4804              		.loc 2 203 1
 4805 0022 00BF     		nop
 4806              	.L298:
 4807              	.LBE199:
 4808              	.LBE198:
 4809              		.loc 1 3278 2
 4810 0024 00BF     		nop
 4811 0026 FDE7     		b	.L298
 4812              	.L297:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4813              		.loc 1 3279 2
 4814 0028 3B68     		ldr	r3, [r7]
 4815 002a 002B     		cmp	r3, #0
 4816 002c 0BD1     		bne	.L299
 4817              	.LBB200:
 4818              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 147


 4819              		.loc 2 195 2
 4820              		.syntax unified
 4821              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4822 002e 4FF05003 			mov r3, #80												
 4823 0032 83F31188 		msr basepri, r3											
 4824 0036 BFF36F8F 		isb														
 4825 003a BFF34F8F 		dsb														
 4826              	
 4827              	@ 0 "" 2
 4828              		.thumb
 4829              		.syntax unified
 4830 003e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4831              		.loc 2 203 1
 4832 0040 00BF     		nop
 4833              	.L300:
 4834              	.LBE201:
 4835              	.LBE200:
 4836              		.loc 1 3279 2
 4837 0042 00BF     		nop
 4838 0044 FDE7     		b	.L300
 4839              	.L299:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4840              		.loc 1 3281 2
 4841 0046 FFF7FEFF 		bl	vPortEnterCritical
 4842              	.LBB202:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 4843              		.loc 1 3284 20
 4844 004a 1D4B     		ldr	r3, .L306
 4845 004c 1B68     		ldr	r3, [r3]
 4846 004e BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4847              		.loc 1 3285 62
 4848 0050 7B68     		ldr	r3, [r7, #4]
 4849 0052 5B68     		ldr	r3, [r3, #4]
 4850              		.loc 1 3285 20
 4851 0054 BA69     		ldr	r2, [r7, #24]
 4852 0056 D31A     		subs	r3, r2, r3
 4853 0058 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 4854              		.loc 1 3299 8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 148


 4855 005a 3B68     		ldr	r3, [r7]
 4856 005c 1B68     		ldr	r3, [r3]
 4857              		.loc 1 3299 6
 4858 005e B3F1FF3F 		cmp	r3, #-1
 4859 0062 02D1     		bne	.L301
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 4860              		.loc 1 3304 13
 4861 0064 0023     		movs	r3, #0
 4862 0066 FB61     		str	r3, [r7, #28]
 4863 0068 23E0     		b	.L302
 4864              	.L301:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 4865              		.loc 1 3309 37
 4866 006a 7B68     		ldr	r3, [r7, #4]
 4867 006c 1A68     		ldr	r2, [r3]
 4868              		.loc 1 3309 25
 4869 006e 154B     		ldr	r3, .L306+4
 4870 0070 1B68     		ldr	r3, [r3]
 4871              		.loc 1 3309 5
 4872 0072 9A42     		cmp	r2, r3
 4873 0074 07D0     		beq	.L303
 4874              		.loc 1 3309 89 discriminator 1
 4875 0076 7B68     		ldr	r3, [r7, #4]
 4876 0078 5B68     		ldr	r3, [r3, #4]
 4877              		.loc 1 3309 56 discriminator 1
 4878 007a BA69     		ldr	r2, [r7, #24]
 4879 007c 9A42     		cmp	r2, r3
 4880 007e 02D3     		bcc	.L303
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4881              		.loc 1 3316 12
 4882 0080 0123     		movs	r3, #1
 4883 0082 FB61     		str	r3, [r7, #28]
 4884 0084 15E0     		b	.L302
 4885              	.L303:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 4886              		.loc 1 3318 27
 4887 0086 3B68     		ldr	r3, [r7]
 4888 0088 1B68     		ldr	r3, [r3]
 4889              		.loc 1 3318 10
 4890 008a 7A69     		ldr	r2, [r7, #20]
 4891 008c 9A42     		cmp	r2, r3
 4892 008e 0BD2     		bcs	.L304
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 149


3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 4893              		.loc 1 3321 4
 4894 0090 3B68     		ldr	r3, [r7]
 4895 0092 1A68     		ldr	r2, [r3]
 4896              		.loc 1 3321 19
 4897 0094 7B69     		ldr	r3, [r7, #20]
 4898 0096 D21A     		subs	r2, r2, r3
 4899 0098 3B68     		ldr	r3, [r7]
 4900 009a 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4901              		.loc 1 3322 4
 4902 009c 7868     		ldr	r0, [r7, #4]
 4903 009e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4904              		.loc 1 3323 12
 4905 00a2 0023     		movs	r3, #0
 4906 00a4 FB61     		str	r3, [r7, #28]
 4907 00a6 04E0     		b	.L302
 4908              	.L304:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 4909              		.loc 1 3327 19
 4910 00a8 3B68     		ldr	r3, [r7]
 4911 00aa 0022     		movs	r2, #0
 4912 00ac 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4913              		.loc 1 3328 12
 4914 00ae 0123     		movs	r3, #1
 4915 00b0 FB61     		str	r3, [r7, #28]
 4916              	.L302:
 4917              	.LBE202:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4918              		.loc 1 3331 2
 4919 00b2 FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4920              		.loc 1 3333 9
 4921 00b6 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4922              		.loc 1 3334 1
 4923 00b8 1846     		mov	r0, r3
 4924 00ba 2037     		adds	r7, r7, #32
 4925              	.LCFI176:
 4926              		.cfi_def_cfa_offset 8
 4927 00bc BD46     		mov	sp, r7
 4928              	.LCFI177:
 4929              		.cfi_def_cfa_register 13
 4930              		@ sp needed
 4931 00be 80BD     		pop	{r7, pc}
 4932              	.L307:
 4933              		.align	2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 150


 4934              	.L306:
 4935 00c0 00000000 		.word	xTickCount
 4936 00c4 00000000 		.word	xNumOfOverflows
 4937              		.cfi_endproc
 4938              	.LFE38:
 4940              		.section	.text.vTaskMissedYield,"ax",%progbits
 4941              		.align	1
 4942              		.global	vTaskMissedYield
 4943              		.syntax unified
 4944              		.thumb
 4945              		.thumb_func
 4947              	vTaskMissedYield:
 4948              	.LFB39:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4949              		.loc 1 3338 1
 4950              		.cfi_startproc
 4951              		@ args = 0, pretend = 0, frame = 0
 4952              		@ frame_needed = 1, uses_anonymous_args = 0
 4953              		@ link register save eliminated.
 4954 0000 80B4     		push	{r7}
 4955              	.LCFI178:
 4956              		.cfi_def_cfa_offset 4
 4957              		.cfi_offset 7, -4
 4958 0002 00AF     		add	r7, sp, #0
 4959              	.LCFI179:
 4960              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4961              		.loc 1 3339 16
 4962 0004 034B     		ldr	r3, .L309
 4963 0006 0122     		movs	r2, #1
 4964 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4965              		.loc 1 3340 1
 4966 000a 00BF     		nop
 4967 000c BD46     		mov	sp, r7
 4968              	.LCFI180:
 4969              		.cfi_def_cfa_register 13
 4970              		@ sp needed
 4971 000e 5DF8047B 		ldr	r7, [sp], #4
 4972              	.LCFI181:
 4973              		.cfi_restore 7
 4974              		.cfi_def_cfa_offset 0
 4975 0012 7047     		bx	lr
 4976              	.L310:
 4977              		.align	2
 4978              	.L309:
 4979 0014 00000000 		.word	xYieldPending
 4980              		.cfi_endproc
 4981              	.LFE39:
 4983              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4984              		.align	1
 4985              		.global	uxTaskGetTaskNumber
 4986              		.syntax unified
 4987              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 151


 4988              		.thumb_func
 4990              	uxTaskGetTaskNumber:
 4991              	.LFB40:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4992              		.loc 1 3346 2
 4993              		.cfi_startproc
 4994              		@ args = 0, pretend = 0, frame = 16
 4995              		@ frame_needed = 1, uses_anonymous_args = 0
 4996              		@ link register save eliminated.
 4997 0000 80B4     		push	{r7}
 4998              	.LCFI182:
 4999              		.cfi_def_cfa_offset 4
 5000              		.cfi_offset 7, -4
 5001 0002 85B0     		sub	sp, sp, #20
 5002              	.LCFI183:
 5003              		.cfi_def_cfa_offset 24
 5004 0004 00AF     		add	r7, sp, #0
 5005              	.LCFI184:
 5006              		.cfi_def_cfa_register 7
 5007 0006 7860     		str	r0, [r7, #4]
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5008              		.loc 1 3350 5
 5009 0008 7B68     		ldr	r3, [r7, #4]
 5010 000a 002B     		cmp	r3, #0
 5011 000c 05D0     		beq	.L312
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5012              		.loc 1 3352 10
 5013 000e 7B68     		ldr	r3, [r7, #4]
 5014 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5015              		.loc 1 3353 13
 5016 0012 BB68     		ldr	r3, [r7, #8]
 5017 0014 9B6C     		ldr	r3, [r3, #72]
 5018 0016 FB60     		str	r3, [r7, #12]
 5019 0018 01E0     		b	.L313
 5020              	.L312:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5021              		.loc 1 3357 13
 5022 001a 0023     		movs	r3, #0
 5023 001c FB60     		str	r3, [r7, #12]
 5024              	.L313:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5025              		.loc 1 3360 10
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 152


 5026 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5027              		.loc 1 3361 2
 5028 0020 1846     		mov	r0, r3
 5029 0022 1437     		adds	r7, r7, #20
 5030              	.LCFI185:
 5031              		.cfi_def_cfa_offset 4
 5032 0024 BD46     		mov	sp, r7
 5033              	.LCFI186:
 5034              		.cfi_def_cfa_register 13
 5035              		@ sp needed
 5036 0026 5DF8047B 		ldr	r7, [sp], #4
 5037              	.LCFI187:
 5038              		.cfi_restore 7
 5039              		.cfi_def_cfa_offset 0
 5040 002a 7047     		bx	lr
 5041              		.cfi_endproc
 5042              	.LFE40:
 5044              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5045              		.align	1
 5046              		.global	vTaskSetTaskNumber
 5047              		.syntax unified
 5048              		.thumb
 5049              		.thumb_func
 5051              	vTaskSetTaskNumber:
 5052              	.LFB41:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5053              		.loc 1 3369 2
 5054              		.cfi_startproc
 5055              		@ args = 0, pretend = 0, frame = 16
 5056              		@ frame_needed = 1, uses_anonymous_args = 0
 5057              		@ link register save eliminated.
 5058 0000 80B4     		push	{r7}
 5059              	.LCFI188:
 5060              		.cfi_def_cfa_offset 4
 5061              		.cfi_offset 7, -4
 5062 0002 85B0     		sub	sp, sp, #20
 5063              	.LCFI189:
 5064              		.cfi_def_cfa_offset 24
 5065 0004 00AF     		add	r7, sp, #0
 5066              	.LCFI190:
 5067              		.cfi_def_cfa_register 7
 5068 0006 7860     		str	r0, [r7, #4]
 5069 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5070              		.loc 1 3372 5
 5071 000a 7B68     		ldr	r3, [r7, #4]
 5072 000c 002B     		cmp	r3, #0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 153


 5073 000e 04D0     		beq	.L317
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5074              		.loc 1 3374 10
 5075 0010 7B68     		ldr	r3, [r7, #4]
 5076 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5077              		.loc 1 3375 24
 5078 0014 FB68     		ldr	r3, [r7, #12]
 5079 0016 3A68     		ldr	r2, [r7]
 5080 0018 9A64     		str	r2, [r3, #72]
 5081              	.L317:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5082              		.loc 1 3377 2
 5083 001a 00BF     		nop
 5084 001c 1437     		adds	r7, r7, #20
 5085              	.LCFI191:
 5086              		.cfi_def_cfa_offset 4
 5087 001e BD46     		mov	sp, r7
 5088              	.LCFI192:
 5089              		.cfi_def_cfa_register 13
 5090              		@ sp needed
 5091 0020 5DF8047B 		ldr	r7, [sp], #4
 5092              	.LCFI193:
 5093              		.cfi_restore 7
 5094              		.cfi_def_cfa_offset 0
 5095 0024 7047     		bx	lr
 5096              		.cfi_endproc
 5097              	.LFE41:
 5099              		.section	.text.prvIdleTask,"ax",%progbits
 5100              		.align	1
 5101              		.syntax unified
 5102              		.thumb
 5103              		.thumb_func
 5105              	prvIdleTask:
 5106              	.LFB42:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5107              		.loc 1 3393 1
 5108              		.cfi_startproc
 5109              		@ args = 0, pretend = 0, frame = 8
 5110              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 154


 5111 0000 80B5     		push	{r7, lr}
 5112              	.LCFI194:
 5113              		.cfi_def_cfa_offset 8
 5114              		.cfi_offset 7, -8
 5115              		.cfi_offset 14, -4
 5116 0002 82B0     		sub	sp, sp, #8
 5117              	.LCFI195:
 5118              		.cfi_def_cfa_offset 16
 5119 0004 00AF     		add	r7, sp, #0
 5120              	.LCFI196:
 5121              		.cfi_def_cfa_register 7
 5122 0006 7860     		str	r0, [r7, #4]
 5123              	.L320:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5124              		.loc 1 3409 3
 5125 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5126              		.loc 1 3432 8
 5127 000c 074B     		ldr	r3, .L321
 5128 000e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 155


 5129              		.loc 1 3432 6
 5130 0010 012B     		cmp	r3, #1
 5131 0012 07D9     		bls	.L319
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5132              		.loc 1 3434 5
 5133 0014 064B     		ldr	r3, .L321+4
 5134 0016 4FF08052 		mov	r2, #268435456
 5135 001a 1A60     		str	r2, [r3]
 5136              		.syntax unified
 5137              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5138 001c BFF34F8F 		dsb
 5139              	@ 0 "" 2
 5140              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5141 0020 BFF36F8F 		isb
 5142              	@ 0 "" 2
 5143              		.thumb
 5144              		.syntax unified
 5145              	.L319:
 5146              	.LBB203:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
 5147              		.loc 1 3452 4
 5148 0024 FFF7FEFF 		bl	vApplicationIdleHook
 5149              	.LBE203:
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5150              		.loc 1 3409 3
 5151 0028 EEE7     		b	.L320
 5152              	.L322:
 5153 002a 00BF     		.align	2
 5154              	.L321:
 5155 002c 00000000 		.word	pxReadyTasksLists
 5156 0030 04ED00E0 		.word	-536810236
 5157              		.cfi_endproc
 5158              	.LFE42:
 5160              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5161              		.align	1
 5162              		.syntax unified
 5163              		.thumb
 5164              		.thumb_func
 5166              	prvInitialiseTaskLists:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 156


 5167              	.LFB43:
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 157


3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 158


3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5168              		.loc 1 3608 1
 5169              		.cfi_startproc
 5170              		@ args = 0, pretend = 0, frame = 8
 5171              		@ frame_needed = 1, uses_anonymous_args = 0
 5172 0000 80B5     		push	{r7, lr}
 5173              	.LCFI197:
 5174              		.cfi_def_cfa_offset 8
 5175              		.cfi_offset 7, -8
 5176              		.cfi_offset 14, -4
 5177 0002 82B0     		sub	sp, sp, #8
 5178              	.LCFI198:
 5179              		.cfi_def_cfa_offset 16
 5180 0004 00AF     		add	r7, sp, #0
 5181              	.LCFI199:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 159


 5182              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5183              		.loc 1 3611 18
 5184 0006 0023     		movs	r3, #0
 5185 0008 7B60     		str	r3, [r7, #4]
 5186              		.loc 1 3611 2
 5187 000a 0CE0     		b	.L324
 5188              	.L325:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5189              		.loc 1 3613 3
 5190 000c 7A68     		ldr	r2, [r7, #4]
 5191 000e 1346     		mov	r3, r2
 5192 0010 9B00     		lsls	r3, r3, #2
 5193 0012 1344     		add	r3, r3, r2
 5194 0014 9B00     		lsls	r3, r3, #2
 5195 0016 124A     		ldr	r2, .L326
 5196 0018 1344     		add	r3, r3, r2
 5197 001a 1846     		mov	r0, r3
 5198 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5199              		.loc 1 3611 101 discriminator 3
 5200 0020 7B68     		ldr	r3, [r7, #4]
 5201 0022 0133     		adds	r3, r3, #1
 5202 0024 7B60     		str	r3, [r7, #4]
 5203              	.L324:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5204              		.loc 1 3611 51 discriminator 1
 5205 0026 7B68     		ldr	r3, [r7, #4]
 5206 0028 372B     		cmp	r3, #55
 5207 002a EFD9     		bls	.L325
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5208              		.loc 1 3616 2
 5209 002c 0D48     		ldr	r0, .L326+4
 5210 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5211              		.loc 1 3617 2
 5212 0032 0D48     		ldr	r0, .L326+8
 5213 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5214              		.loc 1 3618 2
 5215 0038 0C48     		ldr	r0, .L326+12
 5216 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5217              		.loc 1 3622 3
 5218 003e 0C48     		ldr	r0, .L326+16
 5219 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 160


3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5220              		.loc 1 3628 3
 5221 0044 0B48     		ldr	r0, .L326+20
 5222 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5223              		.loc 1 3634 20
 5224 004a 0B4B     		ldr	r3, .L326+24
 5225 004c 054A     		ldr	r2, .L326+4
 5226 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5227              		.loc 1 3635 28
 5228 0050 0A4B     		ldr	r3, .L326+28
 5229 0052 054A     		ldr	r2, .L326+8
 5230 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5231              		.loc 1 3636 1
 5232 0056 00BF     		nop
 5233 0058 0837     		adds	r7, r7, #8
 5234              	.LCFI200:
 5235              		.cfi_def_cfa_offset 8
 5236 005a BD46     		mov	sp, r7
 5237              	.LCFI201:
 5238              		.cfi_def_cfa_register 13
 5239              		@ sp needed
 5240 005c 80BD     		pop	{r7, pc}
 5241              	.L327:
 5242 005e 00BF     		.align	2
 5243              	.L326:
 5244 0060 00000000 		.word	pxReadyTasksLists
 5245 0064 00000000 		.word	xDelayedTaskList1
 5246 0068 00000000 		.word	xDelayedTaskList2
 5247 006c 00000000 		.word	xPendingReadyList
 5248 0070 00000000 		.word	xTasksWaitingTermination
 5249 0074 00000000 		.word	xSuspendedTaskList
 5250 0078 00000000 		.word	pxDelayedTaskList
 5251 007c 00000000 		.word	pxOverflowDelayedTaskList
 5252              		.cfi_endproc
 5253              	.LFE43:
 5255              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5256              		.align	1
 5257              		.syntax unified
 5258              		.thumb
 5259              		.thumb_func
 5261              	prvCheckTasksWaitingTermination:
 5262              	.LFB44:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5263              		.loc 1 3640 1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 161


 5264              		.cfi_startproc
 5265              		@ args = 0, pretend = 0, frame = 8
 5266              		@ frame_needed = 1, uses_anonymous_args = 0
 5267 0000 80B5     		push	{r7, lr}
 5268              	.LCFI202:
 5269              		.cfi_def_cfa_offset 8
 5270              		.cfi_offset 7, -8
 5271              		.cfi_offset 14, -4
 5272 0002 82B0     		sub	sp, sp, #8
 5273              	.LCFI203:
 5274              		.cfi_def_cfa_offset 16
 5275 0004 00AF     		add	r7, sp, #0
 5276              	.LCFI204:
 5277              		.cfi_def_cfa_register 7
 5278              	.LBB204:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5279              		.loc 1 3650 8
 5280 0006 19E0     		b	.L329
 5281              	.L330:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5282              		.loc 1 3652 4
 5283 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5284              		.loc 1 3654 13
 5285 000c 104B     		ldr	r3, .L331
 5286 000e DB68     		ldr	r3, [r3, #12]
 5287              		.loc 1 3654 11
 5288 0010 DB68     		ldr	r3, [r3, #12]
 5289 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5290              		.loc 1 3655 14
 5291 0014 7B68     		ldr	r3, [r7, #4]
 5292 0016 0433     		adds	r3, r3, #4
 5293 0018 1846     		mov	r0, r3
 5294 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5295              		.loc 1 3656 5
 5296 001e 0D4B     		ldr	r3, .L331+4
 5297 0020 1B68     		ldr	r3, [r3]
 5298 0022 013B     		subs	r3, r3, #1
 5299 0024 0B4A     		ldr	r2, .L331+4
 5300 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5301              		.loc 1 3657 5
 5302 0028 0B4B     		ldr	r3, .L331+8
 5303 002a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 162


 5304 002c 013B     		subs	r3, r3, #1
 5305 002e 0A4A     		ldr	r2, .L331+8
 5306 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5307              		.loc 1 3659 4
 5308 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5309              		.loc 1 3661 4
 5310 0036 7868     		ldr	r0, [r7, #4]
 5311 0038 FFF7FEFF 		bl	prvDeleteTCB
 5312              	.L329:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5313              		.loc 1 3650 39
 5314 003c 064B     		ldr	r3, .L331+8
 5315 003e 1B68     		ldr	r3, [r3]
 5316 0040 002B     		cmp	r3, #0
 5317 0042 E1D1     		bne	.L330
 5318              	.LBE204:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5319              		.loc 1 3665 1
 5320 0044 00BF     		nop
 5321 0046 00BF     		nop
 5322 0048 0837     		adds	r7, r7, #8
 5323              	.LCFI205:
 5324              		.cfi_def_cfa_offset 8
 5325 004a BD46     		mov	sp, r7
 5326              	.LCFI206:
 5327              		.cfi_def_cfa_register 13
 5328              		@ sp needed
 5329 004c 80BD     		pop	{r7, pc}
 5330              	.L332:
 5331 004e 00BF     		.align	2
 5332              	.L331:
 5333 0050 00000000 		.word	xTasksWaitingTermination
 5334 0054 00000000 		.word	uxCurrentNumberOfTasks
 5335 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5336              		.cfi_endproc
 5337              	.LFE44:
 5339              		.section	.text.vTaskGetInfo,"ax",%progbits
 5340              		.align	1
 5341              		.global	vTaskGetInfo
 5342              		.syntax unified
 5343              		.thumb
 5344              		.thumb_func
 5346              	vTaskGetInfo:
 5347              	.LFB45:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 163


 5348              		.loc 1 3671 2
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 24
 5351              		@ frame_needed = 1, uses_anonymous_args = 0
 5352 0000 80B5     		push	{r7, lr}
 5353              	.LCFI207:
 5354              		.cfi_def_cfa_offset 8
 5355              		.cfi_offset 7, -8
 5356              		.cfi_offset 14, -4
 5357 0002 86B0     		sub	sp, sp, #24
 5358              	.LCFI208:
 5359              		.cfi_def_cfa_offset 32
 5360 0004 00AF     		add	r7, sp, #0
 5361              	.LCFI209:
 5362              		.cfi_def_cfa_register 7
 5363 0006 F860     		str	r0, [r7, #12]
 5364 0008 B960     		str	r1, [r7, #8]
 5365 000a 7A60     		str	r2, [r7, #4]
 5366 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5367              		.loc 1 3675 11
 5368 000e FB68     		ldr	r3, [r7, #12]
 5369 0010 002B     		cmp	r3, #0
 5370 0012 02D1     		bne	.L334
 5371              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5372 0014 2C4B     		ldr	r3, .L343
 5373 0016 1B68     		ldr	r3, [r3]
 5374 0018 00E0     		b	.L335
 5375              	.L334:
 5376              		.loc 1 3675 11 discriminator 2
 5377 001a FB68     		ldr	r3, [r7, #12]
 5378              	.L335:
 5379              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5380 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5381              		.loc 1 3677 25
 5382 001e BB68     		ldr	r3, [r7, #8]
 5383 0020 7A69     		ldr	r2, [r7, #20]
 5384 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5385              		.loc 1 3678 47
 5386 0024 7B69     		ldr	r3, [r7, #20]
 5387 0026 03F13402 		add	r2, r3, #52
 5388              		.loc 1 3678 28
 5389 002a BB68     		ldr	r3, [r7, #8]
 5390 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5391              		.loc 1 3679 42
 5392 002e 7B69     		ldr	r3, [r7, #20]
 5393 0030 DA6A     		ldr	r2, [r3, #44]
 5394              		.loc 1 3679 35
 5395 0032 BB68     		ldr	r3, [r7, #8]
 5396 0034 1A61     		str	r2, [r3, #16]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 164


3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5397              		.loc 1 3680 36
 5398 0036 7B69     		ldr	r3, [r7, #20]
 5399 0038 1A6B     		ldr	r2, [r3, #48]
 5400              		.loc 1 3680 29
 5401 003a BB68     		ldr	r3, [r7, #8]
 5402 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5403              		.loc 1 3681 36
 5404 003e 7B69     		ldr	r3, [r7, #20]
 5405 0040 5A6C     		ldr	r2, [r3, #68]
 5406              		.loc 1 3681 29
 5407 0042 BB68     		ldr	r3, [r7, #8]
 5408 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5409              		.loc 1 3685 40
 5410 0046 7B69     		ldr	r3, [r7, #20]
 5411 0048 DA6C     		ldr	r2, [r3, #76]
 5412              		.loc 1 3685 33
 5413 004a BB68     		ldr	r3, [r7, #8]
 5414 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5415              		.loc 1 3699 35
 5416 004e BB68     		ldr	r3, [r7, #8]
 5417 0050 0022     		movs	r2, #0
 5418 0052 9A61     		str	r2, [r3, #24]
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5419              		.loc 1 3706 5
 5420 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5421 0056 052B     		cmp	r3, #5
 5422 0058 1AD0     		beq	.L336
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5423              		.loc 1 3708 14
 5424 005a 1B4B     		ldr	r3, .L343
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 165


 5425 005c 1B68     		ldr	r3, [r3]
 5426              		.loc 1 3708 6
 5427 005e 7A69     		ldr	r2, [r7, #20]
 5428 0060 9A42     		cmp	r2, r3
 5429 0062 03D1     		bne	.L337
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5430              		.loc 1 3710 33
 5431 0064 BB68     		ldr	r3, [r7, #8]
 5432 0066 0022     		movs	r2, #0
 5433 0068 1A73     		strb	r2, [r3, #12]
 5434 006a 18E0     		b	.L338
 5435              	.L337:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5436              		.loc 1 3714 33
 5437 006c BB68     		ldr	r3, [r7, #8]
 5438 006e FA78     		ldrb	r2, [r7, #3]
 5439 0070 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5440              		.loc 1 3721 8
 5441 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5442 0074 032B     		cmp	r3, #3
 5443 0076 12D1     		bne	.L338
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5444              		.loc 1 3723 7
 5445 0078 FFF7FEFF 		bl	vTaskSuspendAll
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5446              		.loc 1 3725 12
 5447 007c 7B69     		ldr	r3, [r7, #20]
 5448 007e 9B6A     		ldr	r3, [r3, #40]
 5449              		.loc 1 3725 10
 5450 0080 002B     		cmp	r3, #0
 5451 0082 02D0     		beq	.L339
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5452              		.loc 1 3727 37
 5453 0084 BB68     		ldr	r3, [r7, #8]
 5454 0086 0222     		movs	r2, #2
 5455 0088 1A73     		strb	r2, [r3, #12]
 5456              	.L339:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5457              		.loc 1 3730 16
 5458 008a FFF7FEFF 		bl	xTaskResumeAll
 5459 008e 06E0     		b	.L338
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 166


 5460              	.L336:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5461              		.loc 1 3738 34
 5462 0090 7869     		ldr	r0, [r7, #20]
 5463 0092 FFF7FEFF 		bl	eTaskGetState
 5464 0096 0346     		mov	r3, r0
 5465 0098 1A46     		mov	r2, r3
 5466              		.loc 1 3738 32 discriminator 1
 5467 009a BB68     		ldr	r3, [r7, #8]
 5468 009c 1A73     		strb	r2, [r3, #12]
 5469              	.L338:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5470              		.loc 1 3743 5
 5471 009e 7B68     		ldr	r3, [r7, #4]
 5472 00a0 002B     		cmp	r3, #0
 5473 00a2 09D0     		beq	.L340
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5474              		.loc 1 3751 89
 5475 00a4 7B69     		ldr	r3, [r7, #20]
 5476 00a6 1B6B     		ldr	r3, [r3, #48]
 5477              		.loc 1 3751 42
 5478 00a8 1846     		mov	r0, r3
 5479 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5480 00ae 0346     		mov	r3, r0
 5481 00b0 1A46     		mov	r2, r3
 5482              		.loc 1 3751 40 discriminator 1
 5483 00b2 BB68     		ldr	r3, [r7, #8]
 5484 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5485              		.loc 1 3759 2
 5486 00b6 02E0     		b	.L342
 5487              	.L340:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 167


3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5488              		.loc 1 3757 39
 5489 00b8 BB68     		ldr	r3, [r7, #8]
 5490 00ba 0022     		movs	r2, #0
 5491 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 5492              	.L342:
 5493              		.loc 1 3759 2
 5494 00be 00BF     		nop
 5495 00c0 1837     		adds	r7, r7, #24
 5496              	.LCFI210:
 5497              		.cfi_def_cfa_offset 8
 5498 00c2 BD46     		mov	sp, r7
 5499              	.LCFI211:
 5500              		.cfi_def_cfa_register 13
 5501              		@ sp needed
 5502 00c4 80BD     		pop	{r7, pc}
 5503              	.L344:
 5504 00c6 00BF     		.align	2
 5505              	.L343:
 5506 00c8 00000000 		.word	pxCurrentTCB
 5507              		.cfi_endproc
 5508              	.LFE45:
 5510              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5511              		.align	1
 5512              		.syntax unified
 5513              		.thumb
 5514              		.thumb_func
 5516              	prvListTasksWithinSingleList:
 5517              	.LFB46:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5518              		.loc 1 3767 2
 5519              		.cfi_startproc
 5520              		@ args = 0, pretend = 0, frame = 40
 5521              		@ frame_needed = 1, uses_anonymous_args = 0
 5522 0000 80B5     		push	{r7, lr}
 5523              	.LCFI212:
 5524              		.cfi_def_cfa_offset 8
 5525              		.cfi_offset 7, -8
 5526              		.cfi_offset 14, -4
 5527 0002 8AB0     		sub	sp, sp, #40
 5528              	.LCFI213:
 5529              		.cfi_def_cfa_offset 48
 5530 0004 00AF     		add	r7, sp, #0
 5531              	.LCFI214:
 5532              		.cfi_def_cfa_register 7
 5533 0006 F860     		str	r0, [r7, #12]
 5534 0008 B960     		str	r1, [r7, #8]
 5535 000a 1346     		mov	r3, r2
 5536 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 168


3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5537              		.loc 1 3769 14
 5538 000e 0023     		movs	r3, #0
 5539 0010 7B62     		str	r3, [r7, #36]
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5540              		.loc 1 3771 7
 5541 0012 BB68     		ldr	r3, [r7, #8]
 5542 0014 1B68     		ldr	r3, [r3]
 5543              		.loc 1 3771 5
 5544 0016 002B     		cmp	r3, #0
 5545 0018 3FD0     		beq	.L346
 5546              	.LBB205:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5547              		.loc 1 3773 4
 5548 001a BB68     		ldr	r3, [r7, #8]
 5549 001c 3B62     		str	r3, [r7, #32]
 5550 001e 3B6A     		ldr	r3, [r7, #32]
 5551 0020 5B68     		ldr	r3, [r3, #4]
 5552 0022 5A68     		ldr	r2, [r3, #4]
 5553 0024 3B6A     		ldr	r3, [r7, #32]
 5554 0026 5A60     		str	r2, [r3, #4]
 5555 0028 3B6A     		ldr	r3, [r7, #32]
 5556 002a 5A68     		ldr	r2, [r3, #4]
 5557 002c 3B6A     		ldr	r3, [r7, #32]
 5558 002e 0833     		adds	r3, r3, #8
 5559 0030 9A42     		cmp	r2, r3
 5560 0032 04D1     		bne	.L347
 5561              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5562 0034 3B6A     		ldr	r3, [r7, #32]
 5563 0036 5B68     		ldr	r3, [r3, #4]
 5564 0038 5A68     		ldr	r2, [r3, #4]
 5565 003a 3B6A     		ldr	r3, [r7, #32]
 5566 003c 5A60     		str	r2, [r3, #4]
 5567              	.L347:
 5568              		.loc 1 3773 4 discriminator 3
 5569 003e 3B6A     		ldr	r3, [r7, #32]
 5570 0040 5B68     		ldr	r3, [r3, #4]
 5571 0042 DB68     		ldr	r3, [r3, #12]
 5572 0044 FB61     		str	r3, [r7, #28]
 5573              	.L349:
 5574              	.LBE205:
 5575              	.LBB206:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5576              		.loc 1 3781 5 is_stmt 1
 5577 0046 BB68     		ldr	r3, [r7, #8]
 5578 0048 BB61     		str	r3, [r7, #24]
 5579 004a BB69     		ldr	r3, [r7, #24]
 5580 004c 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 169


 5581 004e 5A68     		ldr	r2, [r3, #4]
 5582 0050 BB69     		ldr	r3, [r7, #24]
 5583 0052 5A60     		str	r2, [r3, #4]
 5584 0054 BB69     		ldr	r3, [r7, #24]
 5585 0056 5A68     		ldr	r2, [r3, #4]
 5586 0058 BB69     		ldr	r3, [r7, #24]
 5587 005a 0833     		adds	r3, r3, #8
 5588 005c 9A42     		cmp	r2, r3
 5589 005e 04D1     		bne	.L348
 5590              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5591 0060 BB69     		ldr	r3, [r7, #24]
 5592 0062 5B68     		ldr	r3, [r3, #4]
 5593 0064 5A68     		ldr	r2, [r3, #4]
 5594 0066 BB69     		ldr	r3, [r7, #24]
 5595 0068 5A60     		str	r2, [r3, #4]
 5596              	.L348:
 5597              		.loc 1 3781 5 discriminator 3
 5598 006a BB69     		ldr	r3, [r7, #24]
 5599 006c 5B68     		ldr	r3, [r3, #4]
 5600 006e DB68     		ldr	r3, [r3, #12]
 5601 0070 7B61     		str	r3, [r7, #20]
 5602              	.LBE206:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 5603              		.loc 1 3782 67 is_stmt 1
 5604 0072 7A6A     		ldr	r2, [r7, #36]
 5605 0074 1346     		mov	r3, r2
 5606 0076 DB00     		lsls	r3, r3, #3
 5607 0078 1344     		add	r3, r3, r2
 5608 007a 9B00     		lsls	r3, r3, #2
 5609 007c 1A46     		mov	r2, r3
 5610              		.loc 1 3782 5
 5611 007e FB68     		ldr	r3, [r7, #12]
 5612 0080 9918     		adds	r1, r3, r2
 5613 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5614 0084 0122     		movs	r2, #1
 5615 0086 7869     		ldr	r0, [r7, #20]
 5616 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 5617              		.loc 1 3783 11
 5618 008c 7B6A     		ldr	r3, [r7, #36]
 5619 008e 0133     		adds	r3, r3, #1
 5620 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 5621              		.loc 1 3784 23
 5622 0092 7A69     		ldr	r2, [r7, #20]
 5623 0094 FB69     		ldr	r3, [r7, #28]
 5624 0096 9A42     		cmp	r2, r3
 5625 0098 D5D1     		bne	.L349
 5626              	.L346:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 5627              		.loc 1 3791 10
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 170


 5628 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5629              		.loc 1 3792 2
 5630 009c 1846     		mov	r0, r3
 5631 009e 2837     		adds	r7, r7, #40
 5632              	.LCFI215:
 5633              		.cfi_def_cfa_offset 8
 5634 00a0 BD46     		mov	sp, r7
 5635              	.LCFI216:
 5636              		.cfi_def_cfa_register 13
 5637              		@ sp needed
 5638 00a2 80BD     		pop	{r7, pc}
 5639              		.cfi_endproc
 5640              	.LFE46:
 5642              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 5643              		.align	1
 5644              		.syntax unified
 5645              		.thumb
 5646              		.thumb_func
 5648              	prvTaskCheckFreeStackSpace:
 5649              	.LFB47:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5650              		.loc 1 3800 2
 5651              		.cfi_startproc
 5652              		@ args = 0, pretend = 0, frame = 16
 5653              		@ frame_needed = 1, uses_anonymous_args = 0
 5654              		@ link register save eliminated.
 5655 0000 80B4     		push	{r7}
 5656              	.LCFI217:
 5657              		.cfi_def_cfa_offset 4
 5658              		.cfi_offset 7, -4
 5659 0002 85B0     		sub	sp, sp, #20
 5660              	.LCFI218:
 5661              		.cfi_def_cfa_offset 24
 5662 0004 00AF     		add	r7, sp, #0
 5663              	.LCFI219:
 5664              		.cfi_def_cfa_register 7
 5665 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 5666              		.loc 1 3801 11
 5667 0008 0023     		movs	r3, #0
 5668 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 5669              		.loc 1 3803 8
 5670 000c 05E0     		b	.L352
 5671              	.L353:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 5672              		.loc 1 3805 17
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 171


 5673 000e 7B68     		ldr	r3, [r7, #4]
 5674 0010 0133     		adds	r3, r3, #1
 5675 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 5676              		.loc 1 3806 11
 5677 0014 FB68     		ldr	r3, [r7, #12]
 5678 0016 0133     		adds	r3, r3, #1
 5679 0018 FB60     		str	r3, [r7, #12]
 5680              	.L352:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5681              		.loc 1 3803 10
 5682 001a 7B68     		ldr	r3, [r7, #4]
 5683 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5684              		.loc 1 3803 24
 5685 001e A52B     		cmp	r3, #165
 5686 0020 F5D0     		beq	.L353
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 5687              		.loc 1 3809 11
 5688 0022 FB68     		ldr	r3, [r7, #12]
 5689 0024 9B08     		lsrs	r3, r3, #2
 5690 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 5691              		.loc 1 3811 10
 5692 0028 FB68     		ldr	r3, [r7, #12]
 5693 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5694              		.loc 1 3812 2
 5695 002c 1846     		mov	r0, r3
 5696 002e 1437     		adds	r7, r7, #20
 5697              	.LCFI220:
 5698              		.cfi_def_cfa_offset 4
 5699 0030 BD46     		mov	sp, r7
 5700              	.LCFI221:
 5701              		.cfi_def_cfa_register 13
 5702              		@ sp needed
 5703 0032 5DF8047B 		ldr	r7, [sp], #4
 5704              	.LCFI222:
 5705              		.cfi_restore 7
 5706              		.cfi_def_cfa_offset 0
 5707 0036 7047     		bx	lr
 5708              		.cfi_endproc
 5709              	.LFE47:
 5711              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5712              		.align	1
 5713              		.global	uxTaskGetStackHighWaterMark
 5714              		.syntax unified
 5715              		.thumb
 5716              		.thumb_func
 5718              	uxTaskGetStackHighWaterMark:
 5719              	.LFB48:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 172


3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5720              		.loc 1 3860 2
 5721              		.cfi_startproc
 5722              		@ args = 0, pretend = 0, frame = 24
 5723              		@ frame_needed = 1, uses_anonymous_args = 0
 5724 0000 80B5     		push	{r7, lr}
 5725              	.LCFI223:
 5726              		.cfi_def_cfa_offset 8
 5727              		.cfi_offset 7, -8
 5728              		.cfi_offset 14, -4
 5729 0002 86B0     		sub	sp, sp, #24
 5730              	.LCFI224:
 5731              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 173


 5732 0004 00AF     		add	r7, sp, #0
 5733              	.LCFI225:
 5734              		.cfi_def_cfa_register 7
 5735 0006 7860     		str	r0, [r7, #4]
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5736              		.loc 1 3865 11
 5737 0008 7B68     		ldr	r3, [r7, #4]
 5738 000a 002B     		cmp	r3, #0
 5739 000c 02D1     		bne	.L356
 5740              		.loc 1 3865 11 is_stmt 0 discriminator 1
 5741 000e 094B     		ldr	r3, .L359
 5742 0010 1B68     		ldr	r3, [r3]
 5743 0012 00E0     		b	.L357
 5744              	.L356:
 5745              		.loc 1 3865 11 discriminator 2
 5746 0014 7B68     		ldr	r3, [r7, #4]
 5747              	.L357:
 5748              		.loc 1 3865 9 is_stmt 1 discriminator 4
 5749 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 5750              		.loc 1 3869 18
 5751 0018 7B69     		ldr	r3, [r7, #20]
 5752 001a 1B6B     		ldr	r3, [r3, #48]
 5753 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 5754              		.loc 1 3877 30
 5755 001e 3869     		ldr	r0, [r7, #16]
 5756 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5757 0024 0346     		mov	r3, r0
 5758              		.loc 1 3877 12 discriminator 1
 5759 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5760              		.loc 1 3879 10
 5761 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5762              		.loc 1 3880 2
 5763 002a 1846     		mov	r0, r3
 5764 002c 1837     		adds	r7, r7, #24
 5765              	.LCFI226:
 5766              		.cfi_def_cfa_offset 8
 5767 002e BD46     		mov	sp, r7
 5768              	.LCFI227:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 174


 5769              		.cfi_def_cfa_register 13
 5770              		@ sp needed
 5771 0030 80BD     		pop	{r7, pc}
 5772              	.L360:
 5773 0032 00BF     		.align	2
 5774              	.L359:
 5775 0034 00000000 		.word	pxCurrentTCB
 5776              		.cfi_endproc
 5777              	.LFE48:
 5779              		.section	.text.prvDeleteTCB,"ax",%progbits
 5780              		.align	1
 5781              		.syntax unified
 5782              		.thumb
 5783              		.thumb_func
 5785              	prvDeleteTCB:
 5786              	.LFB49:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5787              		.loc 1 3888 2
 5788              		.cfi_startproc
 5789              		@ args = 0, pretend = 0, frame = 16
 5790              		@ frame_needed = 1, uses_anonymous_args = 0
 5791 0000 80B5     		push	{r7, lr}
 5792              	.LCFI228:
 5793              		.cfi_def_cfa_offset 8
 5794              		.cfi_offset 7, -8
 5795              		.cfi_offset 14, -4
 5796 0002 84B0     		sub	sp, sp, #16
 5797              	.LCFI229:
 5798              		.cfi_def_cfa_offset 24
 5799 0004 00AF     		add	r7, sp, #0
 5800              	.LCFI230:
 5801              		.cfi_def_cfa_register 7
 5802 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 175


3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 5803              		.loc 1 3916 13
 5804 0008 7B68     		ldr	r3, [r7, #4]
 5805 000a 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5806              		.loc 1 3916 6
 5807 000e 002B     		cmp	r3, #0
 5808 0010 08D1     		bne	.L362
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 5809              		.loc 1 3920 21
 5810 0012 7B68     		ldr	r3, [r7, #4]
 5811 0014 1B6B     		ldr	r3, [r3, #48]
 5812              		.loc 1 3920 5
 5813 0016 1846     		mov	r0, r3
 5814 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 5815              		.loc 1 3921 5
 5816 001c 7868     		ldr	r0, [r7, #4]
 5817 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5818              		.loc 1 3938 2
 5819 0022 19E0     		b	.L366
 5820              	.L362:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5821              		.loc 1 3923 18
 5822 0024 7B68     		ldr	r3, [r7, #4]
 5823 0026 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5824              		.loc 1 3923 11
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 176


 5825 002a 012B     		cmp	r3, #1
 5826 002c 03D1     		bne	.L364
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5827              		.loc 1 3927 5
 5828 002e 7868     		ldr	r0, [r7, #4]
 5829 0030 FFF7FEFF 		bl	vPortFree
 5830              		.loc 1 3938 2
 5831 0034 10E0     		b	.L366
 5832              	.L364:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5833              		.loc 1 3933 5
 5834 0036 7B68     		ldr	r3, [r7, #4]
 5835 0038 93F85930 		ldrb	r3, [r3, #89]	@ zero_extendqisi2
 5836 003c 022B     		cmp	r3, #2
 5837 003e 0BD0     		beq	.L366
 5838              	.LBB207:
 5839              	.LBB208:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5840              		.loc 2 195 2
 5841              		.syntax unified
 5842              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5843 0040 4FF05003 			mov r3, #80												
 5844 0044 83F31188 		msr basepri, r3											
 5845 0048 BFF36F8F 		isb														
 5846 004c BFF34F8F 		dsb														
 5847              	
 5848              	@ 0 "" 2
 5849              		.thumb
 5850              		.syntax unified
 5851 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5852              		.loc 2 203 1
 5853 0052 00BF     		nop
 5854              	.L365:
 5855              	.LBE208:
 5856              	.LBE207:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 5857              		.loc 1 3933 5
 5858 0054 00BF     		nop
 5859 0056 FDE7     		b	.L365
 5860              	.L366:
 5861              		.loc 1 3938 2
 5862 0058 00BF     		nop
 5863 005a 1037     		adds	r7, r7, #16
 5864              	.LCFI231:
 5865              		.cfi_def_cfa_offset 8
 5866 005c BD46     		mov	sp, r7
 5867              	.LCFI232:
 5868              		.cfi_def_cfa_register 13
 5869              		@ sp needed
 5870 005e 80BD     		pop	{r7, pc}
 5871              		.cfi_endproc
 5872              	.LFE49:
 5874              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 5875              		.align	1
 5876              		.syntax unified
 5877              		.thumb
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 177


 5878              		.thumb_func
 5880              	prvResetNextTaskUnblockTime:
 5881              	.LFB50:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5882              		.loc 1 3944 1
 5883              		.cfi_startproc
 5884              		@ args = 0, pretend = 0, frame = 8
 5885              		@ frame_needed = 1, uses_anonymous_args = 0
 5886              		@ link register save eliminated.
 5887 0000 80B4     		push	{r7}
 5888              	.LCFI233:
 5889              		.cfi_def_cfa_offset 4
 5890              		.cfi_offset 7, -4
 5891 0002 83B0     		sub	sp, sp, #12
 5892              	.LCFI234:
 5893              		.cfi_def_cfa_offset 16
 5894 0004 00AF     		add	r7, sp, #0
 5895              	.LCFI235:
 5896              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 5897              		.loc 1 3947 6
 5898 0006 0C4B     		ldr	r3, .L371
 5899 0008 1B68     		ldr	r3, [r3]
 5900 000a 1B68     		ldr	r3, [r3]
 5901              		.loc 1 3947 4
 5902 000c 002B     		cmp	r3, #0
 5903 000e 04D1     		bne	.L368
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 5904              		.loc 1 3953 24
 5905 0010 0A4B     		ldr	r3, .L371+4
 5906 0012 4FF0FF32 		mov	r2, #-1
 5907 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5908              		.loc 1 3964 1
 5909 0018 08E0     		b	.L370
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 178


 5910              	.L368:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5911              		.loc 1 3961 15
 5912 001a 074B     		ldr	r3, .L371
 5913 001c 1B68     		ldr	r3, [r3]
 5914 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 5915              		.loc 1 3961 13
 5916 0020 DB68     		ldr	r3, [r3, #12]
 5917 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5918              		.loc 1 3962 26
 5919 0024 7B68     		ldr	r3, [r7, #4]
 5920 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5921              		.loc 1 3962 24
 5922 0028 044A     		ldr	r2, .L371+4
 5923 002a 1360     		str	r3, [r2]
 5924              	.L370:
 5925              		.loc 1 3964 1
 5926 002c 00BF     		nop
 5927 002e 0C37     		adds	r7, r7, #12
 5928              	.LCFI236:
 5929              		.cfi_def_cfa_offset 4
 5930 0030 BD46     		mov	sp, r7
 5931              	.LCFI237:
 5932              		.cfi_def_cfa_register 13
 5933              		@ sp needed
 5934 0032 5DF8047B 		ldr	r7, [sp], #4
 5935              	.LCFI238:
 5936              		.cfi_restore 7
 5937              		.cfi_def_cfa_offset 0
 5938 0036 7047     		bx	lr
 5939              	.L372:
 5940              		.align	2
 5941              	.L371:
 5942 0038 00000000 		.word	pxDelayedTaskList
 5943 003c 00000000 		.word	xNextTaskUnblockTime
 5944              		.cfi_endproc
 5945              	.LFE50:
 5947              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5948              		.align	1
 5949              		.global	xTaskGetCurrentTaskHandle
 5950              		.syntax unified
 5951              		.thumb
 5952              		.thumb_func
 5954              	xTaskGetCurrentTaskHandle:
 5955              	.LFB51:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5956              		.loc 1 3970 2
 5957              		.cfi_startproc
 5958              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 179


 5959              		@ frame_needed = 1, uses_anonymous_args = 0
 5960              		@ link register save eliminated.
 5961 0000 80B4     		push	{r7}
 5962              	.LCFI239:
 5963              		.cfi_def_cfa_offset 4
 5964              		.cfi_offset 7, -4
 5965 0002 83B0     		sub	sp, sp, #12
 5966              	.LCFI240:
 5967              		.cfi_def_cfa_offset 16
 5968 0004 00AF     		add	r7, sp, #0
 5969              	.LCFI241:
 5970              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 5971              		.loc 1 3976 11
 5972 0006 054B     		ldr	r3, .L375
 5973 0008 1B68     		ldr	r3, [r3]
 5974 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 5975              		.loc 1 3978 10
 5976 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5977              		.loc 1 3979 2
 5978 000e 1846     		mov	r0, r3
 5979 0010 0C37     		adds	r7, r7, #12
 5980              	.LCFI242:
 5981              		.cfi_def_cfa_offset 4
 5982 0012 BD46     		mov	sp, r7
 5983              	.LCFI243:
 5984              		.cfi_def_cfa_register 13
 5985              		@ sp needed
 5986 0014 5DF8047B 		ldr	r7, [sp], #4
 5987              	.LCFI244:
 5988              		.cfi_restore 7
 5989              		.cfi_def_cfa_offset 0
 5990 0018 7047     		bx	lr
 5991              	.L376:
 5992 001a 00BF     		.align	2
 5993              	.L375:
 5994 001c 00000000 		.word	pxCurrentTCB
 5995              		.cfi_endproc
 5996              	.LFE51:
 5998              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5999              		.align	1
 6000              		.global	xTaskGetSchedulerState
 6001              		.syntax unified
 6002              		.thumb
 6003              		.thumb_func
 6005              	xTaskGetSchedulerState:
 6006              	.LFB52:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 180


3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6007              		.loc 1 3987 2
 6008              		.cfi_startproc
 6009              		@ args = 0, pretend = 0, frame = 8
 6010              		@ frame_needed = 1, uses_anonymous_args = 0
 6011              		@ link register save eliminated.
 6012 0000 80B4     		push	{r7}
 6013              	.LCFI245:
 6014              		.cfi_def_cfa_offset 4
 6015              		.cfi_offset 7, -4
 6016 0002 83B0     		sub	sp, sp, #12
 6017              	.LCFI246:
 6018              		.cfi_def_cfa_offset 16
 6019 0004 00AF     		add	r7, sp, #0
 6020              	.LCFI247:
 6021              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6022              		.loc 1 3990 25
 6023 0006 0B4B     		ldr	r3, .L382
 6024 0008 1B68     		ldr	r3, [r3]
 6025              		.loc 1 3990 5
 6026 000a 002B     		cmp	r3, #0
 6027 000c 02D1     		bne	.L378
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6028              		.loc 1 3992 12
 6029 000e 0123     		movs	r3, #1
 6030 0010 7B60     		str	r3, [r7, #4]
 6031 0012 08E0     		b	.L379
 6032              	.L378:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6033              		.loc 1 3996 29
 6034 0014 084B     		ldr	r3, .L382+4
 6035 0016 1B68     		ldr	r3, [r3]
 6036              		.loc 1 3996 6
 6037 0018 002B     		cmp	r3, #0
 6038 001a 02D1     		bne	.L380
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6039              		.loc 1 3998 13
 6040 001c 0223     		movs	r3, #2
 6041 001e 7B60     		str	r3, [r7, #4]
 6042 0020 01E0     		b	.L379
 6043              	.L380:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 181


4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6044              		.loc 1 4002 13
 6045 0022 0023     		movs	r3, #0
 6046 0024 7B60     		str	r3, [r7, #4]
 6047              	.L379:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6048              		.loc 1 4006 10
 6049 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6050              		.loc 1 4007 2
 6051 0028 1846     		mov	r0, r3
 6052 002a 0C37     		adds	r7, r7, #12
 6053              	.LCFI248:
 6054              		.cfi_def_cfa_offset 4
 6055 002c BD46     		mov	sp, r7
 6056              	.LCFI249:
 6057              		.cfi_def_cfa_register 13
 6058              		@ sp needed
 6059 002e 5DF8047B 		ldr	r7, [sp], #4
 6060              	.LCFI250:
 6061              		.cfi_restore 7
 6062              		.cfi_def_cfa_offset 0
 6063 0032 7047     		bx	lr
 6064              	.L383:
 6065              		.align	2
 6066              	.L382:
 6067 0034 00000000 		.word	xSchedulerRunning
 6068 0038 00000000 		.word	uxSchedulerSuspended
 6069              		.cfi_endproc
 6070              	.LFE52:
 6072              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6073              		.align	1
 6074              		.global	xTaskPriorityInherit
 6075              		.syntax unified
 6076              		.thumb
 6077              		.thumb_func
 6079              	xTaskPriorityInherit:
 6080              	.LFB53:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6081              		.loc 1 4015 2
 6082              		.cfi_startproc
 6083              		@ args = 0, pretend = 0, frame = 16
 6084              		@ frame_needed = 1, uses_anonymous_args = 0
 6085 0000 80B5     		push	{r7, lr}
 6086              	.LCFI251:
 6087              		.cfi_def_cfa_offset 8
 6088              		.cfi_offset 7, -8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 182


 6089              		.cfi_offset 14, -4
 6090 0002 84B0     		sub	sp, sp, #16
 6091              	.LCFI252:
 6092              		.cfi_def_cfa_offset 24
 6093 0004 00AF     		add	r7, sp, #0
 6094              	.LCFI253:
 6095              		.cfi_def_cfa_register 7
 6096 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6097              		.loc 1 4016 16
 6098 0008 7B68     		ldr	r3, [r7, #4]
 6099 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6100              		.loc 1 4017 13
 6101 000c 0023     		movs	r3, #0
 6102 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6103              		.loc 1 4022 5
 6104 0010 7B68     		ldr	r3, [r7, #4]
 6105 0012 002B     		cmp	r3, #0
 6106 0014 51D0     		beq	.L385
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6107              		.loc 1 4027 24
 6108 0016 BB68     		ldr	r3, [r7, #8]
 6109 0018 DA6A     		ldr	r2, [r3, #44]
 6110              		.loc 1 4027 51
 6111 001a 2A4B     		ldr	r3, .L392
 6112 001c 1B68     		ldr	r3, [r3]
 6113 001e DB6A     		ldr	r3, [r3, #44]
 6114              		.loc 1 4027 6
 6115 0020 9A42     		cmp	r2, r3
 6116 0022 41D2     		bcs	.L386
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6117              		.loc 1 4032 11
 6118 0024 BB68     		ldr	r3, [r7, #8]
 6119 0026 9B69     		ldr	r3, [r3, #24]
 6120              		.loc 1 4032 7
 6121 0028 002B     		cmp	r3, #0
 6122 002a 06DB     		blt	.L387
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6123              		.loc 1 4034 6
 6124 002c 254B     		ldr	r3, .L392
 6125 002e 1B68     		ldr	r3, [r3]
 6126 0030 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 183


 6127 0032 C3F13802 		rsb	r2, r3, #56
 6128 0036 BB68     		ldr	r3, [r7, #8]
 6129 0038 9A61     		str	r2, [r3, #24]
 6130              	.L387:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6131              		.loc 1 4043 9
 6132 003a BB68     		ldr	r3, [r7, #8]
 6133 003c 5969     		ldr	r1, [r3, #20]
 6134 003e BB68     		ldr	r3, [r7, #8]
 6135 0040 DA6A     		ldr	r2, [r3, #44]
 6136 0042 1346     		mov	r3, r2
 6137 0044 9B00     		lsls	r3, r3, #2
 6138 0046 1344     		add	r3, r3, r2
 6139 0048 9B00     		lsls	r3, r3, #2
 6140 004a 1F4A     		ldr	r2, .L392+4
 6141 004c 1344     		add	r3, r3, r2
 6142              		.loc 1 4043 7
 6143 004e 9942     		cmp	r1, r3
 6144 0050 22D1     		bne	.L388
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6145              		.loc 1 4045 10
 6146 0052 BB68     		ldr	r3, [r7, #8]
 6147 0054 0433     		adds	r3, r3, #4
 6148 0056 1846     		mov	r0, r3
 6149 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6150              		.loc 1 4058 49
 6151 005c 194B     		ldr	r3, .L392
 6152 005e 1B68     		ldr	r3, [r3]
 6153 0060 DA6A     		ldr	r2, [r3, #44]
 6154              		.loc 1 4058 35
 6155 0062 BB68     		ldr	r3, [r7, #8]
 6156 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6157              		.loc 1 4059 6
 6158 0066 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 184


 6159 0068 DA6A     		ldr	r2, [r3, #44]
 6160 006a 184B     		ldr	r3, .L392+8
 6161 006c 1B68     		ldr	r3, [r3]
 6162 006e 9A42     		cmp	r2, r3
 6163 0070 03D9     		bls	.L389
 6164              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6165 0072 BB68     		ldr	r3, [r7, #8]
 6166 0074 DB6A     		ldr	r3, [r3, #44]
 6167 0076 154A     		ldr	r2, .L392+8
 6168 0078 1360     		str	r3, [r2]
 6169              	.L389:
 6170              		.loc 1 4059 6 discriminator 3
 6171 007a BB68     		ldr	r3, [r7, #8]
 6172 007c DA6A     		ldr	r2, [r3, #44]
 6173 007e 1346     		mov	r3, r2
 6174 0080 9B00     		lsls	r3, r3, #2
 6175 0082 1344     		add	r3, r3, r2
 6176 0084 9B00     		lsls	r3, r3, #2
 6177 0086 104A     		ldr	r2, .L392+4
 6178 0088 1A44     		add	r2, r2, r3
 6179 008a BB68     		ldr	r3, [r7, #8]
 6180 008c 0433     		adds	r3, r3, #4
 6181 008e 1946     		mov	r1, r3
 6182 0090 1046     		mov	r0, r2
 6183 0092 FFF7FEFF 		bl	vListInsertEnd
 6184 0096 04E0     		b	.L390
 6185              	.L388:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6186              		.loc 1 4064 49 is_stmt 1
 6187 0098 0A4B     		ldr	r3, .L392
 6188 009a 1B68     		ldr	r3, [r3]
 6189 009c DA6A     		ldr	r2, [r3, #44]
 6190              		.loc 1 4064 35
 6191 009e BB68     		ldr	r3, [r7, #8]
 6192 00a0 DA62     		str	r2, [r3, #44]
 6193              	.L390:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6194              		.loc 1 4070 13
 6195 00a2 0123     		movs	r3, #1
 6196 00a4 FB60     		str	r3, [r7, #12]
 6197 00a6 08E0     		b	.L385
 6198              	.L386:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6199              		.loc 1 4074 25
 6200 00a8 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 185


 6201 00aa DA6C     		ldr	r2, [r3, #76]
 6202              		.loc 1 4074 56
 6203 00ac 054B     		ldr	r3, .L392
 6204 00ae 1B68     		ldr	r3, [r3]
 6205 00b0 DB6A     		ldr	r3, [r3, #44]
 6206              		.loc 1 4074 7
 6207 00b2 9A42     		cmp	r2, r3
 6208 00b4 01D2     		bcs	.L385
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6209              		.loc 1 4083 14
 6210 00b6 0123     		movs	r3, #1
 6211 00b8 FB60     		str	r3, [r7, #12]
 6212              	.L385:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6213              		.loc 1 4096 10
 6214 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6215              		.loc 1 4097 2
 6216 00bc 1846     		mov	r0, r3
 6217 00be 1037     		adds	r7, r7, #16
 6218              	.LCFI254:
 6219              		.cfi_def_cfa_offset 8
 6220 00c0 BD46     		mov	sp, r7
 6221              	.LCFI255:
 6222              		.cfi_def_cfa_register 13
 6223              		@ sp needed
 6224 00c2 80BD     		pop	{r7, pc}
 6225              	.L393:
 6226              		.align	2
 6227              	.L392:
 6228 00c4 00000000 		.word	pxCurrentTCB
 6229 00c8 00000000 		.word	pxReadyTasksLists
 6230 00cc 00000000 		.word	uxTopReadyPriority
 6231              		.cfi_endproc
 6232              	.LFE53:
 6234              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6235              		.align	1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 186


 6236              		.global	xTaskPriorityDisinherit
 6237              		.syntax unified
 6238              		.thumb
 6239              		.thumb_func
 6241              	xTaskPriorityDisinherit:
 6242              	.LFB54:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6243              		.loc 1 4105 2
 6244              		.cfi_startproc
 6245              		@ args = 0, pretend = 0, frame = 24
 6246              		@ frame_needed = 1, uses_anonymous_args = 0
 6247 0000 80B5     		push	{r7, lr}
 6248              	.LCFI256:
 6249              		.cfi_def_cfa_offset 8
 6250              		.cfi_offset 7, -8
 6251              		.cfi_offset 14, -4
 6252 0002 86B0     		sub	sp, sp, #24
 6253              	.LCFI257:
 6254              		.cfi_def_cfa_offset 32
 6255 0004 00AF     		add	r7, sp, #0
 6256              	.LCFI258:
 6257              		.cfi_def_cfa_register 7
 6258 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6259              		.loc 1 4106 16
 6260 0008 7B68     		ldr	r3, [r7, #4]
 6261 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6262              		.loc 1 4107 13
 6263 000c 0023     		movs	r3, #0
 6264 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6265              		.loc 1 4109 5
 6266 0010 7B68     		ldr	r3, [r7, #4]
 6267 0012 002B     		cmp	r3, #0
 6268 0014 58D0     		beq	.L395
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6269              		.loc 1 4115 4
 6270 0016 2F4B     		ldr	r3, .L402
 6271 0018 1B68     		ldr	r3, [r3]
 6272 001a 3A69     		ldr	r2, [r7, #16]
 6273 001c 9A42     		cmp	r2, r3
 6274 001e 0BD0     		beq	.L396
 6275              	.LBB209:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 187


 6276              	.LBB210:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6277              		.loc 2 195 2
 6278              		.syntax unified
 6279              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6280 0020 4FF05003 			mov r3, #80												
 6281 0024 83F31188 		msr basepri, r3											
 6282 0028 BFF36F8F 		isb														
 6283 002c BFF34F8F 		dsb														
 6284              	
 6285              	@ 0 "" 2
 6286              		.thumb
 6287              		.syntax unified
 6288 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6289              		.loc 2 203 1
 6290 0032 00BF     		nop
 6291              	.L397:
 6292              	.LBE210:
 6293              	.LBE209:
 6294              		.loc 1 4115 4
 6295 0034 00BF     		nop
 6296 0036 FDE7     		b	.L397
 6297              	.L396:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6298              		.loc 1 4116 4
 6299 0038 3B69     		ldr	r3, [r7, #16]
 6300 003a 1B6D     		ldr	r3, [r3, #80]
 6301 003c 002B     		cmp	r3, #0
 6302 003e 0BD1     		bne	.L398
 6303              	.LBB211:
 6304              	.LBB212:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6305              		.loc 2 195 2
 6306              		.syntax unified
 6307              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6308 0040 4FF05003 			mov r3, #80												
 6309 0044 83F31188 		msr basepri, r3											
 6310 0048 BFF36F8F 		isb														
 6311 004c BFF34F8F 		dsb														
 6312              	
 6313              	@ 0 "" 2
 6314              		.thumb
 6315              		.syntax unified
 6316 0050 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6317              		.loc 2 203 1
 6318 0052 00BF     		nop
 6319              	.L399:
 6320              	.LBE212:
 6321              	.LBE211:
 6322              		.loc 1 4116 4
 6323 0054 00BF     		nop
 6324 0056 FDE7     		b	.L399
 6325              	.L398:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6326              		.loc 1 4117 11
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 188


 6327 0058 3B69     		ldr	r3, [r7, #16]
 6328 005a 1B6D     		ldr	r3, [r3, #80]
 6329              		.loc 1 4117 28
 6330 005c 5A1E     		subs	r2, r3, #1
 6331 005e 3B69     		ldr	r3, [r7, #16]
 6332 0060 1A65     		str	r2, [r3, #80]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6333              		.loc 1 4121 13
 6334 0062 3B69     		ldr	r3, [r7, #16]
 6335 0064 DA6A     		ldr	r2, [r3, #44]
 6336              		.loc 1 4121 34
 6337 0066 3B69     		ldr	r3, [r7, #16]
 6338 0068 DB6C     		ldr	r3, [r3, #76]
 6339              		.loc 1 4121 6
 6340 006a 9A42     		cmp	r2, r3
 6341 006c 2CD0     		beq	.L395
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6342              		.loc 1 4124 14
 6343 006e 3B69     		ldr	r3, [r7, #16]
 6344 0070 1B6D     		ldr	r3, [r3, #80]
 6345              		.loc 1 4124 7
 6346 0072 002B     		cmp	r3, #0
 6347 0074 28D1     		bne	.L395
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6348              		.loc 1 4131 10
 6349 0076 3B69     		ldr	r3, [r7, #16]
 6350 0078 0433     		adds	r3, r3, #4
 6351 007a 1846     		mov	r0, r3
 6352 007c FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6353              		.loc 1 4143 31
 6354 0080 3B69     		ldr	r3, [r7, #16]
 6355 0082 DA6C     		ldr	r2, [r3, #76]
 6356              		.loc 1 4143 24
 6357 0084 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 189


 6358 0086 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6359              		.loc 1 4148 6
 6360 0088 3B69     		ldr	r3, [r7, #16]
 6361 008a DB6A     		ldr	r3, [r3, #44]
 6362 008c C3F13802 		rsb	r2, r3, #56
 6363 0090 3B69     		ldr	r3, [r7, #16]
 6364 0092 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6365              		.loc 1 4149 6
 6366 0094 3B69     		ldr	r3, [r7, #16]
 6367 0096 DA6A     		ldr	r2, [r3, #44]
 6368 0098 0F4B     		ldr	r3, .L402+4
 6369 009a 1B68     		ldr	r3, [r3]
 6370 009c 9A42     		cmp	r2, r3
 6371 009e 03D9     		bls	.L400
 6372              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6373 00a0 3B69     		ldr	r3, [r7, #16]
 6374 00a2 DB6A     		ldr	r3, [r3, #44]
 6375 00a4 0C4A     		ldr	r2, .L402+4
 6376 00a6 1360     		str	r3, [r2]
 6377              	.L400:
 6378              		.loc 1 4149 6 discriminator 3
 6379 00a8 3B69     		ldr	r3, [r7, #16]
 6380 00aa DA6A     		ldr	r2, [r3, #44]
 6381 00ac 1346     		mov	r3, r2
 6382 00ae 9B00     		lsls	r3, r3, #2
 6383 00b0 1344     		add	r3, r3, r2
 6384 00b2 9B00     		lsls	r3, r3, #2
 6385 00b4 094A     		ldr	r2, .L402+8
 6386 00b6 1A44     		add	r2, r2, r3
 6387 00b8 3B69     		ldr	r3, [r7, #16]
 6388 00ba 0433     		adds	r3, r3, #4
 6389 00bc 1946     		mov	r1, r3
 6390 00be 1046     		mov	r0, r2
 6391 00c0 FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6392              		.loc 1 4159 14 is_stmt 1
 6393 00c4 0123     		movs	r3, #1
 6394 00c6 7B61     		str	r3, [r7, #20]
 6395              	.L395:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 190


4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6396              		.loc 1 4176 10
 6397 00c8 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6398              		.loc 1 4177 2
 6399 00ca 1846     		mov	r0, r3
 6400 00cc 1837     		adds	r7, r7, #24
 6401              	.LCFI259:
 6402              		.cfi_def_cfa_offset 8
 6403 00ce BD46     		mov	sp, r7
 6404              	.LCFI260:
 6405              		.cfi_def_cfa_register 13
 6406              		@ sp needed
 6407 00d0 80BD     		pop	{r7, pc}
 6408              	.L403:
 6409 00d2 00BF     		.align	2
 6410              	.L402:
 6411 00d4 00000000 		.word	pxCurrentTCB
 6412 00d8 00000000 		.word	uxTopReadyPriority
 6413 00dc 00000000 		.word	pxReadyTasksLists
 6414              		.cfi_endproc
 6415              	.LFE54:
 6417              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6418              		.align	1
 6419              		.global	vTaskPriorityDisinheritAfterTimeout
 6420              		.syntax unified
 6421              		.thumb
 6422              		.thumb_func
 6424              	vTaskPriorityDisinheritAfterTimeout:
 6425              	.LFB55:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6426              		.loc 1 4185 2
 6427              		.cfi_startproc
 6428              		@ args = 0, pretend = 0, frame = 32
 6429              		@ frame_needed = 1, uses_anonymous_args = 0
 6430 0000 80B5     		push	{r7, lr}
 6431              	.LCFI261:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 191


 6432              		.cfi_def_cfa_offset 8
 6433              		.cfi_offset 7, -8
 6434              		.cfi_offset 14, -4
 6435 0002 88B0     		sub	sp, sp, #32
 6436              	.LCFI262:
 6437              		.cfi_def_cfa_offset 40
 6438 0004 00AF     		add	r7, sp, #0
 6439              	.LCFI263:
 6440              		.cfi_def_cfa_register 7
 6441 0006 7860     		str	r0, [r7, #4]
 6442 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6443              		.loc 1 4186 16
 6444 000a 7B68     		ldr	r3, [r7, #4]
 6445 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6446              		.loc 1 4188 20
 6447 000e 0123     		movs	r3, #1
 6448 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6449              		.loc 1 4190 5
 6450 0012 7B68     		ldr	r3, [r7, #4]
 6451 0014 002B     		cmp	r3, #0
 6452 0016 6CD0     		beq	.L414
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6453              		.loc 1 4194 4
 6454 0018 BB69     		ldr	r3, [r7, #24]
 6455 001a 1B6D     		ldr	r3, [r3, #80]
 6456 001c 002B     		cmp	r3, #0
 6457 001e 0BD1     		bne	.L406
 6458              	.LBB213:
 6459              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6460              		.loc 2 195 2
 6461              		.syntax unified
 6462              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6463 0020 4FF05003 			mov r3, #80												
 6464 0024 83F31188 		msr basepri, r3											
 6465 0028 BFF36F8F 		isb														
 6466 002c BFF34F8F 		dsb														
 6467              	
 6468              	@ 0 "" 2
 6469              		.thumb
 6470              		.syntax unified
 6471 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6472              		.loc 2 203 1
 6473 0032 00BF     		nop
 6474              	.L407:
 6475              	.LBE214:
 6476              	.LBE213:
 6477              		.loc 1 4194 4
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 192


 6478 0034 00BF     		nop
 6479 0036 FDE7     		b	.L407
 6480              	.L406:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6481              		.loc 1 4200 13
 6482 0038 BB69     		ldr	r3, [r7, #24]
 6483 003a DB6C     		ldr	r3, [r3, #76]
 6484              		.loc 1 4200 6
 6485 003c 3A68     		ldr	r2, [r7]
 6486 003e 9A42     		cmp	r2, r3
 6487 0040 02D9     		bls	.L408
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6488              		.loc 1 4202 21
 6489 0042 3B68     		ldr	r3, [r7]
 6490 0044 FB61     		str	r3, [r7, #28]
 6491 0046 02E0     		b	.L409
 6492              	.L408:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6493              		.loc 1 4206 21
 6494 0048 BB69     		ldr	r3, [r7, #24]
 6495 004a DB6C     		ldr	r3, [r3, #76]
 6496 004c FB61     		str	r3, [r7, #28]
 6497              	.L409:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6498              		.loc 1 4210 13
 6499 004e BB69     		ldr	r3, [r7, #24]
 6500 0050 DB6A     		ldr	r3, [r3, #44]
 6501              		.loc 1 4210 6
 6502 0052 FA69     		ldr	r2, [r7, #28]
 6503 0054 9A42     		cmp	r2, r3
 6504 0056 4CD0     		beq	.L414
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6505              		.loc 1 4216 14
 6506 0058 BB69     		ldr	r3, [r7, #24]
 6507 005a 1B6D     		ldr	r3, [r3, #80]
 6508              		.loc 1 4216 7
 6509 005c 7A69     		ldr	r2, [r7, #20]
 6510 005e 9A42     		cmp	r2, r3
 6511 0060 47D1     		bne	.L414
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 193


4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6512              		.loc 1 4221 6
 6513 0062 264B     		ldr	r3, .L415
 6514 0064 1B68     		ldr	r3, [r3]
 6515 0066 BA69     		ldr	r2, [r7, #24]
 6516 0068 9A42     		cmp	r2, r3
 6517 006a 0BD1     		bne	.L410
 6518              	.LBB215:
 6519              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6520              		.loc 2 195 2
 6521              		.syntax unified
 6522              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6523 006c 4FF05003 			mov r3, #80												
 6524 0070 83F31188 		msr basepri, r3											
 6525 0074 BFF36F8F 		isb														
 6526 0078 BFF34F8F 		dsb														
 6527              	
 6528              	@ 0 "" 2
 6529              		.thumb
 6530              		.syntax unified
 6531 007c BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6532              		.loc 2 203 1
 6533 007e 00BF     		nop
 6534              	.L411:
 6535              	.LBE216:
 6536              	.LBE215:
 6537              		.loc 1 4221 6
 6538 0080 00BF     		nop
 6539 0082 FDE7     		b	.L411
 6540              	.L410:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6541              		.loc 1 4227 28
 6542 0084 BB69     		ldr	r3, [r7, #24]
 6543 0086 DB6A     		ldr	r3, [r3, #44]
 6544 0088 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 6545              		.loc 1 4228 24
 6546 008a BB69     		ldr	r3, [r7, #24]
 6547 008c FA69     		ldr	r2, [r7, #28]
 6548 008e DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6549              		.loc 1 4232 12
 6550 0090 BB69     		ldr	r3, [r7, #24]
 6551 0092 9B69     		ldr	r3, [r3, #24]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 194


 6552              		.loc 1 4232 8
 6553 0094 002B     		cmp	r3, #0
 6554 0096 04DB     		blt	.L412
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6555              		.loc 1 4234 7
 6556 0098 FB69     		ldr	r3, [r7, #28]
 6557 009a C3F13802 		rsb	r2, r3, #56
 6558 009e BB69     		ldr	r3, [r7, #24]
 6559 00a0 9A61     		str	r2, [r3, #24]
 6560              	.L412:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6561              		.loc 1 4247 10
 6562 00a2 BB69     		ldr	r3, [r7, #24]
 6563 00a4 5969     		ldr	r1, [r3, #20]
 6564 00a6 3A69     		ldr	r2, [r7, #16]
 6565 00a8 1346     		mov	r3, r2
 6566 00aa 9B00     		lsls	r3, r3, #2
 6567 00ac 1344     		add	r3, r3, r2
 6568 00ae 9B00     		lsls	r3, r3, #2
 6569 00b0 134A     		ldr	r2, .L415+4
 6570 00b2 1344     		add	r3, r3, r2
 6571              		.loc 1 4247 8
 6572 00b4 9942     		cmp	r1, r3
 6573 00b6 1CD1     		bne	.L414
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6574              		.loc 1 4249 11
 6575 00b8 BB69     		ldr	r3, [r7, #24]
 6576 00ba 0433     		adds	r3, r3, #4
 6577 00bc 1846     		mov	r0, r3
 6578 00be FFF7FEFF 		bl	uxListRemove
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6579              		.loc 1 4261 7
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 195


 6580 00c2 BB69     		ldr	r3, [r7, #24]
 6581 00c4 DA6A     		ldr	r2, [r3, #44]
 6582 00c6 0F4B     		ldr	r3, .L415+8
 6583 00c8 1B68     		ldr	r3, [r3]
 6584 00ca 9A42     		cmp	r2, r3
 6585 00cc 03D9     		bls	.L413
 6586              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6587 00ce BB69     		ldr	r3, [r7, #24]
 6588 00d0 DB6A     		ldr	r3, [r3, #44]
 6589 00d2 0C4A     		ldr	r2, .L415+8
 6590 00d4 1360     		str	r3, [r2]
 6591              	.L413:
 6592              		.loc 1 4261 7 discriminator 3
 6593 00d6 BB69     		ldr	r3, [r7, #24]
 6594 00d8 DA6A     		ldr	r2, [r3, #44]
 6595 00da 1346     		mov	r3, r2
 6596 00dc 9B00     		lsls	r3, r3, #2
 6597 00de 1344     		add	r3, r3, r2
 6598 00e0 9B00     		lsls	r3, r3, #2
 6599 00e2 074A     		ldr	r2, .L415+4
 6600 00e4 1A44     		add	r2, r2, r3
 6601 00e6 BB69     		ldr	r3, [r7, #24]
 6602 00e8 0433     		adds	r3, r3, #4
 6603 00ea 1946     		mov	r1, r3
 6604 00ec 1046     		mov	r0, r2
 6605 00ee FFF7FEFF 		bl	vListInsertEnd
 6606              	.L414:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6607              		.loc 1 4282 2 is_stmt 1
 6608 00f2 00BF     		nop
 6609 00f4 2037     		adds	r7, r7, #32
 6610              	.LCFI264:
 6611              		.cfi_def_cfa_offset 8
 6612 00f6 BD46     		mov	sp, r7
 6613              	.LCFI265:
 6614              		.cfi_def_cfa_register 13
 6615              		@ sp needed
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 196


 6616 00f8 80BD     		pop	{r7, pc}
 6617              	.L416:
 6618 00fa 00BF     		.align	2
 6619              	.L415:
 6620 00fc 00000000 		.word	pxCurrentTCB
 6621 0100 00000000 		.word	pxReadyTasksLists
 6622 0104 00000000 		.word	uxTopReadyPriority
 6623              		.cfi_endproc
 6624              	.LFE55:
 6626              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6627              		.align	1
 6628              		.global	uxTaskResetEventItemValue
 6629              		.syntax unified
 6630              		.thumb
 6631              		.thumb_func
 6633              	uxTaskResetEventItemValue:
 6634              	.LFB56:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 197


4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 198


4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 199


4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 200


4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 201


4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6635              		.loc 1 4603 1
 6636              		.cfi_startproc
 6637              		@ args = 0, pretend = 0, frame = 8
 6638              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 202


 6639              		@ link register save eliminated.
 6640 0000 80B4     		push	{r7}
 6641              	.LCFI266:
 6642              		.cfi_def_cfa_offset 4
 6643              		.cfi_offset 7, -4
 6644 0002 83B0     		sub	sp, sp, #12
 6645              	.LCFI267:
 6646              		.cfi_def_cfa_offset 16
 6647 0004 00AF     		add	r7, sp, #0
 6648              	.LCFI268:
 6649              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 6650              		.loc 1 4606 13
 6651 0006 094B     		ldr	r3, .L419
 6652 0008 1B68     		ldr	r3, [r3]
 6653              		.loc 1 4606 11
 6654 000a 9B69     		ldr	r3, [r3, #24]
 6655 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 6656              		.loc 1 4610 2
 6657 000e 074B     		ldr	r3, .L419
 6658 0010 1B68     		ldr	r3, [r3]
 6659 0012 DA6A     		ldr	r2, [r3, #44]
 6660 0014 054B     		ldr	r3, .L419
 6661 0016 1B68     		ldr	r3, [r3]
 6662 0018 C2F13802 		rsb	r2, r2, #56
 6663 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 6664              		.loc 1 4612 9
 6665 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6666              		.loc 1 4613 1
 6667 0020 1846     		mov	r0, r3
 6668 0022 0C37     		adds	r7, r7, #12
 6669              	.LCFI269:
 6670              		.cfi_def_cfa_offset 4
 6671 0024 BD46     		mov	sp, r7
 6672              	.LCFI270:
 6673              		.cfi_def_cfa_register 13
 6674              		@ sp needed
 6675 0026 5DF8047B 		ldr	r7, [sp], #4
 6676              	.LCFI271:
 6677              		.cfi_restore 7
 6678              		.cfi_def_cfa_offset 0
 6679 002a 7047     		bx	lr
 6680              	.L420:
 6681              		.align	2
 6682              	.L419:
 6683 002c 00000000 		.word	pxCurrentTCB
 6684              		.cfi_endproc
 6685              	.LFE56:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 203


 6687              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6688              		.align	1
 6689              		.global	pvTaskIncrementMutexHeldCount
 6690              		.syntax unified
 6691              		.thumb
 6692              		.thumb_func
 6694              	pvTaskIncrementMutexHeldCount:
 6695              	.LFB57:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6696              		.loc 1 4619 2
 6697              		.cfi_startproc
 6698              		@ args = 0, pretend = 0, frame = 0
 6699              		@ frame_needed = 1, uses_anonymous_args = 0
 6700              		@ link register save eliminated.
 6701 0000 80B4     		push	{r7}
 6702              	.LCFI272:
 6703              		.cfi_def_cfa_offset 4
 6704              		.cfi_offset 7, -4
 6705 0002 00AF     		add	r7, sp, #0
 6706              	.LCFI273:
 6707              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 6708              		.loc 1 4622 20
 6709 0004 074B     		ldr	r3, .L424
 6710 0006 1B68     		ldr	r3, [r3]
 6711              		.loc 1 4622 5
 6712 0008 002B     		cmp	r3, #0
 6713 000a 04D0     		beq	.L422
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 6714              		.loc 1 4624 18
 6715 000c 054B     		ldr	r3, .L424
 6716 000e 1B68     		ldr	r3, [r3]
 6717 0010 1A6D     		ldr	r2, [r3, #80]
 6718              		.loc 1 4624 35
 6719 0012 0132     		adds	r2, r2, #1
 6720 0014 1A65     		str	r2, [r3, #80]
 6721              	.L422:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 6722              		.loc 1 4627 10
 6723 0016 034B     		ldr	r3, .L424
 6724 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6725              		.loc 1 4628 2
 6726 001a 1846     		mov	r0, r3
 6727 001c BD46     		mov	sp, r7
 6728              	.LCFI274:
 6729              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 204


 6730              		@ sp needed
 6731 001e 5DF8047B 		ldr	r7, [sp], #4
 6732              	.LCFI275:
 6733              		.cfi_restore 7
 6734              		.cfi_def_cfa_offset 0
 6735 0022 7047     		bx	lr
 6736              	.L425:
 6737              		.align	2
 6738              	.L424:
 6739 0024 00000000 		.word	pxCurrentTCB
 6740              		.cfi_endproc
 6741              	.LFE57:
 6743              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 6744              		.align	1
 6745              		.global	ulTaskNotifyTake
 6746              		.syntax unified
 6747              		.thumb
 6748              		.thumb_func
 6750              	ulTaskNotifyTake:
 6751              	.LFB58:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6752              		.loc 1 4636 2
 6753              		.cfi_startproc
 6754              		@ args = 0, pretend = 0, frame = 16
 6755              		@ frame_needed = 1, uses_anonymous_args = 0
 6756 0000 80B5     		push	{r7, lr}
 6757              	.LCFI276:
 6758              		.cfi_def_cfa_offset 8
 6759              		.cfi_offset 7, -8
 6760              		.cfi_offset 14, -4
 6761 0002 84B0     		sub	sp, sp, #16
 6762              	.LCFI277:
 6763              		.cfi_def_cfa_offset 24
 6764 0004 00AF     		add	r7, sp, #0
 6765              	.LCFI278:
 6766              		.cfi_def_cfa_register 7
 6767 0006 7860     		str	r0, [r7, #4]
 6768 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6769              		.loc 1 4639 3
 6770 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 6771              		.loc 1 4642 20
 6772 000e 1E4B     		ldr	r3, .L431
 6773 0010 1B68     		ldr	r3, [r3]
 6774 0012 5B6D     		ldr	r3, [r3, #84]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 205


 6775              		.loc 1 4642 6
 6776 0014 002B     		cmp	r3, #0
 6777 0016 13D1     		bne	.L427
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6778              		.loc 1 4645 17
 6779 0018 1B4B     		ldr	r3, .L431
 6780 001a 1B68     		ldr	r3, [r3]
 6781              		.loc 1 4645 33
 6782 001c 0122     		movs	r2, #1
 6783 001e 83F85820 		strb	r2, [r3, #88]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6784              		.loc 1 4647 7
 6785 0022 3B68     		ldr	r3, [r7]
 6786 0024 002B     		cmp	r3, #0
 6787 0026 0BD0     		beq	.L427
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6788              		.loc 1 4649 6
 6789 0028 0121     		movs	r1, #1
 6790 002a 3868     		ldr	r0, [r7]
 6791 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6792              		.loc 1 4656 6
 6793 0030 164B     		ldr	r3, .L431+4
 6794 0032 4FF08052 		mov	r2, #268435456
 6795 0036 1A60     		str	r2, [r3]
 6796              		.syntax unified
 6797              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6798 0038 BFF34F8F 		dsb
 6799              	@ 0 "" 2
 6800              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6801 003c BFF36F8F 		isb
 6802              	@ 0 "" 2
 6803              		.thumb
 6804              		.syntax unified
 6805              	.L427:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 206


 6806              		.loc 1 4668 3
 6807 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6808              		.loc 1 4670 3
 6809 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 6810              		.loc 1 4673 27
 6811 0048 0F4B     		ldr	r3, .L431
 6812 004a 1B68     		ldr	r3, [r3]
 6813              		.loc 1 4673 13
 6814 004c 5B6D     		ldr	r3, [r3, #84]
 6815 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 6816              		.loc 1 4675 6
 6817 0050 FB68     		ldr	r3, [r7, #12]
 6818 0052 002B     		cmp	r3, #0
 6819 0054 0CD0     		beq	.L428
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 6820              		.loc 1 4677 7
 6821 0056 7B68     		ldr	r3, [r7, #4]
 6822 0058 002B     		cmp	r3, #0
 6823 005a 04D0     		beq	.L429
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 6824              		.loc 1 4679 18
 6825 005c 0A4B     		ldr	r3, .L431
 6826 005e 1B68     		ldr	r3, [r3]
 6827              		.loc 1 4679 36
 6828 0060 0022     		movs	r2, #0
 6829 0062 5A65     		str	r2, [r3, #84]
 6830 0064 04E0     		b	.L428
 6831              	.L429:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 6832              		.loc 1 4683 18
 6833 0066 084B     		ldr	r3, .L431
 6834 0068 1B68     		ldr	r3, [r3]
 6835              		.loc 1 4683 47
 6836 006a FA68     		ldr	r2, [r7, #12]
 6837 006c 013A     		subs	r2, r2, #1
 6838              		.loc 1 4683 36
 6839 006e 5A65     		str	r2, [r3, #84]
 6840              	.L428:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 207


4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6841              		.loc 1 4691 16
 6842 0070 054B     		ldr	r3, .L431
 6843 0072 1B68     		ldr	r3, [r3]
 6844              		.loc 1 4691 32
 6845 0074 0022     		movs	r2, #0
 6846 0076 83F85820 		strb	r2, [r3, #88]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6847              		.loc 1 4693 3
 6848 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 6849              		.loc 1 4695 10
 6850 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6851              		.loc 1 4696 2
 6852 0080 1846     		mov	r0, r3
 6853 0082 1037     		adds	r7, r7, #16
 6854              	.LCFI279:
 6855              		.cfi_def_cfa_offset 8
 6856 0084 BD46     		mov	sp, r7
 6857              	.LCFI280:
 6858              		.cfi_def_cfa_register 13
 6859              		@ sp needed
 6860 0086 80BD     		pop	{r7, pc}
 6861              	.L432:
 6862              		.align	2
 6863              	.L431:
 6864 0088 00000000 		.word	pxCurrentTCB
 6865 008c 04ED00E0 		.word	-536810236
 6866              		.cfi_endproc
 6867              	.LFE58:
 6869              		.section	.text.xTaskNotifyWait,"ax",%progbits
 6870              		.align	1
 6871              		.global	xTaskNotifyWait
 6872              		.syntax unified
 6873              		.thumb
 6874              		.thumb_func
 6876              	xTaskNotifyWait:
 6877              	.LFB59:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6878              		.loc 1 4704 2
 6879              		.cfi_startproc
 6880              		@ args = 0, pretend = 0, frame = 24
 6881              		@ frame_needed = 1, uses_anonymous_args = 0
 6882 0000 80B5     		push	{r7, lr}
 6883              	.LCFI281:
 6884              		.cfi_def_cfa_offset 8
 6885              		.cfi_offset 7, -8
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 208


 6886              		.cfi_offset 14, -4
 6887 0002 86B0     		sub	sp, sp, #24
 6888              	.LCFI282:
 6889              		.cfi_def_cfa_offset 32
 6890 0004 00AF     		add	r7, sp, #0
 6891              	.LCFI283:
 6892              		.cfi_def_cfa_register 7
 6893 0006 F860     		str	r0, [r7, #12]
 6894 0008 B960     		str	r1, [r7, #8]
 6895 000a 7A60     		str	r2, [r7, #4]
 6896 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6897              		.loc 1 4707 3
 6898 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6899              		.loc 1 4710 20
 6900 0012 264B     		ldr	r3, .L439
 6901 0014 1B68     		ldr	r3, [r3]
 6902 0016 93F85830 		ldrb	r3, [r3, #88]
 6903 001a DBB2     		uxtb	r3, r3
 6904              		.loc 1 4710 6
 6905 001c 022B     		cmp	r3, #2
 6906 001e 1AD0     		beq	.L434
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 6907              		.loc 1 4715 17
 6908 0020 224B     		ldr	r3, .L439
 6909 0022 1B68     		ldr	r3, [r3]
 6910 0024 596D     		ldr	r1, [r3, #84]
 6911              		.loc 1 4715 38
 6912 0026 FA68     		ldr	r2, [r7, #12]
 6913 0028 D243     		mvns	r2, r2
 6914              		.loc 1 4715 35
 6915 002a 0A40     		ands	r2, r2, r1
 6916 002c 5A65     		str	r2, [r3, #84]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 6917              		.loc 1 4718 17
 6918 002e 1F4B     		ldr	r3, .L439
 6919 0030 1B68     		ldr	r3, [r3]
 6920              		.loc 1 4718 33
 6921 0032 0122     		movs	r2, #1
 6922 0034 83F85820 		strb	r2, [r3, #88]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 6923              		.loc 1 4720 7
 6924 0038 3B68     		ldr	r3, [r7]
 6925 003a 002B     		cmp	r3, #0
 6926 003c 0BD0     		beq	.L434
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 209


4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 6927              		.loc 1 4722 6
 6928 003e 0121     		movs	r1, #1
 6929 0040 3868     		ldr	r0, [r7]
 6930 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 6931              		.loc 1 4729 6
 6932 0046 1A4B     		ldr	r3, .L439+4
 6933 0048 4FF08052 		mov	r2, #268435456
 6934 004c 1A60     		str	r2, [r3]
 6935              		.syntax unified
 6936              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6937 004e BFF34F8F 		dsb
 6938              	@ 0 "" 2
 6939              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6940 0052 BFF36F8F 		isb
 6941              	@ 0 "" 2
 6942              		.thumb
 6943              		.syntax unified
 6944              	.L434:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6945              		.loc 1 4741 3
 6946 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 6947              		.loc 1 4743 3
 6948 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 6949              		.loc 1 4747 6
 6950 005e 7B68     		ldr	r3, [r7, #4]
 6951 0060 002B     		cmp	r3, #0
 6952 0062 04D0     		beq	.L435
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 210


 6953              		.loc 1 4751 41
 6954 0064 114B     		ldr	r3, .L439
 6955 0066 1B68     		ldr	r3, [r3]
 6956 0068 5A6D     		ldr	r2, [r3, #84]
 6957              		.loc 1 4751 27
 6958 006a 7B68     		ldr	r3, [r7, #4]
 6959 006c 1A60     		str	r2, [r3]
 6960              	.L435:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 6961              		.loc 1 4758 20
 6962 006e 0F4B     		ldr	r3, .L439
 6963 0070 1B68     		ldr	r3, [r3]
 6964 0072 93F85830 		ldrb	r3, [r3, #88]
 6965 0076 DBB2     		uxtb	r3, r3
 6966              		.loc 1 4758 6
 6967 0078 022B     		cmp	r3, #2
 6968 007a 02D0     		beq	.L436
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 6969              		.loc 1 4761 13
 6970 007c 0023     		movs	r3, #0
 6971 007e 7B61     		str	r3, [r7, #20]
 6972 0080 08E0     		b	.L437
 6973              	.L436:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 6974              		.loc 1 4767 17
 6975 0082 0A4B     		ldr	r3, .L439
 6976 0084 1B68     		ldr	r3, [r3]
 6977 0086 596D     		ldr	r1, [r3, #84]
 6978              		.loc 1 4767 38
 6979 0088 BA68     		ldr	r2, [r7, #8]
 6980 008a D243     		mvns	r2, r2
 6981              		.loc 1 4767 35
 6982 008c 0A40     		ands	r2, r2, r1
 6983 008e 5A65     		str	r2, [r3, #84]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6984              		.loc 1 4768 13
 6985 0090 0123     		movs	r3, #1
 6986 0092 7B61     		str	r3, [r7, #20]
 6987              	.L437:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 6988              		.loc 1 4771 16
 6989 0094 054B     		ldr	r3, .L439
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 211


 6990 0096 1B68     		ldr	r3, [r3]
 6991              		.loc 1 4771 32
 6992 0098 0022     		movs	r2, #0
 6993 009a 83F85820 		strb	r2, [r3, #88]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 6994              		.loc 1 4773 3
 6995 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6996              		.loc 1 4775 10
 6997 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6998              		.loc 1 4776 2
 6999 00a4 1846     		mov	r0, r3
 7000 00a6 1837     		adds	r7, r7, #24
 7001              	.LCFI284:
 7002              		.cfi_def_cfa_offset 8
 7003 00a8 BD46     		mov	sp, r7
 7004              	.LCFI285:
 7005              		.cfi_def_cfa_register 13
 7006              		@ sp needed
 7007 00aa 80BD     		pop	{r7, pc}
 7008              	.L440:
 7009              		.align	2
 7010              	.L439:
 7011 00ac 00000000 		.word	pxCurrentTCB
 7012 00b0 04ED00E0 		.word	-536810236
 7013              		.cfi_endproc
 7014              	.LFE59:
 7016              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7017              		.align	1
 7018              		.global	xTaskGenericNotify
 7019              		.syntax unified
 7020              		.thumb
 7021              		.thumb_func
 7023              	xTaskGenericNotify:
 7024              	.LFB60:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7025              		.loc 1 4784 2
 7026              		.cfi_startproc
 7027              		@ args = 0, pretend = 0, frame = 40
 7028              		@ frame_needed = 1, uses_anonymous_args = 0
 7029 0000 80B5     		push	{r7, lr}
 7030              	.LCFI286:
 7031              		.cfi_def_cfa_offset 8
 7032              		.cfi_offset 7, -8
 7033              		.cfi_offset 14, -4
 7034 0002 8AB0     		sub	sp, sp, #40
 7035              	.LCFI287:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 212


 7036              		.cfi_def_cfa_offset 48
 7037 0004 00AF     		add	r7, sp, #0
 7038              	.LCFI288:
 7039              		.cfi_def_cfa_register 7
 7040 0006 F860     		str	r0, [r7, #12]
 7041 0008 B960     		str	r1, [r7, #8]
 7042 000a 3B60     		str	r3, [r7]
 7043 000c 1346     		mov	r3, r2
 7044 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7045              		.loc 1 4786 13
 7046 0010 0123     		movs	r3, #1
 7047 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7048              		.loc 1 4789 3
 7049 0014 FB68     		ldr	r3, [r7, #12]
 7050 0016 002B     		cmp	r3, #0
 7051 0018 0BD1     		bne	.L442
 7052              	.LBB217:
 7053              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7054              		.loc 2 195 2
 7055              		.syntax unified
 7056              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7057 001a 4FF05003 			mov r3, #80												
 7058 001e 83F31188 		msr basepri, r3											
 7059 0022 BFF36F8F 		isb														
 7060 0026 BFF34F8F 		dsb														
 7061              	
 7062              	@ 0 "" 2
 7063              		.thumb
 7064              		.syntax unified
 7065 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7066              		.loc 2 203 1
 7067 002c 00BF     		nop
 7068              	.L443:
 7069              	.LBE218:
 7070              	.LBE217:
 7071              		.loc 1 4789 3
 7072 002e 00BF     		nop
 7073 0030 FDE7     		b	.L443
 7074              	.L442:
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7075              		.loc 1 4790 9
 7076 0032 FB68     		ldr	r3, [r7, #12]
 7077 0034 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7078              		.loc 1 4792 3
 7079 0036 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7080              		.loc 1 4794 6
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 213


 7081 003a 3B68     		ldr	r3, [r7]
 7082 003c 002B     		cmp	r3, #0
 7083 003e 03D0     		beq	.L444
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7084              		.loc 1 4796 42
 7085 0040 3B6A     		ldr	r3, [r7, #32]
 7086 0042 5A6D     		ldr	r2, [r3, #84]
 7087              		.loc 1 4796 35
 7088 0044 3B68     		ldr	r3, [r7]
 7089 0046 1A60     		str	r2, [r3]
 7090              	.L444:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7091              		.loc 1 4799 26
 7092 0048 3B6A     		ldr	r3, [r7, #32]
 7093 004a 93F85830 		ldrb	r3, [r3, #88]
 7094 004e FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7095              		.loc 1 4801 25
 7096 0050 3B6A     		ldr	r3, [r7, #32]
 7097 0052 0222     		movs	r2, #2
 7098 0054 83F85820 		strb	r2, [r3, #88]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7099              		.loc 1 4803 4
 7100 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7101 005a 042B     		cmp	r3, #4
 7102 005c 27D8     		bhi	.L445
 7103 005e 01A2     		adr	r2, .L447
 7104 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7105              		.p2align 2
 7106              	.L447:
 7107 0064 D1000000 		.word	.L462+1
 7108 0068 79000000 		.word	.L450+1
 7109 006c 87000000 		.word	.L449+1
 7110 0070 93000000 		.word	.L448+1
 7111 0074 9B000000 		.word	.L446+1
 7112              		.p2align 1
 7113              	.L450:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7114              		.loc 1 4806 11
 7115 0078 3B6A     		ldr	r3, [r7, #32]
 7116 007a 5A6D     		ldr	r2, [r3, #84]
 7117              		.loc 1 4806 29
 7118 007c BB68     		ldr	r3, [r7, #8]
 7119 007e 1A43     		orrs	r2, r2, r3
 7120 0080 3B6A     		ldr	r3, [r7, #32]
 7121 0082 5A65     		str	r2, [r3, #84]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7122              		.loc 1 4807 6
 7123 0084 27E0     		b	.L452
 7124              	.L449:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 214


4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7125              		.loc 1 4810 13
 7126 0086 3B6A     		ldr	r3, [r7, #32]
 7127 0088 5B6D     		ldr	r3, [r3, #84]
 7128              		.loc 1 4810 32
 7129 008a 5A1C     		adds	r2, r3, #1
 7130 008c 3B6A     		ldr	r3, [r7, #32]
 7131 008e 5A65     		str	r2, [r3, #84]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7132              		.loc 1 4811 6
 7133 0090 21E0     		b	.L452
 7134              	.L448:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7135              		.loc 1 4814 29
 7136 0092 3B6A     		ldr	r3, [r7, #32]
 7137 0094 BA68     		ldr	r2, [r7, #8]
 7138 0096 5A65     		str	r2, [r3, #84]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7139              		.loc 1 4815 6
 7140 0098 1DE0     		b	.L452
 7141              	.L446:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7142              		.loc 1 4818 8
 7143 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7144 009c 022B     		cmp	r3, #2
 7145 009e 03D0     		beq	.L453
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7146              		.loc 1 4820 30
 7147 00a0 3B6A     		ldr	r3, [r7, #32]
 7148 00a2 BA68     		ldr	r2, [r7, #8]
 7149 00a4 5A65     		str	r2, [r3, #84]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7150              		.loc 1 4827 6
 7151 00a6 16E0     		b	.L452
 7152              	.L453:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7153              		.loc 1 4825 15
 7154 00a8 0023     		movs	r3, #0
 7155 00aa 7B62     		str	r3, [r7, #36]
 7156              		.loc 1 4827 6
 7157 00ac 13E0     		b	.L452
 7158              	.L445:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 215


4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7159              		.loc 1 4838 6
 7160 00ae 3B6A     		ldr	r3, [r7, #32]
 7161 00b0 5B6D     		ldr	r3, [r3, #84]
 7162 00b2 B3F1FF3F 		cmp	r3, #-1
 7163 00b6 0DD0     		beq	.L463
 7164              	.LBB219:
 7165              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7166              		.loc 2 195 2
 7167              		.syntax unified
 7168              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7169 00b8 4FF05003 			mov r3, #80												
 7170 00bc 83F31188 		msr basepri, r3											
 7171 00c0 BFF36F8F 		isb														
 7172 00c4 BFF34F8F 		dsb														
 7173              	
 7174              	@ 0 "" 2
 7175              		.thumb
 7176              		.syntax unified
 7177 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7178              		.loc 2 203 1
 7179 00ca 00BF     		nop
 7180              	.L456:
 7181              	.LBE220:
 7182              	.LBE219:
 7183              		.loc 1 4838 6
 7184 00cc 00BF     		nop
 7185 00ce FDE7     		b	.L456
 7186              	.L462:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7187              		.loc 1 4832 6
 7188 00d0 00BF     		nop
 7189 00d2 00E0     		b	.L452
 7190              	.L463:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7191              		.loc 1 4840 6
 7192 00d4 00BF     		nop
 7193              	.L452:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7194              		.loc 1 4847 6
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 216


 7195 00d6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7196 00d8 012B     		cmp	r3, #1
 7197 00da 3BD1     		bne	.L457
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7198              		.loc 1 4849 14
 7199 00dc 3B6A     		ldr	r3, [r7, #32]
 7200 00de 0433     		adds	r3, r3, #4
 7201 00e0 1846     		mov	r0, r3
 7202 00e2 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7203              		.loc 1 4850 5
 7204 00e6 3B6A     		ldr	r3, [r7, #32]
 7205 00e8 DA6A     		ldr	r2, [r3, #44]
 7206 00ea 1E4B     		ldr	r3, .L464
 7207 00ec 1B68     		ldr	r3, [r3]
 7208 00ee 9A42     		cmp	r2, r3
 7209 00f0 03D9     		bls	.L458
 7210              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7211 00f2 3B6A     		ldr	r3, [r7, #32]
 7212 00f4 DB6A     		ldr	r3, [r3, #44]
 7213 00f6 1B4A     		ldr	r2, .L464
 7214 00f8 1360     		str	r3, [r2]
 7215              	.L458:
 7216              		.loc 1 4850 5 discriminator 3
 7217 00fa 3B6A     		ldr	r3, [r7, #32]
 7218 00fc DA6A     		ldr	r2, [r3, #44]
 7219 00fe 1346     		mov	r3, r2
 7220 0100 9B00     		lsls	r3, r3, #2
 7221 0102 1344     		add	r3, r3, r2
 7222 0104 9B00     		lsls	r3, r3, #2
 7223 0106 184A     		ldr	r2, .L464+4
 7224 0108 1A44     		add	r2, r2, r3
 7225 010a 3B6A     		ldr	r3, [r7, #32]
 7226 010c 0433     		adds	r3, r3, #4
 7227 010e 1946     		mov	r1, r3
 7228 0110 1046     		mov	r0, r2
 7229 0112 FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7230              		.loc 1 4853 5 is_stmt 1
 7231 0116 3B6A     		ldr	r3, [r7, #32]
 7232 0118 9B6A     		ldr	r3, [r3, #40]
 7233 011a 002B     		cmp	r3, #0
 7234 011c 0BD0     		beq	.L459
 7235              	.LBB221:
 7236              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7237              		.loc 2 195 2
 7238              		.syntax unified
 7239              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7240 011e 4FF05003 			mov r3, #80												
 7241 0122 83F31188 		msr basepri, r3											
 7242 0126 BFF36F8F 		isb														
 7243 012a BFF34F8F 		dsb														
 7244              	
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 217


 7245              	@ 0 "" 2
 7246              		.thumb
 7247              		.syntax unified
 7248 012e 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7249              		.loc 2 203 1
 7250 0130 00BF     		nop
 7251              	.L460:
 7252              	.LBE222:
 7253              	.LBE221:
 7254              		.loc 1 4853 5
 7255 0132 00BF     		nop
 7256 0134 FDE7     		b	.L460
 7257              	.L459:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7258              		.loc 1 4871 14
 7259 0136 3B6A     		ldr	r3, [r7, #32]
 7260 0138 DA6A     		ldr	r2, [r3, #44]
 7261              		.loc 1 4871 41
 7262 013a 0C4B     		ldr	r3, .L464+8
 7263 013c 1B68     		ldr	r3, [r3]
 7264 013e DB6A     		ldr	r3, [r3, #44]
 7265              		.loc 1 4871 7
 7266 0140 9A42     		cmp	r2, r3
 7267 0142 07D9     		bls	.L457
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7268              		.loc 1 4875 6
 7269 0144 0A4B     		ldr	r3, .L464+12
 7270 0146 4FF08052 		mov	r2, #268435456
 7271 014a 1A60     		str	r2, [r3]
 7272              		.syntax unified
 7273              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7274 014c BFF34F8F 		dsb
 7275              	@ 0 "" 2
 7276              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7277 0150 BFF36F8F 		isb
 7278              	@ 0 "" 2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 218


 7279              		.thumb
 7280              		.syntax unified
 7281              	.L457:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7282              		.loc 1 4887 3
 7283 0154 FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7284              		.loc 1 4889 10
 7285 0158 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7286              		.loc 1 4890 2
 7287 015a 1846     		mov	r0, r3
 7288 015c 2837     		adds	r7, r7, #40
 7289              	.LCFI289:
 7290              		.cfi_def_cfa_offset 8
 7291 015e BD46     		mov	sp, r7
 7292              	.LCFI290:
 7293              		.cfi_def_cfa_register 13
 7294              		@ sp needed
 7295 0160 80BD     		pop	{r7, pc}
 7296              	.L465:
 7297 0162 00BF     		.align	2
 7298              	.L464:
 7299 0164 00000000 		.word	uxTopReadyPriority
 7300 0168 00000000 		.word	pxReadyTasksLists
 7301 016c 00000000 		.word	pxCurrentTCB
 7302 0170 04ED00E0 		.word	-536810236
 7303              		.cfi_endproc
 7304              	.LFE60:
 7306              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7307              		.align	1
 7308              		.global	xTaskGenericNotifyFromISR
 7309              		.syntax unified
 7310              		.thumb
 7311              		.thumb_func
 7313              	xTaskGenericNotifyFromISR:
 7314              	.LFB61:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 219


 7315              		.loc 1 4898 2
 7316              		.cfi_startproc
 7317              		@ args = 4, pretend = 0, frame = 56
 7318              		@ frame_needed = 1, uses_anonymous_args = 0
 7319 0000 80B5     		push	{r7, lr}
 7320              	.LCFI291:
 7321              		.cfi_def_cfa_offset 8
 7322              		.cfi_offset 7, -8
 7323              		.cfi_offset 14, -4
 7324 0002 8EB0     		sub	sp, sp, #56
 7325              	.LCFI292:
 7326              		.cfi_def_cfa_offset 64
 7327 0004 00AF     		add	r7, sp, #0
 7328              	.LCFI293:
 7329              		.cfi_def_cfa_register 7
 7330 0006 F860     		str	r0, [r7, #12]
 7331 0008 B960     		str	r1, [r7, #8]
 7332 000a 3B60     		str	r3, [r7]
 7333 000c 1346     		mov	r3, r2
 7334 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7335              		.loc 1 4901 13
 7336 0010 0123     		movs	r3, #1
 7337 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7338              		.loc 1 4904 3
 7339 0014 FB68     		ldr	r3, [r7, #12]
 7340 0016 002B     		cmp	r3, #0
 7341 0018 0BD1     		bne	.L467
 7342              	.LBB223:
 7343              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7344              		.loc 2 195 2
 7345              		.syntax unified
 7346              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7347 001a 4FF05003 			mov r3, #80												
 7348 001e 83F31188 		msr basepri, r3											
 7349 0022 BFF36F8F 		isb														
 7350 0026 BFF34F8F 		dsb														
 7351              	
 7352              	@ 0 "" 2
 7353              		.thumb
 7354              		.syntax unified
 7355 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7356              		.loc 2 203 1
 7357 002c 00BF     		nop
 7358              	.L468:
 7359              	.LBE224:
 7360              	.LBE223:
 7361              		.loc 1 4904 3
 7362 002e 00BF     		nop
 7363 0030 FDE7     		b	.L468
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 220


 7364              	.L467:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7365              		.loc 1 4922 3
 7366 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7367              		.loc 1 4924 9
 7368 0036 FB68     		ldr	r3, [r7, #12]
 7369 0038 3B63     		str	r3, [r7, #48]
 7370              	.LBB225:
 7371              	.LBB226:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7372              		.loc 2 211 2
 7373              		.syntax unified
 7374              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7375 003a EFF31182 			mrs r2, basepri											
 7376 003e 4FF05003 		mov r3, #80												
 7377 0042 83F31188 		msr basepri, r3											
 7378 0046 BFF36F8F 		isb														
 7379 004a BFF34F8F 		dsb														
 7380              	
 7381              	@ 0 "" 2
 7382              		.thumb
 7383              		.syntax unified
 7384 004e 3A62     		str	r2, [r7, #32]
 7385 0050 FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7386              		.loc 2 223 9
 7387 0052 3B6A     		ldr	r3, [r7, #32]
 7388              	.LBE226:
 7389              	.LBE225:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7390              		.loc 1 4926 28
 7391 0054 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7392              		.loc 1 4928 6
 7393 0056 3B68     		ldr	r3, [r7]
 7394 0058 002B     		cmp	r3, #0
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 221


 7395 005a 03D0     		beq	.L470
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7396              		.loc 1 4930 42
 7397 005c 3B6B     		ldr	r3, [r7, #48]
 7398 005e 5A6D     		ldr	r2, [r3, #84]
 7399              		.loc 1 4930 35
 7400 0060 3B68     		ldr	r3, [r7]
 7401 0062 1A60     		str	r2, [r3]
 7402              	.L470:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7403              		.loc 1 4933 26
 7404 0064 3B6B     		ldr	r3, [r7, #48]
 7405 0066 93F85830 		ldrb	r3, [r3, #88]
 7406 006a 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7407              		.loc 1 4934 25
 7408 006e 3B6B     		ldr	r3, [r7, #48]
 7409 0070 0222     		movs	r2, #2
 7410 0072 83F85820 		strb	r2, [r3, #88]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7411              		.loc 1 4936 4
 7412 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7413 0078 042B     		cmp	r3, #4
 7414 007a 29D8     		bhi	.L471
 7415 007c 01A2     		adr	r2, .L473
 7416 007e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7417 0082 00BF     		.p2align 2
 7418              	.L473:
 7419 0084 F3000000 		.word	.L491+1
 7420 0088 99000000 		.word	.L476+1
 7421 008c A7000000 		.word	.L475+1
 7422 0090 B3000000 		.word	.L474+1
 7423 0094 BB000000 		.word	.L472+1
 7424              		.p2align 1
 7425              	.L476:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7426              		.loc 1 4939 11
 7427 0098 3B6B     		ldr	r3, [r7, #48]
 7428 009a 5A6D     		ldr	r2, [r3, #84]
 7429              		.loc 1 4939 29
 7430 009c BB68     		ldr	r3, [r7, #8]
 7431 009e 1A43     		orrs	r2, r2, r3
 7432 00a0 3B6B     		ldr	r3, [r7, #48]
 7433 00a2 5A65     		str	r2, [r3, #84]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7434              		.loc 1 4940 6
 7435 00a4 28E0     		b	.L478
 7436              	.L475:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 222


 7437              		.loc 1 4943 13
 7438 00a6 3B6B     		ldr	r3, [r7, #48]
 7439 00a8 5B6D     		ldr	r3, [r3, #84]
 7440              		.loc 1 4943 32
 7441 00aa 5A1C     		adds	r2, r3, #1
 7442 00ac 3B6B     		ldr	r3, [r7, #48]
 7443 00ae 5A65     		str	r2, [r3, #84]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7444              		.loc 1 4944 6
 7445 00b0 22E0     		b	.L478
 7446              	.L474:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7447              		.loc 1 4947 29
 7448 00b2 3B6B     		ldr	r3, [r7, #48]
 7449 00b4 BA68     		ldr	r2, [r7, #8]
 7450 00b6 5A65     		str	r2, [r3, #84]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7451              		.loc 1 4948 6
 7452 00b8 1EE0     		b	.L478
 7453              	.L472:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7454              		.loc 1 4951 8
 7455 00ba 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7456 00be 022B     		cmp	r3, #2
 7457 00c0 03D0     		beq	.L479
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7458              		.loc 1 4953 30
 7459 00c2 3B6B     		ldr	r3, [r7, #48]
 7460 00c4 BA68     		ldr	r2, [r7, #8]
 7461 00c6 5A65     		str	r2, [r3, #84]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7462              		.loc 1 4960 6
 7463 00c8 16E0     		b	.L478
 7464              	.L479:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7465              		.loc 1 4958 15
 7466 00ca 0023     		movs	r3, #0
 7467 00cc 7B63     		str	r3, [r7, #52]
 7468              		.loc 1 4960 6
 7469 00ce 13E0     		b	.L478
 7470              	.L471:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 223


4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7471              		.loc 1 4971 6
 7472 00d0 3B6B     		ldr	r3, [r7, #48]
 7473 00d2 5B6D     		ldr	r3, [r3, #84]
 7474 00d4 B3F1FF3F 		cmp	r3, #-1
 7475 00d8 0DD0     		beq	.L492
 7476              	.LBB227:
 7477              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7478              		.loc 2 195 2
 7479              		.syntax unified
 7480              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7481 00da 4FF05003 			mov r3, #80												
 7482 00de 83F31188 		msr basepri, r3											
 7483 00e2 BFF36F8F 		isb														
 7484 00e6 BFF34F8F 		dsb														
 7485              	
 7486              	@ 0 "" 2
 7487              		.thumb
 7488              		.syntax unified
 7489 00ea BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7490              		.loc 2 203 1
 7491 00ec 00BF     		nop
 7492              	.L482:
 7493              	.LBE228:
 7494              	.LBE227:
 7495              		.loc 1 4971 6
 7496 00ee 00BF     		nop
 7497 00f0 FDE7     		b	.L482
 7498              	.L491:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7499              		.loc 1 4965 6
 7500 00f2 00BF     		nop
 7501 00f4 00E0     		b	.L478
 7502              	.L492:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7503              		.loc 1 4972 6
 7504 00f6 00BF     		nop
 7505              	.L478:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7506              		.loc 1 4979 6
 7507 00f8 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7508 00fc 012B     		cmp	r3, #1
 7509 00fe 47D1     		bne	.L483
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 224


4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7510              		.loc 1 4982 5
 7511 0100 3B6B     		ldr	r3, [r7, #48]
 7512 0102 9B6A     		ldr	r3, [r3, #40]
 7513 0104 002B     		cmp	r3, #0
 7514 0106 0BD0     		beq	.L484
 7515              	.LBB229:
 7516              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7517              		.loc 2 195 2
 7518              		.syntax unified
 7519              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7520 0108 4FF05003 			mov r3, #80												
 7521 010c 83F31188 		msr basepri, r3											
 7522 0110 BFF36F8F 		isb														
 7523 0114 BFF34F8F 		dsb														
 7524              	
 7525              	@ 0 "" 2
 7526              		.thumb
 7527              		.syntax unified
 7528 0118 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7529              		.loc 2 203 1
 7530 011a 00BF     		nop
 7531              	.L485:
 7532              	.LBE230:
 7533              	.LBE229:
 7534              		.loc 1 4982 5
 7535 011c 00BF     		nop
 7536 011e FDE7     		b	.L485
 7537              	.L484:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7538              		.loc 1 4984 30
 7539 0120 214B     		ldr	r3, .L493
 7540 0122 1B68     		ldr	r3, [r3]
 7541              		.loc 1 4984 7
 7542 0124 002B     		cmp	r3, #0
 7543 0126 1DD1     		bne	.L486
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7544              		.loc 1 4986 15
 7545 0128 3B6B     		ldr	r3, [r7, #48]
 7546 012a 0433     		adds	r3, r3, #4
 7547 012c 1846     		mov	r0, r3
 7548 012e FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7549              		.loc 1 4987 6
 7550 0132 3B6B     		ldr	r3, [r7, #48]
 7551 0134 DA6A     		ldr	r2, [r3, #44]
 7552 0136 1D4B     		ldr	r3, .L493+4
 7553 0138 1B68     		ldr	r3, [r3]
 7554 013a 9A42     		cmp	r2, r3
 7555 013c 03D9     		bls	.L487
 7556              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7557 013e 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 225


 7558 0140 DB6A     		ldr	r3, [r3, #44]
 7559 0142 1A4A     		ldr	r2, .L493+4
 7560 0144 1360     		str	r3, [r2]
 7561              	.L487:
 7562              		.loc 1 4987 6 discriminator 3
 7563 0146 3B6B     		ldr	r3, [r7, #48]
 7564 0148 DA6A     		ldr	r2, [r3, #44]
 7565 014a 1346     		mov	r3, r2
 7566 014c 9B00     		lsls	r3, r3, #2
 7567 014e 1344     		add	r3, r3, r2
 7568 0150 9B00     		lsls	r3, r3, #2
 7569 0152 174A     		ldr	r2, .L493+8
 7570 0154 1A44     		add	r2, r2, r3
 7571 0156 3B6B     		ldr	r3, [r7, #48]
 7572 0158 0433     		adds	r3, r3, #4
 7573 015a 1946     		mov	r1, r3
 7574 015c 1046     		mov	r0, r2
 7575 015e FFF7FEFF 		bl	vListInsertEnd
 7576 0162 05E0     		b	.L488
 7577              	.L486:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7578              		.loc 1 4993 6 is_stmt 1
 7579 0164 3B6B     		ldr	r3, [r7, #48]
 7580 0166 1833     		adds	r3, r3, #24
 7581 0168 1946     		mov	r1, r3
 7582 016a 1248     		ldr	r0, .L493+12
 7583 016c FFF7FEFF 		bl	vListInsertEnd
 7584              	.L488:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7585              		.loc 1 4996 14
 7586 0170 3B6B     		ldr	r3, [r7, #48]
 7587 0172 DA6A     		ldr	r2, [r3, #44]
 7588              		.loc 1 4996 41
 7589 0174 104B     		ldr	r3, .L493+16
 7590 0176 1B68     		ldr	r3, [r3]
 7591 0178 DB6A     		ldr	r3, [r3, #44]
 7592              		.loc 1 4996 7
 7593 017a 9A42     		cmp	r2, r3
 7594 017c 08D9     		bls	.L483
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7595              		.loc 1 5000 8
 7596 017e 3B6C     		ldr	r3, [r7, #64]
 7597 0180 002B     		cmp	r3, #0
 7598 0182 02D0     		beq	.L489
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7599              		.loc 1 5002 34
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 226


 7600 0184 3B6C     		ldr	r3, [r7, #64]
 7601 0186 0122     		movs	r2, #1
 7602 0188 1A60     		str	r2, [r3]
 7603              	.L489:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7604              		.loc 1 5008 20
 7605 018a 0C4B     		ldr	r3, .L493+20
 7606 018c 0122     		movs	r2, #1
 7607 018e 1A60     		str	r2, [r3]
 7608              	.L483:
 7609 0190 FB6A     		ldr	r3, [r7, #44]
 7610 0192 3B61     		str	r3, [r7, #16]
 7611              	.LBB231:
 7612              	.LBB232:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7613              		.loc 2 229 2
 7614 0194 3B69     		ldr	r3, [r7, #16]
 7615              		.syntax unified
 7616              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7617 0196 83F31188 			msr basepri, r3	
 7618              	@ 0 "" 2
 7619              		.loc 2 233 1
 7620              		.thumb
 7621              		.syntax unified
 7622 019a 00BF     		nop
 7623              	.LBE232:
 7624              	.LBE231:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7625              		.loc 1 5018 10
 7626 019c 7B6B     		ldr	r3, [r7, #52]
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7627              		.loc 1 5019 2
 7628 019e 1846     		mov	r0, r3
 7629 01a0 3837     		adds	r7, r7, #56
 7630              	.LCFI294:
 7631              		.cfi_def_cfa_offset 8
 7632 01a2 BD46     		mov	sp, r7
 7633              	.LCFI295:
 7634              		.cfi_def_cfa_register 13
 7635              		@ sp needed
 7636 01a4 80BD     		pop	{r7, pc}
 7637              	.L494:
 7638 01a6 00BF     		.align	2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 227


 7639              	.L493:
 7640 01a8 00000000 		.word	uxSchedulerSuspended
 7641 01ac 00000000 		.word	uxTopReadyPriority
 7642 01b0 00000000 		.word	pxReadyTasksLists
 7643 01b4 00000000 		.word	xPendingReadyList
 7644 01b8 00000000 		.word	pxCurrentTCB
 7645 01bc 00000000 		.word	xYieldPending
 7646              		.cfi_endproc
 7647              	.LFE61:
 7649              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 7650              		.align	1
 7651              		.global	vTaskNotifyGiveFromISR
 7652              		.syntax unified
 7653              		.thumb
 7654              		.thumb_func
 7656              	vTaskNotifyGiveFromISR:
 7657              	.LFB62:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7658              		.loc 1 5027 2
 7659              		.cfi_startproc
 7660              		@ args = 0, pretend = 0, frame = 40
 7661              		@ frame_needed = 1, uses_anonymous_args = 0
 7662 0000 80B5     		push	{r7, lr}
 7663              	.LCFI296:
 7664              		.cfi_def_cfa_offset 8
 7665              		.cfi_offset 7, -8
 7666              		.cfi_offset 14, -4
 7667 0002 8AB0     		sub	sp, sp, #40
 7668              	.LCFI297:
 7669              		.cfi_def_cfa_offset 48
 7670 0004 00AF     		add	r7, sp, #0
 7671              	.LCFI298:
 7672              		.cfi_def_cfa_register 7
 7673 0006 7860     		str	r0, [r7, #4]
 7674 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7675              		.loc 1 5032 3
 7676 000a 7B68     		ldr	r3, [r7, #4]
 7677 000c 002B     		cmp	r3, #0
 7678 000e 0BD1     		bne	.L496
 7679              	.LBB233:
 7680              	.LBB234:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7681              		.loc 2 195 2
 7682              		.syntax unified
 7683              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 228


 7684 0010 4FF05003 			mov r3, #80												
 7685 0014 83F31188 		msr basepri, r3											
 7686 0018 BFF36F8F 		isb														
 7687 001c BFF34F8F 		dsb														
 7688              	
 7689              	@ 0 "" 2
 7690              		.thumb
 7691              		.syntax unified
 7692 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7693              		.loc 2 203 1
 7694 0022 00BF     		nop
 7695              	.L497:
 7696              	.LBE234:
 7697              	.LBE233:
 7698              		.loc 1 5032 3
 7699 0024 00BF     		nop
 7700 0026 FDE7     		b	.L497
 7701              	.L496:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7702              		.loc 1 5050 3
 7703 0028 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7704              		.loc 1 5052 9
 7705 002c 7B68     		ldr	r3, [r7, #4]
 7706 002e 7B62     		str	r3, [r7, #36]
 7707              	.LBB235:
 7708              	.LBB236:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7709              		.loc 2 211 2
 7710              		.syntax unified
 7711              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7712 0030 EFF31182 			mrs r2, basepri											
 7713 0034 4FF05003 		mov r3, #80												
 7714 0038 83F31188 		msr basepri, r3											
 7715 003c BFF36F8F 		isb														
 7716 0040 BFF34F8F 		dsb														
 7717              	
 7718              	@ 0 "" 2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 229


 7719              		.thumb
 7720              		.syntax unified
 7721 0044 7A61     		str	r2, [r7, #20]
 7722 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 7723              		.loc 2 223 9
 7724 0048 7B69     		ldr	r3, [r7, #20]
 7725              	.LBE236:
 7726              	.LBE235:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7727              		.loc 1 5054 28
 7728 004a 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7729              		.loc 1 5056 26
 7730 004c 7B6A     		ldr	r3, [r7, #36]
 7731 004e 93F85830 		ldrb	r3, [r3, #88]
 7732 0052 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7733              		.loc 1 5057 25
 7734 0054 7B6A     		ldr	r3, [r7, #36]
 7735 0056 0222     		movs	r2, #2
 7736 0058 83F85820 		strb	r2, [r3, #88]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 7737              		.loc 1 5061 11
 7738 005c 7B6A     		ldr	r3, [r7, #36]
 7739 005e 5B6D     		ldr	r3, [r3, #84]
 7740              		.loc 1 5061 30
 7741 0060 5A1C     		adds	r2, r3, #1
 7742 0062 7B6A     		ldr	r3, [r7, #36]
 7743 0064 5A65     		str	r2, [r3, #84]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7744              		.loc 1 5067 6
 7745 0066 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7746 0068 012B     		cmp	r3, #1
 7747 006a 47D1     		bne	.L499
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7748              		.loc 1 5070 5
 7749 006c 7B6A     		ldr	r3, [r7, #36]
 7750 006e 9B6A     		ldr	r3, [r3, #40]
 7751 0070 002B     		cmp	r3, #0
 7752 0072 0BD0     		beq	.L500
 7753              	.LBB237:
 7754              	.LBB238:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7755              		.loc 2 195 2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 230


 7756              		.syntax unified
 7757              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7758 0074 4FF05003 			mov r3, #80												
 7759 0078 83F31188 		msr basepri, r3											
 7760 007c BFF36F8F 		isb														
 7761 0080 BFF34F8F 		dsb														
 7762              	
 7763              	@ 0 "" 2
 7764              		.thumb
 7765              		.syntax unified
 7766 0084 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7767              		.loc 2 203 1
 7768 0086 00BF     		nop
 7769              	.L501:
 7770              	.LBE238:
 7771              	.LBE237:
 7772              		.loc 1 5070 5
 7773 0088 00BF     		nop
 7774 008a FDE7     		b	.L501
 7775              	.L500:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7776              		.loc 1 5072 30
 7777 008c 204B     		ldr	r3, .L506
 7778 008e 1B68     		ldr	r3, [r3]
 7779              		.loc 1 5072 7
 7780 0090 002B     		cmp	r3, #0
 7781 0092 1DD1     		bne	.L502
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7782              		.loc 1 5074 15
 7783 0094 7B6A     		ldr	r3, [r7, #36]
 7784 0096 0433     		adds	r3, r3, #4
 7785 0098 1846     		mov	r0, r3
 7786 009a FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7787              		.loc 1 5075 6
 7788 009e 7B6A     		ldr	r3, [r7, #36]
 7789 00a0 DA6A     		ldr	r2, [r3, #44]
 7790 00a2 1C4B     		ldr	r3, .L506+4
 7791 00a4 1B68     		ldr	r3, [r3]
 7792 00a6 9A42     		cmp	r2, r3
 7793 00a8 03D9     		bls	.L503
 7794              		.loc 1 5075 6 is_stmt 0 discriminator 1
 7795 00aa 7B6A     		ldr	r3, [r7, #36]
 7796 00ac DB6A     		ldr	r3, [r3, #44]
 7797 00ae 194A     		ldr	r2, .L506+4
 7798 00b0 1360     		str	r3, [r2]
 7799              	.L503:
 7800              		.loc 1 5075 6 discriminator 3
 7801 00b2 7B6A     		ldr	r3, [r7, #36]
 7802 00b4 DA6A     		ldr	r2, [r3, #44]
 7803 00b6 1346     		mov	r3, r2
 7804 00b8 9B00     		lsls	r3, r3, #2
 7805 00ba 1344     		add	r3, r3, r2
 7806 00bc 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 231


 7807 00be 164A     		ldr	r2, .L506+8
 7808 00c0 1A44     		add	r2, r2, r3
 7809 00c2 7B6A     		ldr	r3, [r7, #36]
 7810 00c4 0433     		adds	r3, r3, #4
 7811 00c6 1946     		mov	r1, r3
 7812 00c8 1046     		mov	r0, r2
 7813 00ca FFF7FEFF 		bl	vListInsertEnd
 7814 00ce 05E0     		b	.L504
 7815              	.L502:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7816              		.loc 1 5081 6 is_stmt 1
 7817 00d0 7B6A     		ldr	r3, [r7, #36]
 7818 00d2 1833     		adds	r3, r3, #24
 7819 00d4 1946     		mov	r1, r3
 7820 00d6 1148     		ldr	r0, .L506+12
 7821 00d8 FFF7FEFF 		bl	vListInsertEnd
 7822              	.L504:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7823              		.loc 1 5084 14
 7824 00dc 7B6A     		ldr	r3, [r7, #36]
 7825 00de DA6A     		ldr	r2, [r3, #44]
 7826              		.loc 1 5084 41
 7827 00e0 0F4B     		ldr	r3, .L506+16
 7828 00e2 1B68     		ldr	r3, [r3]
 7829 00e4 DB6A     		ldr	r3, [r3, #44]
 7830              		.loc 1 5084 7
 7831 00e6 9A42     		cmp	r2, r3
 7832 00e8 08D9     		bls	.L499
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 7833              		.loc 1 5088 8
 7834 00ea 3B68     		ldr	r3, [r7]
 7835 00ec 002B     		cmp	r3, #0
 7836 00ee 02D0     		beq	.L505
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 7837              		.loc 1 5090 34
 7838 00f0 3B68     		ldr	r3, [r7]
 7839 00f2 0122     		movs	r2, #1
 7840 00f4 1A60     		str	r2, [r3]
 7841              	.L505:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 7842              		.loc 1 5096 20
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 232


 7843 00f6 0B4B     		ldr	r3, .L506+20
 7844 00f8 0122     		movs	r2, #1
 7845 00fa 1A60     		str	r2, [r3]
 7846              	.L499:
 7847 00fc 3B6A     		ldr	r3, [r7, #32]
 7848 00fe BB60     		str	r3, [r7, #8]
 7849              	.LBB239:
 7850              	.LBB240:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7851              		.loc 2 229 2
 7852 0100 BB68     		ldr	r3, [r7, #8]
 7853              		.syntax unified
 7854              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7855 0102 83F31188 			msr basepri, r3	
 7856              	@ 0 "" 2
 7857              		.loc 2 233 1
 7858              		.thumb
 7859              		.syntax unified
 7860 0106 00BF     		nop
 7861              	.LBE240:
 7862              	.LBE239:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7863              		.loc 1 5105 2
 7864 0108 00BF     		nop
 7865 010a 2837     		adds	r7, r7, #40
 7866              	.LCFI299:
 7867              		.cfi_def_cfa_offset 8
 7868 010c BD46     		mov	sp, r7
 7869              	.LCFI300:
 7870              		.cfi_def_cfa_register 13
 7871              		@ sp needed
 7872 010e 80BD     		pop	{r7, pc}
 7873              	.L507:
 7874              		.align	2
 7875              	.L506:
 7876 0110 00000000 		.word	uxSchedulerSuspended
 7877 0114 00000000 		.word	uxTopReadyPriority
 7878 0118 00000000 		.word	pxReadyTasksLists
 7879 011c 00000000 		.word	xPendingReadyList
 7880 0120 00000000 		.word	pxCurrentTCB
 7881 0124 00000000 		.word	xYieldPending
 7882              		.cfi_endproc
 7883              	.LFE62:
 7885              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 7886              		.align	1
 7887              		.global	xTaskNotifyStateClear
 7888              		.syntax unified
 7889              		.thumb
 7890              		.thumb_func
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 233


 7892              	xTaskNotifyStateClear:
 7893              	.LFB63:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7894              		.loc 1 5113 2
 7895              		.cfi_startproc
 7896              		@ args = 0, pretend = 0, frame = 16
 7897              		@ frame_needed = 1, uses_anonymous_args = 0
 7898 0000 80B5     		push	{r7, lr}
 7899              	.LCFI301:
 7900              		.cfi_def_cfa_offset 8
 7901              		.cfi_offset 7, -8
 7902              		.cfi_offset 14, -4
 7903 0002 84B0     		sub	sp, sp, #16
 7904              	.LCFI302:
 7905              		.cfi_def_cfa_offset 24
 7906 0004 00AF     		add	r7, sp, #0
 7907              	.LCFI303:
 7908              		.cfi_def_cfa_register 7
 7909 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7910              		.loc 1 5119 11
 7911 0008 7B68     		ldr	r3, [r7, #4]
 7912 000a 002B     		cmp	r3, #0
 7913 000c 02D1     		bne	.L509
 7914              		.loc 1 5119 11 is_stmt 0 discriminator 1
 7915 000e 0E4B     		ldr	r3, .L514
 7916 0010 1B68     		ldr	r3, [r3]
 7917 0012 00E0     		b	.L510
 7918              	.L509:
 7919              		.loc 1 5119 11 discriminator 2
 7920 0014 7B68     		ldr	r3, [r7, #4]
 7921              	.L510:
 7922              		.loc 1 5119 9 is_stmt 1 discriminator 4
 7923 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7924              		.loc 1 5121 3
 7925 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 7926              		.loc 1 5123 13
 7927 001c BB68     		ldr	r3, [r7, #8]
 7928 001e 93F85830 		ldrb	r3, [r3, #88]
 7929 0022 DBB2     		uxtb	r3, r3
 7930              		.loc 1 5123 6
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 234


 7931 0024 022B     		cmp	r3, #2
 7932 0026 06D1     		bne	.L511
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7933              		.loc 1 5125 26
 7934 0028 BB68     		ldr	r3, [r7, #8]
 7935 002a 0022     		movs	r2, #0
 7936 002c 83F85820 		strb	r2, [r3, #88]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 7937              		.loc 1 5126 13
 7938 0030 0123     		movs	r3, #1
 7939 0032 FB60     		str	r3, [r7, #12]
 7940 0034 01E0     		b	.L512
 7941              	.L511:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 7942              		.loc 1 5130 13
 7943 0036 0023     		movs	r3, #0
 7944 0038 FB60     		str	r3, [r7, #12]
 7945              	.L512:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7946              		.loc 1 5133 3
 7947 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7948              		.loc 1 5135 10
 7949 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7950              		.loc 1 5136 2
 7951 0040 1846     		mov	r0, r3
 7952 0042 1037     		adds	r7, r7, #16
 7953              	.LCFI304:
 7954              		.cfi_def_cfa_offset 8
 7955 0044 BD46     		mov	sp, r7
 7956              	.LCFI305:
 7957              		.cfi_def_cfa_register 13
 7958              		@ sp needed
 7959 0046 80BD     		pop	{r7, pc}
 7960              	.L515:
 7961              		.align	2
 7962              	.L514:
 7963 0048 00000000 		.word	pxCurrentTCB
 7964              		.cfi_endproc
 7965              	.LFE63:
 7967              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 7968              		.align	1
 7969              		.global	ulTaskNotifyValueClear
 7970              		.syntax unified
 7971              		.thumb
 7972              		.thumb_func
 7974              	ulTaskNotifyValueClear:
 7975              	.LFB64:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 235


5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7976              		.loc 1 5144 2
 7977              		.cfi_startproc
 7978              		@ args = 0, pretend = 0, frame = 16
 7979              		@ frame_needed = 1, uses_anonymous_args = 0
 7980 0000 80B5     		push	{r7, lr}
 7981              	.LCFI306:
 7982              		.cfi_def_cfa_offset 8
 7983              		.cfi_offset 7, -8
 7984              		.cfi_offset 14, -4
 7985 0002 84B0     		sub	sp, sp, #16
 7986              	.LCFI307:
 7987              		.cfi_def_cfa_offset 24
 7988 0004 00AF     		add	r7, sp, #0
 7989              	.LCFI308:
 7990              		.cfi_def_cfa_register 7
 7991 0006 7860     		str	r0, [r7, #4]
 7992 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 7993              		.loc 1 5150 11
 7994 000a 7B68     		ldr	r3, [r7, #4]
 7995 000c 002B     		cmp	r3, #0
 7996 000e 02D1     		bne	.L517
 7997              		.loc 1 5150 11 is_stmt 0 discriminator 1
 7998 0010 0C4B     		ldr	r3, .L520
 7999 0012 1B68     		ldr	r3, [r3]
 8000 0014 00E0     		b	.L518
 8001              	.L517:
 8002              		.loc 1 5150 11 discriminator 2
 8003 0016 7B68     		ldr	r3, [r7, #4]
 8004              	.L518:
 8005              		.loc 1 5150 9 is_stmt 1 discriminator 4
 8006 0018 FB60     		str	r3, [r7, #12]
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8007              		.loc 1 5152 3
 8008 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009              		.loc 1 5156 27
 8010 001e 094B     		ldr	r3, .L520
 8011 0020 1B68     		ldr	r3, [r3]
 8012              		.loc 1 5156 13
 8013 0022 5B6D     		ldr	r3, [r3, #84]
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 236


 8014 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8015              		.loc 1 5157 9
 8016 0026 FB68     		ldr	r3, [r7, #12]
 8017 0028 5A6D     		ldr	r2, [r3, #84]
 8018              		.loc 1 5157 30
 8019 002a 3B68     		ldr	r3, [r7]
 8020 002c DB43     		mvns	r3, r3
 8021              		.loc 1 5157 27
 8022 002e 1A40     		ands	r2, r2, r3
 8023 0030 FB68     		ldr	r3, [r7, #12]
 8024 0032 5A65     		str	r2, [r3, #84]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8025              		.loc 1 5159 3
 8026 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 8027              		.loc 1 5161 10
 8028 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8029              		.loc 1 5162 2
 8030 003a 1846     		mov	r0, r3
 8031 003c 1037     		adds	r7, r7, #16
 8032              	.LCFI309:
 8033              		.cfi_def_cfa_offset 8
 8034 003e BD46     		mov	sp, r7
 8035              	.LCFI310:
 8036              		.cfi_def_cfa_register 13
 8037              		@ sp needed
 8038 0040 80BD     		pop	{r7, pc}
 8039              	.L521:
 8040 0042 00BF     		.align	2
 8041              	.L520:
 8042 0044 00000000 		.word	pxCurrentTCB
 8043              		.cfi_endproc
 8044              	.LFE64:
 8046              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8047              		.align	1
 8048              		.syntax unified
 8049              		.thumb
 8050              		.thumb_func
 8052              	prvAddCurrentTaskToDelayedList:
 8053              	.LFB65:
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 237


5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8054              		.loc 1 5178 1
 8055              		.cfi_startproc
 8056              		@ args = 0, pretend = 0, frame = 16
 8057              		@ frame_needed = 1, uses_anonymous_args = 0
 8058 0000 80B5     		push	{r7, lr}
 8059              	.LCFI311:
 8060              		.cfi_def_cfa_offset 8
 8061              		.cfi_offset 7, -8
 8062              		.cfi_offset 14, -4
 8063 0002 84B0     		sub	sp, sp, #16
 8064              	.LCFI312:
 8065              		.cfi_def_cfa_offset 24
 8066 0004 00AF     		add	r7, sp, #0
 8067              	.LCFI313:
 8068              		.cfi_def_cfa_register 7
 8069 0006 7860     		str	r0, [r7, #4]
 8070 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8071              		.loc 1 5180 18
 8072 000a 214B     		ldr	r3, .L527
 8073 000c 1B68     		ldr	r3, [r3]
 8074 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8075              		.loc 1 5193 35
 8076 0010 204B     		ldr	r3, .L527+4
 8077 0012 1B68     		ldr	r3, [r3]
 8078              		.loc 1 5193 6
 8079 0014 0433     		adds	r3, r3, #4
 8080 0016 1846     		mov	r0, r3
 8081 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 238


5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8082              		.loc 1 5206 5
 8083 001c 7B68     		ldr	r3, [r7, #4]
 8084 001e B3F1FF3F 		cmp	r3, #-1
 8085 0022 0AD1     		bne	.L523
 8086              		.loc 1 5206 41 discriminator 1
 8087 0024 3B68     		ldr	r3, [r7]
 8088 0026 002B     		cmp	r3, #0
 8089 0028 07D0     		beq	.L523
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8090              		.loc 1 5211 56
 8091 002a 1A4B     		ldr	r3, .L527+4
 8092 002c 1B68     		ldr	r3, [r3]
 8093              		.loc 1 5211 4
 8094 002e 0433     		adds	r3, r3, #4
 8095 0030 1946     		mov	r1, r3
 8096 0032 1948     		ldr	r0, .L527+8
 8097 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 239


5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8098              		.loc 1 5286 1
 8099 0038 26E0     		b	.L526
 8100              	.L523:
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8101              		.loc 1 5218 16
 8102 003a FA68     		ldr	r2, [r7, #12]
 8103 003c 7B68     		ldr	r3, [r7, #4]
 8104 003e 1344     		add	r3, r3, r2
 8105 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8106              		.loc 1 5221 4
 8107 0042 144B     		ldr	r3, .L527+4
 8108 0044 1B68     		ldr	r3, [r3]
 8109 0046 BA68     		ldr	r2, [r7, #8]
 8110 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 240


 8111              		.loc 1 5223 6
 8112 004a BA68     		ldr	r2, [r7, #8]
 8113 004c FB68     		ldr	r3, [r7, #12]
 8114 004e 9A42     		cmp	r2, r3
 8115 0050 09D2     		bcs	.L525
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8116              		.loc 1 5227 5
 8117 0052 124B     		ldr	r3, .L527+12
 8118 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8119              		.loc 1 5227 60
 8120 0056 0F4B     		ldr	r3, .L527+4
 8121 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8122              		.loc 1 5227 5
 8123 005a 0433     		adds	r3, r3, #4
 8124 005c 1946     		mov	r1, r3
 8125 005e 1046     		mov	r0, r2
 8126 0060 FFF7FEFF 		bl	vListInsert
 8127              		.loc 1 5286 1
 8128 0064 10E0     		b	.L526
 8129              	.L525:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8130              		.loc 1 5233 5
 8131 0066 0E4B     		ldr	r3, .L527+16
 8132 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8133              		.loc 1 5233 52
 8134 006a 0A4B     		ldr	r3, .L527+4
 8135 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8136              		.loc 1 5233 5
 8137 006e 0433     		adds	r3, r3, #4
 8138 0070 1946     		mov	r1, r3
 8139 0072 1046     		mov	r0, r2
 8140 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8141              		.loc 1 5238 21
 8142 0078 0A4B     		ldr	r3, .L527+20
 8143 007a 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8144              		.loc 1 5238 7
 8145 007c BA68     		ldr	r2, [r7, #8]
 8146 007e 9A42     		cmp	r2, r3
 8147 0080 02D2     		bcs	.L526
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8148              		.loc 1 5240 27
 8149 0082 084A     		ldr	r2, .L527+20
 8150 0084 BB68     		ldr	r3, [r7, #8]
 8151 0086 1360     		str	r3, [r2]
 8152              	.L526:
 8153              		.loc 1 5286 1
 8154 0088 00BF     		nop
 8155 008a 1037     		adds	r7, r7, #16
 8156              	.LCFI314:
 8157              		.cfi_def_cfa_offset 8
 8158 008c BD46     		mov	sp, r7
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 241


 8159              	.LCFI315:
 8160              		.cfi_def_cfa_register 13
 8161              		@ sp needed
 8162 008e 80BD     		pop	{r7, pc}
 8163              	.L528:
 8164              		.align	2
 8165              	.L527:
 8166 0090 00000000 		.word	xTickCount
 8167 0094 00000000 		.word	pxCurrentTCB
 8168 0098 00000000 		.word	xSuspendedTaskList
 8169 009c 00000000 		.word	pxOverflowDelayedTaskList
 8170 00a0 00000000 		.word	pxDelayedTaskList
 8171 00a4 00000000 		.word	xNextTaskUnblockTime
 8172              		.cfi_endproc
 8173              	.LFE65:
 8175              		.text
 8176              	.Letext0:
 8177              		.file 3 "D:/MSYS2/mingw64/lib/gcc/arm-none-eabi/13.3.0/include/stddef.h"
 8178              		.file 4 "D:/MSYS2/mingw64/arm-none-eabi/include/machine/_default_types.h"
 8179              		.file 5 "D:/MSYS2/mingw64/arm-none-eabi/include/sys/_stdint.h"
 8180              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8181              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8182              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8183              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 8184              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 8185              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 8186              		.file 12 "D:/MSYS2/mingw64/arm-none-eabi/include/string.h"
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 242


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:24     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:21     .bss.pxCurrentTCB:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:27     .bss.pxReadyTasksLists:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:30     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:33     .bss.xDelayedTaskList1:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:36     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:39     .bss.xDelayedTaskList2:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:42     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:45     .bss.pxDelayedTaskList:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:48     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:51     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:54     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:57     .bss.xPendingReadyList:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:60     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:63     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:66     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:69     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:72     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:75     .bss.xSuspendedTaskList:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:78     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:81     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:84     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:87     .bss.xTickCount:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:90     .bss.xTickCount:00000000 xTickCount
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:93     .bss.uxTopReadyPriority:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:96     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:99     .bss.xSchedulerRunning:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:102    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:105    .bss.xPendedTicks:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:108    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:111    .bss.xYieldPending:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:114    .bss.xYieldPending:00000000 xYieldPending
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:117    .bss.xNumOfOverflows:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:120    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:123    .bss.uxTaskNumber:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:126    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:129    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:132    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:135    .bss.xIdleTaskHandle:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:138    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:141    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:144    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:147    .text.xTaskCreateStatic:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:153    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:440    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:658    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:321    .text.xTaskCreate:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:327    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:435    .text.prvInitialiseNewTask:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:653    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5166   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:808    .text.prvAddNewTaskToReadyList:000000c4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:819    .text.vTaskDelete:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:825    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5785   .text.prvDeleteTCB:00000000 prvDeleteTCB
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 243


C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5880   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:985    .text.vTaskDelete:000000c8 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:997    .text.vTaskDelayUntil:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1003   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2791   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:8052   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2837   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1213   .text.vTaskDelayUntil:000000f4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1220   .text.vTaskDelay:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1226   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1320   .text.vTaskDelay:00000064 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1326   .text.eTaskGetState:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1332   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1491   .text.eTaskGetState:000000bc $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1500   .text.uxTaskPriorityGet:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1506   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1561   .text.uxTaskPriorityGet:00000030 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1566   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1572   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1663   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1668   .text.vTaskPrioritySet:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1674   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1905   .text.vTaskPrioritySet:0000012c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1913   .text.vTaskSuspend:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:1919   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3861   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2092   .text.vTaskSuspend:000000d4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2102   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2107   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2201   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2207   .text.vTaskResume:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2213   .text.vTaskResume:00000000 vTaskResume
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2353   .text.vTaskResume:000000b0 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2361   .text.xTaskResumeFromISR:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2367   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2541   .text.xTaskResumeFromISR:000000d4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2550   .rodata:00000000 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2554   .text.vTaskStartScheduler:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2560   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2710   .text.vTaskStartScheduler:000000b8 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5105   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2720   .text.vTaskEndScheduler:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2726   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2780   .text.vTaskEndScheduler:0000002c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2785   .text.vTaskSuspendAll:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2826   .text.vTaskSuspendAll:00000018 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:2831   .text.xTaskResumeAll:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3593   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3057   .text.xTaskResumeAll:00000118 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3070   .text.xTaskGetTickCount:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3076   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3116   .text.xTaskGetTickCount:0000001c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3121   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3127   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3168   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3173   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3179   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 244


C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3210   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3215   .text.pcTaskGetName:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3221   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3300   .text.pcTaskGetName:00000048 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3305   .text.uxTaskGetSystemState:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3311   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5516   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3489   .text.uxTaskGetSystemState:00000104 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3499   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3505   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3581   .text.xTaskCatchUpTicks:0000004c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3587   .text.xTaskIncrementTick:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3840   .text.xTaskIncrementTick:00000148 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:3855   .text.vTaskSwitchContext:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4002   .text.vTaskSwitchContext:000000a8 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4011   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4017   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4088   .text.vTaskPlaceOnEventList:00000048 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4093   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4099   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4205   .text.vTaskPlaceOnUnorderedEventList:00000074 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4211   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4217   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4297   .text.vTaskPlaceOnEventListRestricted:00000054 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4302   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4308   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4449   .text.xTaskRemoveFromEventList:000000b0 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4459   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4465   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4611   .text.vTaskRemoveFromUnorderedEventList:000000b4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4620   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4626   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4698   .text.vTaskSetTimeOutState:00000048 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4704   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4710   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4755   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4761   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4767   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4935   .text.xTaskCheckForTimeOut:000000c0 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4941   .text.vTaskMissedYield:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4947   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4979   .text.vTaskMissedYield:00000014 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4984   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:4990   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5045   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5051   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5100   .text.prvIdleTask:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5261   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5155   .text.prvIdleTask:0000002c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5161   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5244   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5256   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5333   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5340   .text.vTaskGetInfo:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5346   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5648   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5506   .text.vTaskGetInfo:000000c8 $d
ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 245


C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5511   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5643   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5712   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5718   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5775   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5780   .text.prvDeleteTCB:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5875   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5942   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5948   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5954   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5994   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:5999   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6005   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6067   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6073   .text.xTaskPriorityInherit:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6079   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6228   .text.xTaskPriorityInherit:000000c4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6235   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6241   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6411   .text.xTaskPriorityDisinherit:000000d4 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6418   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6424   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6620   .text.vTaskPriorityDisinheritAfterTimeout:000000fc $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6627   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6633   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6683   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6688   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6694   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6739   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6744   .text.ulTaskNotifyTake:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6750   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6864   .text.ulTaskNotifyTake:00000088 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6870   .text.xTaskNotifyWait:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:6876   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7011   .text.xTaskNotifyWait:000000ac $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7017   .text.xTaskGenericNotify:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7023   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7107   .text.xTaskGenericNotify:00000064 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7112   .text.xTaskGenericNotify:00000078 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7299   .text.xTaskGenericNotify:00000164 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7307   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7313   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7419   .text.xTaskGenericNotifyFromISR:00000084 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7424   .text.xTaskGenericNotifyFromISR:00000098 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7640   .text.xTaskGenericNotifyFromISR:000001a8 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7650   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7656   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7876   .text.vTaskNotifyGiveFromISR:00000110 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7886   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7892   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7963   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7968   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:7974   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:8042   .text.ulTaskNotifyValueClear:00000044 $d
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:8047   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s:8166   .text.prvAddCurrentTaskToDelayedList:00000090 $d

ARM GAS  C:\Users\23671\AppData\Local\Temp\ccg1ZWID.s 			page 246


UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vListInsert
vApplicationIdleHook
vListInitialise
